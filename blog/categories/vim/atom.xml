<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Ruslan Osipov]]></title>
  <link href="http://www.rosipov.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://www.rosipov.com/"/>
  <updated>2021-04-05T01:56:42+00:00</updated>
  <id>http://www.rosipov.com/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I use Vimwiki]]></title>
    <link href="http://www.rosipov.com/blog/how-i-use-vimwiki/"/>
    <updated>2019-06-24T01:00:00+00:00</updated>
    <id>http://www.rosipov.com/blog/how-i-use-vimwiki</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been <a href="https://www.rosipov.com/blog/personal-wiki-with-vimwiki/">using Vimwiki for 5 years</a>, on and off. There&rsquo;s a multi year gap in between, some entries are back to back for months on end, while some notes are quarters apart.</p>

<p>Over those 5 years I&rsquo;ve tried a few different lightweight personal wiki solutions, but kept coming back to Vimwiki due to my excessive familiarity with Vim and the simplicity of the underlying format (plain text FTW).</p>

<p>I used to store my Vimwiki in Dropbox, but after Dropbox imposed a three device free tier limit, I <a href="https://www.rosipov.com/blog/google-drive-on-linux-with-rclone/">migrated to Google Drive</a> for all my storage needs (and haven&rsquo;t looked back!). I&rsquo;m able to view my notes on any platform (including previewing the HTML pages on mobile).</p>

<p>I love seeing how other people organize their Wiki homepage, so it&rsquo;s only fair to share mine:</p>

<p><img src="/images/posts/vimwiki-homepage-screenshot.png" title="Screenshot of my wiki homepage." ></p>

<p>I use Vimwiki as a combination of a knowledge repository and a daily project/work journal (<code>&lt;Leader&gt;wi</code>). I love being able to interlink pages, and I find it extremely helpful to write entries journal-style, without having to think of a particular topic or a page to place my notes in.</p>

<p>Whenever I have a specific topic in mind, I create a page for it, or contribute to an existing page. If I don&rsquo;t - I create a diary entry (<code>&lt;Leader&gt;w&lt;Leader&gt;w</code>), and move any developed topics into their own pages.</p>

<p>I use folders (I keep wanting to call them namespaces) for disconnected topics which I don&rsquo;t usually connect with the rest of the wiki: like video games, financial research, and so on. I&rsquo;m not sure I&rsquo;m getting enough value out of namespaces though, and I might revisit using those in the future: too many files in a single directory is not a problem since I don&rsquo;t interract with the files directly.</p>

<p>Most importantly, every once in a while I go back and revisit the organizational structure of the wiki: move pages into folders where needed (<code>:VimwikiRenameLink</code> makes this much less painful), add missing links for recently added but commonly mentioned topics (<code>:VimwikiSearch</code> helps here), and generally tidy up.</p>

<p>I use images liberally (<code>{{local:images/nyan.gif|Nyan.}}</code>), and I occasionally access the HTML version of the wiki (generated by running <code>:VimwikiAll2HTML</code>).</p>

<p>I&rsquo;ve found useful to keep a running todo list with a set of things I need to accomplish for work or my projects, and I move those into corresponding diary pages once the tasks are ticked off.</p>

<p>At the end of each week I try to have a mini-retrospective to validate if my week was productive, and if there&rsquo;s anything I can do to improve upon what I&rsquo;m doing.</p>

<p>I also really like creating in-depth documentation on topics when researching something: the act of writing down and organizing information it helps me understand it better (that&rsquo;s why, for instance, I have a beefy &ldquo;financial/&rdquo; folder, with a ton of research into somewhat dry, but important topics - portfolio rebalancing, health and auto insurance, home ownership, and so on).</p>

<p>Incoherent rambling aside, I&rsquo;m hoping this post will spark some ideas about how to set up and use your own personal wiki.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sane Vim defaults (from Neovim)]]></title>
    <link href="http://www.rosipov.com/blog/sane-vim-defaults-from-neovim/"/>
    <updated>2018-12-27T23:28:37+00:00</updated>
    <id>http://www.rosipov.com/blog/sane-vim-defaults-from-neovim</id>
    <content type="html"><![CDATA[<p>Vim comes with a set of often outdated and counter-intuitive defaults. Vim has been around for around 30 years, and it only makes sense that many defaults did not age well.</p>

<p>Neovim addresses this issue by being shipped with many default options tweaked for modern editing experience. If you can&rsquo;t or don&rsquo;t want to use Neovim - I highly recommend setting some these defaults in your <code>.vimrc</code>:</p>

<pre><code>if !has('nvim')
  set nocompatible
  syntax on

  set autoindent
  set autoread
  set backspace=indent,eol,start
  set belloff=all
  set complete-=i
  set display=lastline
  set formatoptions=tcqj
  set history=10000
  set incsearch
  set laststatus=2
  set ruler
  set sessionoptions-=options
  set showcmd
  set sidescroll=1
  set smarttab
  set ttimeoutlen=50
  set ttyfast
  set viminfo+=!
  set wildmenu
endif
</code></pre>

<p>The defaults above enable some of the nicer editor features, like <code>autoindent</code> (respecting existing indentation), <code>incsearch</code> (search as you type), or <code>wildmenu</code> (enhanced command-line completion). The defaults also smooth out some historical artifacts, like unintuitive backspace behavior. Keep in mind, this breaks compatibility with some older Vim versions (but it&rsquo;s unlikely to be a problem for most if not all users).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Status bar color in Vim terminal mode]]></title>
    <link href="http://www.rosipov.com/blog/status-bar-color-in-vim-terminal-mode/"/>
    <updated>2018-12-26T21:02:24+00:00</updated>
    <id>http://www.rosipov.com/blog/status-bar-color-in-vim-terminal-mode</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re using a custom color scheme (why wouldn&rsquo;t you?) in conjunction with a terminal mode in Vim (again, why wouldn&rsquo;t you?), you may have noticed that the terminal status bar has no respect for your color scheme.</p>

<p>Run <code>:term</code>, and you&rsquo;ll be greeted to the default status bar:</p>

<p><img src="/images/posts/vim-terminal-mode-default-colors.png" title="Screenshot of the default terminal mode status line." ></p>

<p>Since terminal mode is still in beta in Vim 8.1, we have to manually set the highlighting groups. It&rsquo;ll require a bit of digging.</p>

<p>Navigate to the directory containing your current color scheme. Depending on the plugin manager, the color schemes are located in different places. On Linux, default color schemes often live in <code>/usr/share/vim/vimcurrent/colors</code>. In this example, I&rsquo;m using PaperColor scheme, and I have it installed using vim-plug in <code>~/.vim/plugged/papercolor-theme</code>, and <code>colors/PaperColor.vim</code> is the file we&rsquo;re looking for.</p>

<p>Search for <code>StatusLine</code> and <code>StatusLineNC</code> (tip: you can do a whole word search in Vim by running <code>/\&lt;StatusLine\&gt;</code>), and note the values used (you might have to jump through a few variables if the color scheme author decided to be fancy). You&rsquo;re interested in <code>ctermbg</code>, <code>ctermfg</code>, <code>guibg</code>, and <code>guifg</code>.</p>

<p>You might find something like this:</p>

<pre><code>hi StatusLine ctermbg=24 ctermfg=254 guibg=#004f87 guifg=#e4e4e4
hi StatusLineNC ctermbg=252 ctermfg=238 guibg=#d0d0d0 guifg=#444444
</code></pre>

<p>Copy those lines to your <code>~/.vimrc</code>. Change <code>StatusLine</code> to <code>StatusLineTerm</code>, and change <code>StatusLineNC</code> to <code>StatusLineTermNC</code>:</p>

<pre><code>" Manually set the status line color.
hi StatusLineTerm ctermbg=24 ctermfg=254 guibg=#004f87 guifg=#e4e4e4
hi StatusLineTermNC ctermbg=252 ctermfg=238 guibg=#d0d0d0 guifg=#444444
</code></pre>

<p>Reload <code>~/.vimrc</code> (<code>:w | so %</code>), and the terminal mode status line should have the same colors as your color scheme:</p>

<p><img src="/images/posts/vim-terminal-mode-correct-colors.png" title="Screenshot of the terminal mode status line with corrected colors." ></p>

<p>Above, <code>hi</code> is a shorthand for <code>highlight</code>, which is used to define highlight group colors. <code>StatusLineTerm</code> and <code>StatusLineTermNC</code> define the highlight groups for terminal mode status line (in active and inactive windows respectively). Options <code>ctermbg</code> and <code>guibg</code> define the background color, and <code>ctermfg</code> and <code>guifg</code> are responsible for the foreground (text) color.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My book has been published!]]></title>
    <link href="http://www.rosipov.com/blog/my-book-has-been-published/"/>
    <updated>2018-12-25T04:00:00+00:00</updated>
    <id>http://www.rosipov.com/blog/my-book-has-been-published</id>
    <content type="html"><![CDATA[<p>Over the past six to nine months I&rsquo;ve been working on a book - <a href="https://amzn.to/2EfGaN5">Mastering Vim</a>. Mastering Vim is a passion project which is meant to take the reader (you) from zero to a hero (future you): from knowing nothing about Vim, to becoming a power user. I cover many of Vim&rsquo;s mysterious commands, philosophy behind the beloved editor, configuration tips, a plethora of community created plugins, as well as creating your own plugins.</p>

<p><img src="/images/posts/mastering-vim.png" title="A picture of a &ldquo;Mastering Vim&rdquo; cover." ></p>

<p>Mastering Vim was written with support from Packt Publishing and was kindly reviewed by Bram Moolenaar (<a href="https://moolenaar.net">website</a>) - the creator of Vim. Many people made this book possible, including <a href="https://vimconf.org">VimConf Japan</a> crew, who kindly hosted me earlier this year. Thank you to everyone for making Mastering Vim happen!</p>

<p>Give it a read and let me know what you think, <a href="https://amzn.to/2EfGaN5">Mastering Vim is available on Amazon</a>!</p>

<p>P.S: This post, like many others, is written in Vim.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cross-platform vim-plug setup]]></title>
    <link href="http://www.rosipov.com/blog/cross-platform-vim-plug-setup/"/>
    <updated>2018-09-23T07:02:42+00:00</updated>
    <id>http://www.rosipov.com/blog/cross-platform-vim-plug-setup</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently switch to <a href="https://github.com/junegunn/vim-plug">vim-plug</a>, a lightweight Vim plugin manager.</p>

<p>It comes with a little <code>.vimrc</code> snippet which downloads the plugin, but it only works for Unix. I use Vim across all three platforms regularly, so I updated the snippet:</p>

<pre><code>" Download and install vim-plug (cross platform).
if empty(glob(
    \ '$HOME/' . (has('win32') ? 'vimfiles' : '.vim') . '/autoload/plug.vim'))
  execute '!curl -fLo ' .
    \ (has('win32') ? '\%USERPROFILE\%/vimfiles' : '$HOME/.vim') . 
    \ '/autoload/plug.vim --create-dirs ' .
    \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
</code></pre>

<p>The above should work across all three major OSes, since Windows 10 recently received <code>curl</code> support.</p>
]]></content>
  </entry>
  
</feed>
