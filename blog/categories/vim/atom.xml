<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Ruslan Osipov]]></title>
  <link href="http://www.rosipov.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://www.rosipov.com/"/>
  <updated>2021-03-27T12:11:11+00:00</updated>
  <id>http://www.rosipov.com/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vortex Core 40% keyboard]]></title>
    <link href="http://www.rosipov.com/blog/vortex-core-keyboard/"/>
    <updated>2020-09-13T17:00:00+00:00</updated>
    <id>http://www.rosipov.com/blog/vortex-core-keyboard</id>
    <content type="html"><![CDATA[<p><em>This review is written entirely using Vortex Core, in Markdown, and using Vim.</em></p>

<p>Earlier this week I purchased <a href="https://amzn.to/3ivzMCK">Vortex Core</a> - a 40% keyboard from a Taiwanese company Vortex, makers of the ever popular <a href="https://mechanicalkeyboards.com/shop/index.php?l=product_detail&amp;p=3633">Pok3r</a> keyboard (which I happen to use as my daily driver). This is a keyboard with only 47 keys: it drops the numpad (what&rsquo;s called 80%), function row (now we&rsquo;re down to 60%), and the dedicated number row (bringing us to the 40% keyboard realm).</p>

<p>Words don&rsquo;t do justice to how small a 40% keyboard is. So here is a picture of Vortex Core next to Pok3r, which is an already a small keyboard.</p>

<p><img src="/images/posts/vortex-core-and-pok3r.jpg" title="A picture of Vortex Core 40% keyboard next to a Pok3r 60% keyboard." ></p>

<p>At around a <a href="https://amzn.to/3ivzMCK">$100 on Amazon</a> it&rsquo;s one of the cheaper 40% options, but Vortex did not skimp on quality. The case is sturdy, is made of beautiful anodized aluminum, and has some weight to it. The keycaps this keyboard comes with feel fantastic (including slight dips on <code>F</code> and <code>J</code> keys), and I`m a huge fan of the look.</p>

<p>I hooked it up to my Microsoft Surface Go as a toy more than anything else. And now I think I may have discovered the perfect writing machine! Small form factor of the keyboard really compliments the already small Surface Go screen, and there&rsquo;s just enough screen real estate to comfortably write and edit text.</p>

<p><img src="/images/posts/vortex-core-and-surface-go.jpg" title="A picture of Vortex Core 40% keyboard plugged into Microsoft Surface Go screen." ></p>

<p>I&rsquo;ve used Vortex Core on and off for the past few days, and I feel like I have a solid feel for it. Let&rsquo;s dig in!</p>

<h2>What&rsquo;s different about it?</h2>

<p>First, the keycap size and distance between keys are standard: it&rsquo;s a standard staggered layout most people are used to. This means that when typing words, there is no noticeable speed drop. In fact I find myself typing a tiny bit faster using this keyboard than my daily driver - but that could just be my enthusiasm shining through. I hover at around 80 words per minute on both keyboards.</p>

<p>That is until it&rsquo;s time to type &ldquo;you&rsquo;re&rdquo;, or use any punctuation outside of the <code>:;,.&lt;&gt;</code> symbols. That&rsquo;s right, the normally easily accessible apostrophe is hidden under the function layer (<code>Fn1 + b</code>), and so is the question mark (<code>Fn1 + Shift + Tab</code>). <code>-</code>, <code>=</code>, <code>/</code>, <code>\</code>, <code>[</code>, and <code>]</code> are gone too, and I&rsquo;ll cover those in due time.</p>

<p>On a first day this immediately dropped my typing speed to around 50 words per minute, as it&rsquo;s completely unintuitive at first! In fact, I just now stopped hitting <code>Enter</code> every time I tried to place an apostrophe! But only after a few hours of sparingly using Vortex Core I&rsquo;m up to 65 WPM, and it feels like I would regain my regular typing speed within a week.</p>

<p>Despite what you might think, it&rsquo;s relatively easy to get used to odd key placement like this.</p>

<p>Keys have 4 layers (not to be confused with programming layers), and that&rsquo;s how the numbers, symbols, and some of the more rarely used keys are accessed. For example, here&rsquo;s what the key <code>L</code> contains:</p>

<ul>
<li>Default layer (no modifiers): <code>L</code></li>
<li><code>Fn1</code> layer: <code>0</code></li>
<li><code>Fn1 + Shift</code> layer: <code>)</code></li>
<li><code>Fn</code> layer: <code>right arrow key</code></li>
</ul>


<p>The good news is that unlike many 40% keyboards on the market (and it&rsquo;s a rather esoteric market), Vortex Core has key inscriptions for each layer. Something like <a href="https://mechanicalkeyboards.com/shop/index.php?l=product_detail&amp;p=3633https://olkb.com/collections/planck">Planck</a> would require you to print out layout cheatsheets while you get used to the function layers.</p>

<p><img src="/images/posts/vortex-core-left-half.jpg" title="Left side of the Vortex Core keyboard, demonstrating numbers and special characters." ></p>

<p>As I continue attempting to type, numbers always take me by surprise: the whole number row is a function layer on top of the home row (where your fingers normally rest). After initially hitting the empty air when attempting to type numbers, I began to get used to using the home row instead.</p>

<p>The placement mimics the order the keys would be in on the number row (<code>1234567890-=</code>), but <code>1</code> is placed on the <code>Tab</code> key, while <code>=</code> is on the <code>Enter</code>. While I was able to find the numbers relatively easily due to similar placement, I would often be off-by-one due to row starting on a <code>Tab</code> key.</p>

<p>Things get a lot more complicated when it comes to special symbols. These are already normally gated behind a <code>Shift</code>-press on a regular keyboard, and Vortex Core requires some Emacs-level gymnastics! E.g. you need to press <code>Fn1 + Shift + F</code> to conjure <code>%</code>.</p>

<p>Such complex keypresses are beyond counter-intuitive at first. Yet after a few hours, I began to get used to some of the more frequently used keys: <code>!</code> is <code>Fn1 + Shift + Tab</code>, <code>-</code> is <code>Fn1 + Shift + 1</code>, <code>$</code> (end of line in Vim) is <code>Fn1 + Shift + D</code>, and so on. Combining symbols quickly becomes problematic.</p>

<p>It&rsquo;s fairly easy to get used to inserting a lone symbol here and there, but the problems start when having to combine multiple symbols at once. E.g. writing an expression like <code>'Fn1 + Shift + D' = '$'</code> above involves the following keypresses: <code>&lt;Fn1&gt;&lt;Esc&gt; F N &lt;Fn1&gt;&lt;Tab&gt; &lt;Fn1&gt;&lt;Shift&gt;&lt;Enter&gt; S H I F T &lt;Fn1&gt;&lt;Shift&gt;&lt;Enter&gt; D &lt;Fn1&gt;&lt;Esc&gt; &lt;Fn1&gt;&lt;Enter&gt; &lt;Fn1&gt;&lt;Esc&gt; &lt;Fn1&gt;&lt;Shift&gt;D &lt;Fn1&gt;&lt;Esc&gt;</code>. Could you image how long it took me to write that up?</p>

<p><img class="/images/posts/vortex-core-right-half.jpg Right side of the Vortex Core keyboard, demonstrating special characters placed on" src="<code>bnm,.</code>&#8221; title=&#8221;keys.&#8221; ></p>

<p>The most difficult part of getting used to the keyboard is the fact that a few keys on the right side are chopped off: <code>'/[]\</code> are placed in the bottom right of the keyboard, to <code>bnm,.</code> keys. While the rest of the layout attempts to mimic the existing convention and only shifting the rows down, the aforementioned keys are placed arbitrarily (as there&rsquo;s no logical way to place them otherwise).</p>

<p>This probably won&rsquo;t worry you if you don&rsquo;t write a lot of code or math, but I do, and it`s muscle memory I&rsquo;ll have to develop.</p>

<p>There are dedicated <code>Del</code> and <code>Backspace</code> keys, which is a bit of an odd choice, likely influenced by needing somewhere to place the <code>F12</code> key - function row is right above the home row, and is hidden behind the <code>Fn1</code> layer.</p>

<p>Spacebar is split into two (for ease of finding keycaps I hear), and it doesn&rsquo;t affect me whatsoever. I mostly hit spacebar with my left thumb and it&rsquo;s convenient.</p>

<p><code>Tab</code> is placed where the <code>Caps Lock</code> is, which feels like a good choice. After accidentally hitting <code>Esc</code> a few times, I got used to the position. Do make sure to get <a href="http://www.vortexgear.tw/vortex3.asp">latest firmware</a> for your Vortex Core - I believe earlier firmware versions hides Tab behind a function layer, defaulting the key to <code>Caps Lock</code> (although my keycaps reflected the updated firmware).</p>

<p>So I&rsquo;d say the numbers and the function row take the least amount of time to get used to. It&rsquo;s the special characters that take time.</p>

<h2>Can you use it with Vim?</h2>

<p>I&rsquo;m a huge fan of Vim, and I even wrote <a href="https://amzn.to/3htsTjK">a book</a> on the subject. In fact, I&rsquo;m writing this very review in Vim.</p>

<p>And I must say, it&rsquo;s difficult. My productivity took a hit. I use curly braces to move between paragraphs, I regularly search with <code>/</code>, <code>?</code>, and <code>*</code>, move within a line with <code>_</code> and <code>$</code>, and use numbers in my commands like <code>c2w</code> (change two words) as well as other special characters, e.g. <code>da"</code> (delete around double quotes).</p>

<p>The most difficult combination being spelling correction: <code>z=</code> followed by a number to select the correct spelling. I consistency break the flow by having to press <code>Z &lt;Fn1&gt;&lt;Enter&gt; &lt;Fn1&gt;&lt;Tab&gt;</code> or something similar to quickly fix a misspelling.</p>

<p>My Vim productivity certainly took a massive hit. Yet, after a few days it&rsquo;s starting to slowly climb back up, and I find myself remembering the right key combinations as the muscle memory kicks in.</p>

<p>I assume my Vim experience translates well into programming. Even though I write code for a living, I haven&rsquo;t used Vortex Core to crank out code.</p>

<h2>Speaking of programming</h2>

<p>The whole keyboard is fully programmable (as long as you update it to the <a href="http://www.vortexgear.tw/vortex3.asp">latest firmware</a>).</p>

<p>It&rsquo;s an easy process - a <a href="http://www.vortexgear.tw/vortex3.asp">three page manual</a> covers everything that&rsquo;s needed like using different keyboard layers or remapping regular and function keys.</p>

<p>The manual also mentions using right <code>Win</code>, <code>Pn</code>, <code>Ctrl</code>, and <code>Shift</code> keys as arrow keys by hitting left <code>Win</code>, left <code>Alt</code>, and right spacebar. Vortex keyboards nowadays always come with this feature, but due to small form factor of the keys (especially Shift), impromptu arrow keys on Vortex Core are nearly indistinguishable from individual arrow keys.</p>

<p>Remapping is helpful, since I&rsquo;m used to having <code>Ctrl</code> where <code>Caps Lock</code> is (even though this means I have to hide Tab behind a function layer), or using <code>hjkl</code> as arrow keys (as opposed to the default <code>ijkl</code>).</p>

<p>It took me only a few minutes to adjust the keyboard to my needs, but I imagine I will come back for tweaks - I&rsquo;m not so sure if I&rsquo;ll be able to get used to special symbols hidden behind <code>Fn1</code> + <code>Shift</code> + key layer. Regularly pressing three keys at the time (with two of these keys being on the edge of the keyboard) feels unnatural and inconvenient right now. But I&rsquo;m only a few hours in, and stenographers manager to do it.</p>

<h2>Living in the command line</h2>

<p>The absence of certain special characters is especially felt when using the command line. Not having a forward slash available with a single keypress makes typing paths more difficult. I also use <code>Ctrl + \</code> as a modifier key for tmux, and as you could imagine it&rsquo;s just as problematic.</p>

<p>Despite so many difficulties, I&rsquo;m loving my time with Vortex Core! To be honest with myself, I don&rsquo;t buy new keyboards to be productive, or increase my typing speed. I buy them because they look great and are fun to type on. And Vortex Core looks fantastic, and being able to cover most of the keyboard with both hands is amazing.</p>

<p>There&rsquo;s just something special about having such a small board under my fingertips.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I use Vimwiki]]></title>
    <link href="http://www.rosipov.com/blog/how-i-use-vimwiki/"/>
    <updated>2019-06-24T01:00:00+00:00</updated>
    <id>http://www.rosipov.com/blog/how-i-use-vimwiki</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been <a href="https://www.rosipov.com/blog/personal-wiki-with-vimwiki/">using Vimwiki for 5 years</a>, on and off. There&rsquo;s a multi year gap in between, some entries are back to back for months on end, while some notes are quarters apart.</p>

<p>Over those 5 years I&rsquo;ve tried a few different lightweight personal wiki solutions, but kept coming back to Vimwiki due to my excessive familiarity with Vim and the simplicity of the underlying format (plain text FTW).</p>

<p>I used to store my Vimwiki in Dropbox, but after Dropbox imposed a three device free tier limit, I <a href="https://www.rosipov.com/blog/google-drive-on-linux-with-rclone/">migrated to Google Drive</a> for all my storage needs (and haven&rsquo;t looked back!). I&rsquo;m able to view my notes on any platform (including previewing the HTML pages on mobile).</p>

<p>I love seeing how other people organize their Wiki homepage, so it&rsquo;s only fair to share mine:</p>

<p><img src="/images/posts/vimwiki-homepage-screenshot.png" title="Screenshot of my wiki homepage." ></p>

<p>I use Vimwiki as a combination of a knowledge repository and a daily project/work journal (<code>&lt;Leader&gt;wi</code>). I love being able to interlink pages, and I find it extremely helpful to write entries journal-style, without having to think of a particular topic or a page to place my notes in.</p>

<p>Whenever I have a specific topic in mind, I create a page for it, or contribute to an existing page. If I don&rsquo;t - I create a diary entry (<code>&lt;Leader&gt;w&lt;Leader&gt;w</code>), and move any developed topics into their own pages.</p>

<p>I use folders (I keep wanting to call them namespaces) for disconnected topics which I don&rsquo;t usually connect with the rest of the wiki: like video games, financial research, and so on. I&rsquo;m not sure I&rsquo;m getting enough value out of namespaces though, and I might revisit using those in the future: too many files in a single directory is not a problem since I don&rsquo;t interract with the files directly.</p>

<p>Most importantly, every once in a while I go back and revisit the organizational structure of the wiki: move pages into folders where needed (<code>:VimwikiRenameLink</code> makes this much less painful), add missing links for recently added but commonly mentioned topics (<code>:VimwikiSearch</code> helps here), and generally tidy up.</p>

<p>I use images liberally (<code>{{local:images/nyan.gif|Nyan.}}</code>), and I occasionally access the HTML version of the wiki (generated by running <code>:VimwikiAll2HTML</code>).</p>

<p>I&rsquo;ve found useful to keep a running todo list with a set of things I need to accomplish for work or my projects, and I move those into corresponding diary pages once the tasks are ticked off.</p>

<p>At the end of each week I try to have a mini-retrospective to validate if my week was productive, and if there&rsquo;s anything I can do to improve upon what I&rsquo;m doing.</p>

<p>I also really like creating in-depth documentation on topics when researching something: the act of writing down and organizing information it helps me understand it better (that&rsquo;s why, for instance, I have a beefy &ldquo;financial/&rdquo; folder, with a ton of research into somewhat dry, but important topics - portfolio rebalancing, health and auto insurance, home ownership, and so on).</p>

<p>Incoherent rambling aside, I&rsquo;m hoping this post will spark some ideas about how to set up and use your own personal wiki.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sane Vim defaults (from Neovim)]]></title>
    <link href="http://www.rosipov.com/blog/sane-vim-defaults-from-neovim/"/>
    <updated>2018-12-27T23:28:37+00:00</updated>
    <id>http://www.rosipov.com/blog/sane-vim-defaults-from-neovim</id>
    <content type="html"><![CDATA[<p>Vim comes with a set of often outdated and counter-intuitive defaults. Vim has been around for around 30 years, and it only makes sense that many defaults did not age well.</p>

<p>Neovim addresses this issue by being shipped with many default options tweaked for modern editing experience. If you can&rsquo;t or don&rsquo;t want to use Neovim - I highly recommend setting some these defaults in your <code>.vimrc</code>:</p>

<pre><code>if !has('nvim')
  set nocompatible
  syntax on

  set autoindent
  set autoread
  set backspace=indent,eol,start
  set belloff=all
  set complete-=i
  set display=lastline
  set formatoptions=tcqj
  set history=10000
  set incsearch
  set laststatus=2
  set ruler
  set sessionoptions-=options
  set showcmd
  set sidescroll=1
  set smarttab
  set ttimeoutlen=50
  set ttyfast
  set viminfo+=!
  set wildmenu
endif
</code></pre>

<p>The defaults above enable some of the nicer editor features, like <code>autoindent</code> (respecting existing indentation), <code>incsearch</code> (search as you type), or <code>wildmenu</code> (enhanced command-line completion). The defaults also smooth out some historical artifacts, like unintuitive backspace behavior. Keep in mind, this breaks compatibility with some older Vim versions (but it&rsquo;s unlikely to be a problem for most if not all users).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Status bar color in Vim terminal mode]]></title>
    <link href="http://www.rosipov.com/blog/status-bar-color-in-vim-terminal-mode/"/>
    <updated>2018-12-26T21:02:24+00:00</updated>
    <id>http://www.rosipov.com/blog/status-bar-color-in-vim-terminal-mode</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re using a custom color scheme (why wouldn&rsquo;t you?) in conjunction with a terminal mode in Vim (again, why wouldn&rsquo;t you?), you may have noticed that the terminal status bar has no respect for your color scheme.</p>

<p>Run <code>:term</code>, and you&rsquo;ll be greeted to the default status bar:</p>

<p><img src="/images/posts/vim-terminal-mode-default-colors.png" title="Screenshot of the default terminal mode status line." ></p>

<p>Since terminal mode is still in beta in Vim 8.1, we have to manually set the highlighting groups. It&rsquo;ll require a bit of digging.</p>

<p>Navigate to the directory containing your current color scheme. Depending on the plugin manager, the color schemes are located in different places. On Linux, default color schemes often live in <code>/usr/share/vim/vimcurrent/colors</code>. In this example, I&rsquo;m using PaperColor scheme, and I have it installed using vim-plug in <code>~/.vim/plugged/papercolor-theme</code>, and <code>colors/PaperColor.vim</code> is the file we&rsquo;re looking for.</p>

<p>Search for <code>StatusLine</code> and <code>StatusLineNC</code> (tip: you can do a whole word search in Vim by running <code>/\&lt;StatusLine\&gt;</code>), and note the values used (you might have to jump through a few variables if the color scheme author decided to be fancy). You&rsquo;re interested in <code>ctermbg</code>, <code>ctermfg</code>, <code>guibg</code>, and <code>guifg</code>.</p>

<p>You might find something like this:</p>

<pre><code>hi StatusLine ctermbg=24 ctermfg=254 guibg=#004f87 guifg=#e4e4e4
hi StatusLineNC ctermbg=252 ctermfg=238 guibg=#d0d0d0 guifg=#444444
</code></pre>

<p>Copy those lines to your <code>~/.vimrc</code>. Change <code>StatusLine</code> to <code>StatusLineTerm</code>, and change <code>StatusLineNC</code> to <code>StatusLineTermNC</code>:</p>

<pre><code>" Manually set the status line color.
hi StatusLineTerm ctermbg=24 ctermfg=254 guibg=#004f87 guifg=#e4e4e4
hi StatusLineTermNC ctermbg=252 ctermfg=238 guibg=#d0d0d0 guifg=#444444
</code></pre>

<p>Reload <code>~/.vimrc</code> (<code>:w | so %</code>), and the terminal mode status line should have the same colors as your color scheme:</p>

<p><img src="/images/posts/vim-terminal-mode-correct-colors.png" title="Screenshot of the terminal mode status line with corrected colors." ></p>

<p>Above, <code>hi</code> is a shorthand for <code>highlight</code>, which is used to define highlight group colors. <code>StatusLineTerm</code> and <code>StatusLineTermNC</code> define the highlight groups for terminal mode status line (in active and inactive windows respectively). Options <code>ctermbg</code> and <code>guibg</code> define the background color, and <code>ctermfg</code> and <code>guifg</code> are responsible for the foreground (text) color.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My book has been published!]]></title>
    <link href="http://www.rosipov.com/blog/my-book-has-been-published/"/>
    <updated>2018-12-25T04:00:00+00:00</updated>
    <id>http://www.rosipov.com/blog/my-book-has-been-published</id>
    <content type="html"><![CDATA[<p>Over the past six to nine months I&rsquo;ve been working on a book - <a href="https://amzn.to/2EfGaN5">Mastering Vim</a>. Mastering Vim is a passion project which is meant to take the reader (you) from zero to a hero (future you): from knowing nothing about Vim, to becoming a power user. I cover many of Vim&rsquo;s mysterious commands, philosophy behind the beloved editor, configuration tips, a plethora of community created plugins, as well as creating your own plugins.</p>

<p><img src="/images/posts/mastering-vim.png" title="A picture of a &ldquo;Mastering Vim&rdquo; cover." ></p>

<p>Mastering Vim was written with support from Packt Publishing and was kindly reviewed by Bram Moolenaar (<a href="https://moolenaar.net">website</a>) - the creator of Vim. Many people made this book possible, including <a href="https://vimconf.org">VimConf Japan</a> crew, who kindly hosted me earlier this year. Thank you to everyone for making Mastering Vim happen!</p>

<p>Give it a read and let me know what you think, <a href="https://amzn.to/2EfGaN5">Mastering Vim is available on Amazon</a>!</p>

<p>P.S: This post, like many others, is written in Vim.</p>
]]></content>
  </entry>
  
</feed>
