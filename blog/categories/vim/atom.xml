<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Ruslan Osipov]]></title>
  <link href="http://www.rosipov.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://www.rosipov.com/"/>
  <updated>2019-06-23T22:56:43+00:00</updated>
  <id>http://www.rosipov.com/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sane Vim defaults (from Neovim)]]></title>
    <link href="http://www.rosipov.com/blog/sane-vim-defaults-from-neovim/"/>
    <updated>2018-12-27T23:28:37+00:00</updated>
    <id>http://www.rosipov.com/blog/sane-vim-defaults-from-neovim</id>
    <content type="html"><![CDATA[<p>Vim comes with a set of often outdated and counter-intuitive defaults. Vim has been around for around 30 years, and it only makes sense that many defaults did not age well.</p>

<p>Neovim addresses this issue by being shipped with many default options tweaked for modern editing experience. If you can&rsquo;t or don&rsquo;t want to use Neovim - I highly recommend setting some these defaults in your <code>.vimrc</code>:</p>

<pre><code>if !has('nvim')
  set nocompatible
  syntax on

  set autoindent
  set autoread
  set backspace=indent,eol,start
  set belloff=all
  set complete-=i
  set display=lastline
  set formatoptions=tcqj
  set history=10000
  set incsearch
  set laststatus=2
  set ruler
  set sessionoptions-=options
  set showcmd
  set sidescroll=1
  set smarttab
  set ttimeoutlen=50
  set ttyfast
  set viminfo+=!
  set wildmenu
endif
</code></pre>

<p>The defaults above enable some of the nicer editor features, like <code>autoindent</code> (respecting existing indentation), <code>incsearch</code> (search as you type), or <code>wildmenu</code> (enhanced command-line completion). The defaults also smooth out some historical artifacts, like unintuitive backspace behavior. Keep in mind, this breaks compatibility with some older Vim versions (but it&rsquo;s unlikely to be a problem for most if not all users).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Status bar color in Vim terminal mode]]></title>
    <link href="http://www.rosipov.com/blog/status-bar-color-in-vim-terminal-mode/"/>
    <updated>2018-12-26T21:02:24+00:00</updated>
    <id>http://www.rosipov.com/blog/status-bar-color-in-vim-terminal-mode</id>
    <content type="html"><![CDATA[<p>If you&rsquo;re using a custom color scheme (why wouldn&rsquo;t you?) in conjunction with a terminal mode in Vim (again, why wouldn&rsquo;t you?), you may have noticed that the terminal status bar has no respect for your color scheme.</p>

<p>Run <code>:term</code>, and you&rsquo;ll be greeted to the default status bar:</p>

<p><img src="/images/posts/vim-terminal-mode-default-colors.png" title="Screenshot of the default terminal mode status line." ></p>

<p>Since terminal mode is still in beta in Vim 8.1, we have to manually set the highlighting groups. It&rsquo;ll require a bit of digging.</p>

<p>Navigate to the directory containing your current color scheme. Depending on the plugin manager, the color schemes are located in different places. On Linux, default color schemes often live in <code>/usr/share/vim/vimcurrent/colors</code>. In this example, I&rsquo;m using PaperColor scheme, and I have it installed using vim-plug in <code>~/.vim/plugged/papercolor-theme</code>, and <code>colors/PaperColor.vim</code> is the file we&rsquo;re looking for.</p>

<p>Search for <code>StatusLine</code> and <code>StatusLineNC</code> (tip: you can do a whole word search in Vim by running <code>/\&lt;StatusLine\&gt;</code>), and note the values used (you might have to jump through a few variables if the color scheme author decided to be fancy). You&rsquo;re interested in <code>ctermbg</code>, <code>ctermfg</code>, <code>guibg</code>, and <code>guifg</code>.</p>

<p>You might find something like this:</p>

<pre><code>hi StatusLine ctermbg=24 ctermfg=254 guibg=#004f87 guifg=#e4e4e4
hi StatusLineNC ctermbg=252 ctermfg=238 guibg=#d0d0d0 guifg=#444444
</code></pre>

<p>Copy those lines to your <code>~/.vimrc</code>. Change <code>StatusLine</code> to <code>StatusLineTerm</code>, and change <code>StatusLineNC</code> to <code>StatusLineTermNC</code>:</p>

<pre><code>" Manually set the status line color.
hi StatusLineTerm ctermbg=24 ctermfg=254 guibg=#004f87 guifg=#e4e4e4
hi StatusLineTermNC ctermbg=252 ctermfg=238 guibg=#d0d0d0 guifg=#444444
</code></pre>

<p>Reload <code>~/.vimrc</code> (<code>:w | so %</code>), and the terminal mode status line should have the same colors as your color scheme:</p>

<p><img src="/images/posts/vim-terminal-mode-correct-colors.png" title="Screenshot of the terminal mode status line with corrected colors." ></p>

<p>Above, <code>hi</code> is a shorthand for <code>highlight</code>, which is used to define highlight group colors. <code>StatusLineTerm</code> and <code>StatusLineTermNC</code> define the highlight groups for terminal mode status line (in active and inactive windows respectively). Options <code>ctermbg</code> and <code>guibg</code> define the background color, and <code>ctermfg</code> and <code>guifg</code> are responsible for the foreground (text) color.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My book has been published!]]></title>
    <link href="http://www.rosipov.com/blog/my-book-has-been-published/"/>
    <updated>2018-12-25T04:00:00+00:00</updated>
    <id>http://www.rosipov.com/blog/my-book-has-been-published</id>
    <content type="html"><![CDATA[<p>Over the past six to nine months I&rsquo;ve been working on a book - <a href="https://amzn.to/2EfGaN5">Mastering Vim</a>. Mastering Vim is a passion project which is meant to take the reader (you) from zero to a hero (future you): from knowing nothing about Vim, to becoming a power user. I cover many of Vim&rsquo;s mysterious commands, philosophy behind the beloved editor, configuration tips, a plethora of community created plugins, as well as creating your own plugins.</p>

<p><img src="/images/posts/mastering-vim.png" title="A picture of a &ldquo;Mastering Vim&rdquo; cover." ></p>

<p>Mastering Vim was written with support from Packt Publishing and was kindly reviewed by Bram Moolenaar (<a href="https://moolenaar.net">website</a>) - the creator of Vim. Many people made this book possible, including <a href="https://vimconf.org">VimConf Japan</a> crew, who kindly hosted me earlier this year. Thank you to everyone for making Mastering Vim happen!</p>

<p>Give it a read and let me know what you think, <a href="https://amzn.to/2EfGaN5">Mastering Vim is available on Amazon</a>!</p>

<p>P.S: This post, like many others, is written in Vim.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cross-platform vim-plug setup]]></title>
    <link href="http://www.rosipov.com/blog/cross-platform-vim-plug-setup/"/>
    <updated>2018-09-23T07:02:42+00:00</updated>
    <id>http://www.rosipov.com/blog/cross-platform-vim-plug-setup</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently switch to <a href="https://github.com/junegunn/vim-plug">vim-plug</a>, a lightweight Vim plugin manager.</p>

<p>It comes with a little <code>.vimrc</code> snippet which downloads the plugin, but it only works for Unix. I use Vim across all three platforms regularly, so I updated the snippet:</p>

<pre><code>" Download and install vim-plug (cross platform).
if empty(glob(
    \ '$HOME/' . (has('win32') ? 'vimfiles' : '.vim') . '/autoload/plug.vim'))
  execute '!curl -fLo ' .
    \ (has('win32') ? '\%USERPROFILE\%/vimfiles' : '$HOME/.vim') . 
    \ '/autoload/plug.vim --create-dirs ' .
    \ 'https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
</code></pre>

<p>The above should work across all three major OSes, since Windows 10 recently received <code>curl</code> support.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My .vimrc, annotated]]></title>
    <link href="http://www.rosipov.com/blog/my-vimrc-annotated/"/>
    <updated>2018-02-21T15:00:00+00:00</updated>
    <id>http://www.rosipov.com/blog/my-vimrc-annotated</id>
    <content type="html"><![CDATA[<p></p>

<p>I&rsquo;ve been using Vim for anywhere between 5 and 10 years, and my <code>.vimrc</code> is all grown up.  I use  <code>{{{1</code> to annotate folds in my <code>.vimrc</code>, and use <code>zM</code> to close all folds and <code>zR</code> to open all folds (<code>zc</code>, <code>zo</code>, and <code>za</code> respectively close, open, and toggle individual folds). The <code>---</code> lines are simply cosmetic.</p>

<pre><code>" =&gt; Pre-load ------------------------------------------------------------- {{{1

set nocompatible  " Required for many plugins, ensures it's not compatible with 
                  " Vi, which nobody uses at this point.
filetype plugin indent on  " Great answer: https://vi.stackexchange.com/a/10125
</code></pre>

<p><a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> is downright fantastic plugin manager. It allows one to install plugins with <code>:PluginInstall</code> and upgrade plugins with <code>:PluginUpdate</code>. Simple, easy, reliable. Of course you&rsquo;ll need to <a href="https://github.com/VundleVim/Vundle.vim#quick-start">have Vundle installed</a>, which I normally have as a git submodule.</p>

<pre><code>" Required Vundle setup.
set runtimepath+=~/.vim/bundle/vundle
set runtimepath+=$GOROOT/misc/vim
call vundle#rc()

" =&gt; Vundle plugins ------------------------------------------------------- {{{1

Plugin 'gmarik/vundle' " The Vundle itself, to keep itself updated.

" Colorschemes:
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'ajh17/Spacegray.vim.git'
Plugin 'altercation/vim-colors-solarized'
Plugin 'squarefrog/tomorrow-night.vim'
Plugin 'vim-scripts/ScrollColors'  " Allows scrolling through colorschemes.

" Language/tool integration and support:
Plugin 'burnettk/vim-angular'
Plugin 'fatih/vim-go'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'mileszs/ack.vim'
Plugin 'motemen/git-vim'
Plugin 'nvie/vim-flake8'
Plugin 'pangloss/vim-javascript'
Plugin 'scrooloose/syntastic.git'  " Syntax checker.
Plugin 'tpope/vim-fugitive.git'    " Even better Git support.

" Quality of life:
Plugin 'EinfachToll/DidYouMean'    " For typos during opening files.
Plugin 'ciaranm/detectindent'      " Automatically detect indent.
Plugin 'ervandew/supertab'         " Smarter autocompletion.
Plugin 'junegunn/goyo.vim'         " A plugin for writing prose.
Plugin 'majutsushi/tagbar'         " List tags in a sidebar.
Plugin 'scrooloose/nerdtree'       " A directory tree in a sidebar.
Plugin 'tomtom/tcomment_vim'       " Easy comment blocks with &lt;Leader&gt;cc.
Plugin 'tpope/vim-abolish'         " Extended abbreviation/substition.
Plugin 'tpope/vim-repeat'          " Intelligent repeat with '.'
Plugin 'tpope/vim-surround'        " Work with pairs of quotes/anything.
Plugin 'tpope/vim-unimpaired.git'  " Handy bracket mappings.
Plugin 'tpope/vim-vinegar'         " Enhanced directory browser.
Plugin 'vim-scripts/DirDiff.vim'   " Directory level diff.

" New features:
Plugin 'Lokaltog/vim-easymotion'   " Easy navigation with &lt;Leader&gt;&lt;Leader&gt;w.
Plugin 'kien/ctrlp.vim'            " Hit &lt;C&gt;p for a list of files/buffers.
Plugin 'vim-scripts/Gundo.git'     " Intelligent undo tree.
Plugin 'vim-scripts/vimwiki'       " A personal local Wiki.

if v:version &gt; 703
  Plugin 'SirVer/ultisnips'        " Intricate snippets.
  Plugin 'chrisbra/vim-diff-enhanced'
endif

" =&gt; Plugins configuration ------------------------------------------------ {{{1

" NERDTree: auto close if last window.
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" Force Gundo preview to the bottom.
let g:gundo_preview_bottom = 1

" Map Gundo.
nnoremap &lt;F5&gt; :GundoToggle&lt;cr&gt;

" DetectIndent: Enable and configure.
augroup detectindent
  autocmd!
  autocmd BufReadPost * :DetectIndent
augroup END
let g:detectindent_preferred_expandtab = 1
let g:detectindent_preferred_indent = 2

" UltiSnips: Compatibility with YouCompleteMe via SuperTab.
let g:ycm_key_list_select_completion = ['&lt;C-n&gt;', '&lt;Down&gt;']
let g:ycm_key_list_previous_completion = ['&lt;C-p&gt;', '&lt;Up&gt;']
let g:SuperTabDefaultCompletionType = '&lt;C-n&gt;'
let g:UltiSnipsExpandTrigger = "&lt;tab&gt;"
let g:UltiSnipsJumpForwardTrigger = "&lt;tab&gt;"
let g:UltiSnipsJumpBackwardTrigger = "&lt;s-tab&gt;"

" VimWiki: default location.
let g:vimwiki_list = [{
  \ 'path': '$HOME/Dropbox/wiki',
  \ 'template_path': '$HOME/Dropbox/wiki/templates',
  \ 'template_default': 'default',
  \ 'template_ext': '.html'}]

" Map Tagbar.
nnoremap &lt;F8&gt; :TagbarToggle&lt;cr&gt;

" Synastic configuration.
let g:syntastic_always_populate_loc_list = 1  " Make :lnext work.
let g:syntastic_html_checkers = ['']
let g:syntastic_javascript_checkers = ['gjslint', 'jshint']
let g:syntastic_javascript_gjslint_args = '--strict'
let g:syntastic_python_checkers = ['gpylint']
</code></pre>

<p>Most plugins above change slightly change daily Vim workflow: the way one navigates files, replaying actions, working with snippets, minor tweaks to editing - and I highly recommend at least skimming through README of plugins you&rsquo;re interested in so you can incorporate the changes in your workflow.</p>

<p>I have a set of simple defaults I use everywhere, major changes being changing <code>:</code> to <code>;</code> and moving my leader key to a spacebar. Everything else are tiny quality of life tweaks.</p>

<pre><code>" =&gt; Editing -------------------------------------------------------------- {{{1

syntax on

" Indentation settings.
set autoindent
set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4

" Disable backups and .swp files.
set nobackup
set noswapfile
set nowritebackup

" Semicolon is too long to type.
nnoremap ; :
vnoremap ; :

" Map leader key.
let mapleader = "\&lt;Space&gt;"

" Use system clipboard.
set clipboard=unnamedplus

" Enable wild menu (tab command autocompletion).
set wildmenu
set wildmode=list:longest,full

" Don't complain about unsaved files when switching buffers.
set hidden

" Make soft line breaks much better looking.
if v:version &gt; 703
  set breakindent
endif

" Pretty soft break character.
let &amp;showbreak='↳ '

" =&gt; Looks ---------------------------------------------------------------- {{{1

set background=dark
colorscheme spacegray

" Set terminal window title and set it back on exit.
set title
let &amp;titleold = getcwd()

" Shorten press ENTER to continue messages.
set shortmess=atI

" Show last command.
set showcmd

" Highlight cursor line.
set cursorline

" Ruler (line, column and % at the right bottom).
set ruler

" Display line numbers if terminal is wide enough.
if &amp;co &gt; 80
  set number
endif

" Soft word wrap.
set linebreak

" Prettier display of long lines of text.
set display+=lastline

" Always show statusline.
set laststatus=2

" =&gt; Movement and search -------------------------------------------------- {{{1

" Ignore case when searching.
set ignorecase
set smartcase

" Fast split navigation.
nnoremap &lt;C-j&gt; &lt;C-W&gt;&lt;C-J&gt;
nnoremap &lt;C-k&gt; &lt;C-W&gt;&lt;C-K&gt;
nnoremap &lt;C-l&gt; &lt;C-W&gt;&lt;C-L&gt;
nnoremap &lt;C-h&gt; &lt;C-W&gt;&lt;C-H&gt;

" Absolute movement for word-wrapped lines.
nnoremap j gj
nnoremap k gk

" =&gt; Misc ----------------------------------------------------------------- {{{1

" Use Unix as the standart file type.
set ffs=unix,dos,mac

" Ignore compiled files.
set wildignore=*.o,*~,*.pyc,*.pyo

" Ignore virtualenv directory.
set wildignore+=env

" Fold using {{{n, where n is fold level
set foldmethod=marker

" =&gt; Fixes and hacks ------------------------------------------------------ {{{1

" Ignore mouse (in GVIM).
set mouse=c

" Fix backspace behavior in GVIM.
set bs=2

" NERDTree arrows in Windows.
if has("win32") || has("win64") || has("win32unix")
  let g:NERDTreeDirArrows = 0
endif

" Increase lower status bar height in diff mode.
if &amp;diff
  set cmdheight=2
endif

" Unfold all files by default.
au BufRead * normal zR
</code></pre>

<p>I have some custom commands and shortcuts I&rsquo;m using, but not too many. I find that I mostly just forget to use shortcuts I make, and I end up deleting lines from this section regularly.</p>

<pre><code>" =&gt; Custom commands ------------------------------------------------------ {{{1

" Trim trailing whitespace in the file.
command TrimWhitespace %s/\s\+$//e

" Command to close current buffer without closing the window.
command Bd :bp | :sp | :bn | :bd

" =&gt; Leader shortcuts ----------------------------------------------------- {{{1

nnoremap &lt;Leader&gt;] &lt;C-]&gt;          " Jump to ctags tag definition.
nnoremap &lt;Leader&gt;p :CtrlP&lt;cr&gt;     " Fuzzy complete for files.
nnoremap &lt;Leader&gt;t :CtrlPTag&lt;cr&gt;  " Fuzzy complete for tags.
nnoremap &lt;Leader&gt;r :redraw!&lt;cr&gt;   " Redraw the screen (for visual glitches).
nnoremap &lt;Leader&gt;w :w&lt;cr&gt;         " Write a file.
</code></pre>

<p>Hope you find this useful and take away a few bits and pieces for your own workflow.</p>

<p></p>
]]></content>
  </entry>
  
</feed>
