<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | Ruslan Osipov]]></title>
  <link href="http://www.rosipov.com/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://www.rosipov.com/"/>
  <updated>2018-02-21T18:36:29+00:00</updated>
  <id>http://www.rosipov.com/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My .vimrc, Annotated]]></title>
    <link href="http://www.rosipov.com/blog/my-vimrc-annotated/"/>
    <updated>2018-02-21T15:00:00+00:00</updated>
    <id>http://www.rosipov.com/blog/my-vimrc-annotated</id>
    <content type="html"><![CDATA[<p></p>

<p>I&rsquo;ve been using Vim for anywhere between 5 and 10 years, and my <code>.vimrc</code> is all grown up.  I use  <code>{{{1</code> to annotate folds in my <code>.vimrc</code>, and use <code>zM</code> to close all folds and <code>zR</code> to open all folds (<code>zc</code>, <code>zo</code>, and <code>za</code> respectively close, open, and toggle individual folds). The <code>---</code> lines are simply cosmetic.</p>

<pre><code>" =&gt; Pre-load ------------------------------------------------------------- {{{1

set nocompatible  " Required for many plugins, ensures it's not compatible with 
                  " Vi, which nobody uses at this point.
filetype plugin indent on  " Great answer: https://vi.stackexchange.com/a/10125
</code></pre>

<p><a href="https://github.com/VundleVim/Vundle.vim">Vundle</a> is downright fantastic plugin manager. It allows one to install plugins with <code>:PluginInstall</code> and upgrade plugins with <code>:PluginUpdate</code>. Simple, easy, reliable. Of course you&rsquo;ll need to <a href="https://github.com/VundleVim/Vundle.vim#quick-start">have Vundle installed</a>, which I normally have as a git submodule.</p>

<pre><code>" Required Vundle setup.
set runtimepath+=~/.vim/bundle/vundle
set runtimepath+=$GOROOT/misc/vim
call vundle#rc()

" =&gt; Vundle plugins ------------------------------------------------------- {{{1

Plugin 'gmarik/vundle' " The Vundle itself, to keep itself updated.

" Colorschemes:
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'ajh17/Spacegray.vim.git'
Plugin 'altercation/vim-colors-solarized'
Plugin 'squarefrog/tomorrow-night.vim'
Plugin 'vim-scripts/ScrollColors'  " Allows scrolling through colorschemes.

" Language/tool integration and support:
Plugin 'burnettk/vim-angular'
Plugin 'fatih/vim-go'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'mileszs/ack.vim'
Plugin 'motemen/git-vim'
Plugin 'nvie/vim-flake8'
Plugin 'pangloss/vim-javascript'
Plugin 'scrooloose/syntastic.git'  " Syntax checker.
Plugin 'tpope/vim-fugitive.git'    " Even better Git support.

" Quality of life:
Plugin 'EinfachToll/DidYouMean'    " For typos during opening files.
Plugin 'ciaranm/detectindent'      " Automatically detect indent.
Plugin 'ervandew/supertab'         " Smarter autocompletion.
Plugin 'junegunn/goyo.vim'         " A plugin for writing prose.
Plugin 'majutsushi/tagbar'         " List tags in a sidebar.
Plugin 'scrooloose/nerdtree'       " A directory tree in a sidebar.
Plugin 'tomtom/tcomment_vim'       " Easy comment blocks with &lt;Leader&gt;cc.
Plugin 'tpope/vim-abolish'         " Extended abbreviation/substition.
Plugin 'tpope/vim-repeat'          " Intelligent repeat with '.'
Plugin 'tpope/vim-surround'        " Work with pairs of quotes/anything.
Plugin 'tpope/vim-unimpaired.git'  " Handy bracket mappings.
Plugin 'tpope/vim-vinegar'         " Enhanced directory browser.
Plugin 'vim-scripts/DirDiff.vim'   " Directory level diff.

" New features:
Plugin 'Lokaltog/vim-easymotion'   " Easy navigation with &lt;Leader&gt;&lt;Leader&gt;w.
Plugin 'kien/ctrlp.vim'            " Hit &lt;C&gt;p for a list of files/buffers.
Plugin 'vim-scripts/Gundo.git'     " Intelligent undo tree.
Plugin 'vim-scripts/vimwiki'       " A personal local Wiki.

if v:version &gt; 703
  Plugin 'SirVer/ultisnips'        " Intricate snippets.
  Plugin 'chrisbra/vim-diff-enhanced'
endif

" =&gt; Plugins configuration ------------------------------------------------ {{{1

" NERDTree: auto close if last window.
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" Force Gundo preview to the bottom.
let g:gundo_preview_bottom = 1

" Map Gundo.
nnoremap &lt;F5&gt; :GundoToggle&lt;cr&gt;

" DetectIndent: Enable and configure.
augroup detectindent
  autocmd!
  autocmd BufReadPost * :DetectIndent
augroup END
let g:detectindent_preferred_expandtab = 1
let g:detectindent_preferred_indent = 2

" UltiSnips: Compatibility with YouCompleteMe via SuperTab.
let g:ycm_key_list_select_completion = ['&lt;C-n&gt;', '&lt;Down&gt;']
let g:ycm_key_list_previous_completion = ['&lt;C-p&gt;', '&lt;Up&gt;']
let g:SuperTabDefaultCompletionType = '&lt;C-n&gt;'
let g:UltiSnipsExpandTrigger = "&lt;tab&gt;"
let g:UltiSnipsJumpForwardTrigger = "&lt;tab&gt;"
let g:UltiSnipsJumpBackwardTrigger = "&lt;s-tab&gt;"

" VimWiki: default location.
let g:vimwiki_list = [{
  \ 'path': '$HOME/Dropbox/wiki',
  \ 'template_path': '$HOME/Dropbox/wiki/templates',
  \ 'template_default': 'default',
  \ 'template_ext': '.html'}]

" Map Tagbar.
nnoremap &lt;F8&gt; :TagbarToggle&lt;cr&gt;

" Synastic configuration.
let g:syntastic_always_populate_loc_list = 1  " Make :lnext work.
let g:syntastic_html_checkers = ['']
let g:syntastic_javascript_checkers = ['gjslint', 'jshint']
let g:syntastic_javascript_gjslint_args = '--strict'
let g:syntastic_python_checkers = ['gpylint']
</code></pre>

<p>Most plugins above change slightly change daily Vim workflow: the way one navigates files, replaying actions, working with snippets, minor tweaks to editing - and I highly recommend at least skimming through README of plugins you&rsquo;re interested in so you can incorporate the changes in your workflow.</p>

<p>I have a set of simple defaults I use everywhere, major changes being changing <code>:</code> to <code>;</code> and moving my leader key to a spacebar. Everything else are tiny quality of life tweaks.</p>

<pre><code>" =&gt; Editing -------------------------------------------------------------- {{{1

syntax on

" Indentation settings.
set autoindent
set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4

" Disable backups and .swp files.
set nobackup
set noswapfile
set nowritebackup

" Semicolon is too long to type.
nnoremap ; :
vnoremap ; :

" Map leader key.
let mapleader = "\&lt;Space&gt;"

" Use system clipboard.
set clipboard=unnamedplus

" Enable wild menu (tab command autocompletion).
set wildmenu
set wildmode=list:longest,full

" Don't complain about unsaved files when switching buffers.
set hidden

" Make soft line breaks much better looking.
if v:version &gt; 703
  set breakindent
endif

" Pretty soft break character.
let &amp;showbreak='â†³ '

" =&gt; Looks ---------------------------------------------------------------- {{{1

set background=dark
colorscheme spacegray

" Set terminal window title and set it back on exit.
set title
let &amp;titleold = getcwd()

" Shorten press ENTER to continue messages.
set shortmess=atI

" Show last command.
set showcmd

" Highlight cursor line.
set cursorline

" Ruler (line, column and % at the right bottom).
set ruler

" Display line numbers if terminal is wide enough.
if &amp;co &gt; 80
  set number
endif

" Soft word wrap.
set linebreak

" Prettier display of long lines of text.
set display+=lastline

" Always show statusline.
set laststatus=2

" =&gt; Movement and search -------------------------------------------------- {{{1

" Ignore case when searching.
set ignorecase
set smartcase

" Fast split navigation.
nnoremap &lt;C-j&gt; &lt;C-W&gt;&lt;C-J&gt;
nnoremap &lt;C-k&gt; &lt;C-W&gt;&lt;C-K&gt;
nnoremap &lt;C-l&gt; &lt;C-W&gt;&lt;C-L&gt;
nnoremap &lt;C-h&gt; &lt;C-W&gt;&lt;C-H&gt;

" Absolute movement for word-wrapped lines.
nnoremap j gj
nnoremap k gk

" =&gt; Misc ----------------------------------------------------------------- {{{1

" Use Unix as the standart file type.
set ffs=unix,dos,mac

" Ignore compiled files.
set wildignore=*.o,*~,*.pyc,*.pyo

" Ignore virtualenv directory.
set wildignore+=env

" Fold using {{{n, where n is fold level
set foldmethod=marker

" =&gt; Fixes and hacks ------------------------------------------------------ {{{1

" Ignore mouse (in GVIM).
set mouse=c

" Fix backspace behavior in GVIM.
set bs=2

" NERDTree arrows in Windows.
if has("win32") || has("win64") || has("win32unix")
  let g:NERDTreeDirArrows = 0
endif

" Increase lower status bar height in diff mode.
if &amp;diff
  set cmdheight=2
endif

" Unfold all files by default.
au BufRead * normal zR
</code></pre>

<p>I have some custom commands and shortcuts I&rsquo;m using, but not too many. I find that I mostly just forget to use shortcuts I make, and I end up deleting lines from this section regularly.</p>

<pre><code>" =&gt; Custom commands ------------------------------------------------------ {{{1

" Trim trailing whitespace in the file.
command TrimWhitespace %s/\s\+$//e

" Command to close current buffer without closing the window.
command Bd :bp | :sp | :bn | :bd

" =&gt; Leader shortcuts ----------------------------------------------------- {{{1

nnoremap &lt;Leader&gt;] &lt;C-]&gt;          " Jump to ctags tag definition.
nnoremap &lt;Leader&gt;p :CtrlP&lt;cr&gt;     " Fuzzy complete for files.
nnoremap &lt;Leader&gt;t :CtrlPTag&lt;cr&gt;  " Fuzzy complete for tags.
nnoremap &lt;Leader&gt;r :redraw!&lt;cr&gt;   " Redraw the screen (for visual glitches).
nnoremap &lt;Leader&gt;w :w&lt;cr&gt;         " Write a file.
</code></pre>

<p>Hope you find this useful and take away a few bits and pieces for your own workflow.</p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DidYouMean plugin for Vim]]></title>
    <link href="http://www.rosipov.com/blog/didyoumean-plugin-for-vim/"/>
    <updated>2015-06-10T20:02:00+00:00</updated>
    <id>http://www.rosipov.com/blog/didyoumean-plugin-for-vim</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/EinfachToll/DidYouMean">DidYouMean</a> Vim plugin is very simple: it asks you if the file you are
trying to open is indeed the right file. How is this useful? Here&rsquo;s how:</p>

<p><img src="/images/posts/vim-plugin-didyoumean.png" title="DidYouMean plugin in action." ></p>

<p>Say you have two files with a similarly starting names: <code>model.py</code> and
<code>model_test.py</code>. You type <code>vim mo</code>, you hit tab to autocomplete the name, you
hit enter. In vanilla Vim, you&rsquo;d be opening a new file: <code>model</code>, since that&rsquo;s
where shell&rsquo;s tab-completion stopped. DidYouMean detects such a nuance and asks
you if you wanted to open <code>model</code>, <code>model.py</code>, or <code>model_test.py</code>.</p>

<p>Simple idea, and instantly after trying this out, I would really expect this
feature to be included in vanilla Vim.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gundo tree for Vim]]></title>
    <link href="http://www.rosipov.com/blog/gundo-tree-for-vim/"/>
    <updated>2015-06-07T20:10:15+00:00</updated>
    <id>http://www.rosipov.com/blog/gundo-tree-for-vim</id>
    <content type="html"><![CDATA[<p>One of the obscure, but tremendously useful features of Vim is an undo tree.
You would expect Vim to have a simple stack for undo and redo actions, but it&rsquo;s
much more complex than that: Vim keeps track of every change you made in the
current session, making it possible to access change history beyond basic <code>u</code>
and <code>C-r</code> commands.</p>

<p>Default interface for accessing far out branches of the undo tree leaves to be
desired, but that&rsquo;s where <a href="http://sjl.bitbucket.org/gundo.vim/">Gundo</a> comes in.</p>

<p><img src="/images/posts/vim-gundo-tree.png" title="Gundo tree in Vim." ></p>

<p>Gundo provides an easy to use interface for navigating history branches. In the
screenshot above, I am previewing a diff in one of the undo tree branches
inaccessible via <code>u</code> command.</p>

<p>As per author&rsquo;s recommendation, I mapped the plugin to <code>F5</code>, which seems quite
convenient to me:</p>

<pre><code>nnoremap &lt;F5&gt; :GundoToggle&lt;CR&gt;
</code></pre>

<p>Usage is quite easy. <code>F5</code> opens or closes the undo tree, <code>j</code> and <code>k</code> are used
to travel through changes. Enter key applies the changes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My experience switching to buffers]]></title>
    <link href="http://www.rosipov.com/blog/my-experience-switching-to-buffers/"/>
    <updated>2015-06-01T13:28:42+00:00</updated>
    <id>http://www.rosipov.com/blog/my-experience-switching-to-buffers</id>
    <content type="html"><![CDATA[<p>About a year ago I stumbled upon an article explaining the difference between
Vim tabs and buffers. The author emphasized that tabs are merely window
layouts, and therefore one-file-per-tab idea I was used to at the moment just
wasn&rsquo;t proper. Instead, author suggested the use of buffer commands to switch
between multiple files. I decided to give it a shot, and here are some ideas I
would like to share after switching to the use of buffers.</p>

<p>Buffers are open files (they also may not be associated with any files), but
they&rsquo;re not necessarily visible at any given moment. In Vim, windows are not
linked to any particular buffer, so you can easily cycle through buffers from
within any window.</p>

<p>First and foremost, you probably want to add <code>set hidden</code> to your <code>.vimrc</code>.
This option lets you switch between buffers without having to save files.</p>

<p>At it&rsquo;s basics, you only need few commands for operating buffers:</p>

<ul>
<li>Use <code>:ls</code> to list all buffers for this session.</li>
<li>To move between next and previous buffers use <code>:bn</code> and <code>:bp</code> respectively.</li>
<li>Use <code>:b partial_buffer_name</code> for navigating to the buffer of your choice.
Buffer name auto-complete is supported.</li>
<li>You can also use <code>:bN</code>, where <code>N</code> is a buffer number to jump to a specific
buffer.</li>
<li>Get in a habit of closing buffers you will not use with <code>:bd</code>.</li>
</ul>


<p><img src="/images/posts/vim-list-buffers.png" title="A list of open buffers in Vim." ></p>

<p>The hardest thing about stopping to use tabs and switching to buffers instead
is not having the visual aid: I was used to having a list of files always
available at a glance, at the top of my screen. To check what files I&rsquo;m working
on now - I have to hit four keys: <code>:ls</code> (fourth being &ldquo;Enter&rdquo;).</p>

<p>Not surprisingly, this taught me to be more mindful about my editing
experience. I usually have a clear structure of the files I&rsquo;m working on in my
head. And if the list is getting to long to easily remember, then I&rsquo;m probably
doing something wrong: time to take a break and reset my Vim session.</p>

<p>The experience overall reminded me of my recent switch to blank keyboard key
caps: with no inscriptions to aid you, I first felt a bit at loss, especially
with they keys I couldn&rsquo;t find without looking: like function keys or special
symbols. But after some time with the blank key caps, I improved my typing
skill, and know where even the most obscure characters hide. The switch helped
me to improve my typing experience overall.</p>

<p>With Vim, it&rsquo;s a similar story. After getting past the initial confusion, I
achieved high level of awareness about my editing sessions. It didn&rsquo;t make the
editing process any faster, but instead much more satisfying.</p>

<p>But you already new that, since Vim isn&rsquo;t really about speed.</p>

<p>UPDATE: Made a few corrections and added a <code>:b partial_buffer_name</code> command
thanks to <a href="http://www.reddit.com/user/___violet___">/u/___violet___</a>&rsquo;s <a href="http://www.reddit.com/r/vim/comments/382v6q/my_experience_switching_to_buffers/crrunni">Reddit comment</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom templates in vimwiki]]></title>
    <link href="http://www.rosipov.com/blog/custom-templates-in-vimwiki/"/>
    <updated>2015-02-05T18:40:33+00:00</updated>
    <id>http://www.rosipov.com/blog/custom-templates-in-vimwiki</id>
    <content type="html"><![CDATA[<p>I got myself into a habit of using vimwiki for the past year: it helps me to
keep track of random bits of information, work and project notes, as well as
daily goals and achievements. You can read more about vimwiki in an article I
wrote a while back: &ldquo;<a href="http://www.rosipov.com/blog/personal-wiki-with-vimwiki/">Personal wiki with vimwiki</a>&rdquo;.</p>

<p><img src="/images/posts/vimwiki-workflow-habits.png" title="HTML page generated by vimwiki with a custom navigation bar." ></p>

<p>One of vimwiki&rsquo;s features I really like is an ability to convert whole wiki to
HTML with a single command: <code>:VimwikiAll2HTML</code>. There is one annoyance though:
HTML vimwiki pages don&rsquo;t have any navigation elements: the only way to navigate
between pages is by clicking through links within a page or using browser&rsquo;s
&ldquo;back&rdquo; button.</p>

<p>Luckily, vimwiki has a setting which allows using custom templates for
generating HTML. Assuming your wiki is in <code>$HOME/Dropbox/wiki</code> (can be anywhere
else though), make following changes to your <code>.vimrc</code>:</p>

<pre><code>let g:vimwiki_list = [{
  \ 'path': '$HOME/Dropbox/wiki',
  \ 'template_path': '$HOME/Dropbox/wiki/templates',
  \ 'template_default': 'default',
  \ 'template_ext': '.html'}]
</code></pre>

<p>After that, create a <code>$HOME/Dropbox/wiki/templates/default.html</code> using
<code>vimwiki/autoload/vimwiki/default.tpl</code> as a base. I added simple navigation bar
to my default template:</p>

<pre><code>&lt;html&gt;
&lt;head&gt;
    &lt;link rel="Stylesheet" type="text/css" href="%root_path%style.css" /&gt;
    &lt;title&gt;%title%&lt;/title&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;a href="%root_path%index.html"&gt;Index&lt;/a&gt; |
    &lt;a href="%root_path%diary/diary.html"&gt;Diary&lt;/a&gt;
    &lt;hr&gt;
    &lt;div class="content"&gt;
    %content%
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Now it&rsquo;s much easier to jump between wiki entries. Of course, customization
doesn&rsquo;t end there: you can change styles, add JavaScript and make your wiki all
fancy and advanced.</p>
]]></content>
  </entry>
  
</feed>
