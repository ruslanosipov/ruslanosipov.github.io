<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Ruslan Osipov]]></title>
  <link href="http://www.rosipov.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://www.rosipov.com/"/>
  <updated>2018-12-27T19:42:25+00:00</updated>
  <id>http://www.rosipov.com/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making a packing spreadsheet]]></title>
    <link href="http://www.rosipov.com/blog/making-a-packing-spreadsheet/"/>
    <updated>2018-03-26T00:00:00+00:00</updated>
    <id>http://www.rosipov.com/blog/making-a-packing-spreadsheet</id>
    <content type="html"><![CDATA[<p>Being the unique person I am, I love traveling. Oftentimes I end up getting deep into trying to optimize my packing methods. There are dozens of tools online designed to help with this exact thing (services like <a href="http://lighterpack.com">Lighterpack</a> or <a href="http://geargrams.com">GearGrams</a>). But, being handy with code, I decided to dabble in the subject on my own.</p>

<p>One of the most important things in packing is the overall weight of the pack, and I always want to know what type of things are the heaviest. I also want to be able to run random queries on my data, whatever it is that I&rsquo;m trying to learn. I want to have an inventory of items (backpacks, clothes, storage solutions) which I can plug in and out of a spreadsheet to see how the resulting picture changes on the go. Working with software as my day job, I’d also like for the solution to be automated whenever possible.</p>

<p>Google Spreadsheets turned out to be the perfect solution, providing the ability to quickly sum up the weight of my things and output insights about the data.</p>

<h2>Final Result</h2>

<p>Here&rsquo;s a <a href="https://docs.google.com/spreadsheets/d/1qDhMoVmmTroM-eN0MZIU2PzE5YucsyPhbuPZPDGhemM/edit#">link to the spreadsheet</a>, I encourage the reader to copy and play around with in anyway you see fit.</p>

<p>Here’s the final result for a multi-day trip I will have for this year. As you can see, my pack weighs around 3 kilograms or a bit over 6 freedom units (not including water). My recently purchased Nintendo Switch is the heaviest item (and it’s worth every gram as it makes flying tolerable), but clothes take up most of the weight:</p>

<p><img src="/images/posts/packing-spreadsheet.png" title="A screenshot of a packing spreadsheet." ></p>

<p>I use indentation levels to show that some items are contained within other items. This also lets me calculate the absolute and relative weights of a whole container with everything inside of it (see fields labeled “Container” and “Percentage”).</p>

<p>The “Weight” and the “Breakdown” fields indicate absolute and relative item weight respectively, which accounts for quantity of the item (quantity defaults to 1 if not explicitly set). Weight-related fields are color coded from lightest items in green to heaviest items in red.</p>

<p>Categories are used to group items and execute queries on the data and learn insights like these:</p>

<p><img src="/images/posts/packing-spreadsheet-weight-chart.png" title="A chart representing the weight of each category of items relative to a weight of the whole pack." ></p>

<p>There’s a separate sheet where I enter item names, categories, and weights, which I then use to automatically populate values above and autofill item names in the primary sheet:</p>

<p><img src="/images/posts/packing-spreadsheet-inventory.png" title="A screenshot of an inventory tab of the packing spreadsheet." ></p>

<h2>The Technical Details</h2>

<p>I haven’t worked with Google Spreadsheets (or Excel for that matter) a lot in the past, but with an access to clear documentation (and a hundred of web searches later) it was straightforward to get the hang of the it.</p>

<p>I started off by manually populating the final result sheet, manually adjusting formulas for Container/Percentage cells, as I had no idea how I would detect the indentation yet. I like when things look pretty, so I applied conditional formatting rules right away, and the looks of the sheet really haven’t changed throughout the process.</p>

<p>Next, I created an inventory sheet, which I wanted to use as a source of data in the resulting sheet. A few Google searches and some trial &amp; error resulted in a lookup formula:</p>

<pre><code>=ArrayFormula(
 IF(
   NOT(ISBLANK($B2)),
   INDEX(InventoryCategories, MATCH($B2, InventoryItems, 0)),
   IF(
     NOT(ISBLANK($C2)),
     INDEX(InventoryCategories, MATCH($C2, InventoryItems, 0)),
     INDEX(InventoryCategories, MATCH($D2, InventoryItems, 0))
   )
  )
)
</code></pre>

<p><code>ArrayFormula</code> is necessary in order to create arrays on the fly without printing intermediate results in the spreadsheet. <code>InventoryItems</code> and <code>InventoryCategories</code> are named ranges referring to item names and categories in the inventory sheet. <code>MATCH</code> finds an index of a first occurrence of the item name in the sheet, and retrieves corresponding category name. An item weight is retrieved by the exact same principle.</p>

<p>Trying to find the container weight took a lot more time, and resulted in a lot more headache. Solution for handling indentation in Google Spreadsheets wasn’t as elegant as I would have hoped for, but it got the job done:</p>

<pre><code>=ArrayFormula(
     SUM(
       $I2:INDIRECT(
         CONCATENATE(
           "$I",
           ROW() + IF(
             NOT(ISBLANK($B2)),
             MATCH(FALSE, ISBLANK($B3:$B), 0),
             MATCH(FALSE, ISBLANK($C3:$C), 0)
           ) - 1
         )
       )
     )
</code></pre>

<p>The formula above finds the first non-empty cell in a column. It starts searching from the next row (for example, for an item on a second row, we look at the third row and below). After it knows which row first non-empty cell is in, the formula turns it into a string (column $I contains item weights) and use it as an upper bound of a sum of the weights. Finished formula is a bit longer (it adds sugar to only display the number when needed), and if you’re interested - you can look it up in the spreadsheet.</p>

<p><img src="/images/posts/packing-spreadsheet-indentation.png" title="A screenshot used for explaining indentation logic." ></p>

<p>For example, in the screenshot above, the formula will start looking at cells in a column right after the &ldquo;Packing cube&rdquo;. As soon as it finds a non-empty cell (&ldquo;Nintendo Switch case&rdquo;), the formula will determine this row to be an upper boundary. The formula then will sum weights starting with a &ldquo;Packing cube&rdquo; row, and up to but not including &ldquo;Nintendo Switch case&rdquo; row.</p>

<p>The rest involved many small tweaks, adding pretty colors, hiding N/A errors and zeroes, and trying to find the perfect shade for column borders.</p>

<p>And, since you made it this far, here’s how the numbers above look in the real world:</p>

<p><img src="/images/posts/cleveland-trip-backpack-on-off.png" title="Side by side pictures of a packed backpack: open and closed." ></p>

<p>Hopefully you found this useful, or at least somewhat entertaining. There’s a lot of room for improvement, and I aimed to provide a framework and a few basic ideas for building a spreadsheet to accommodate one’s twisted ultralight needs.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Octorpress publishing]]></title>
    <link href="http://www.rosipov.com/blog/automating-octopress-publishing/"/>
    <updated>2017-11-14T15:00:00+00:00</updated>
    <id>http://www.rosipov.com/blog/automating-octopress-publishing</id>
    <content type="html"><![CDATA[<p>I really like Octopress. It builds on top of Jekyll to address certain rough edges, and provides ready to go lighting fast blogging platform. It&rsquo;s easily extendible if you know how to code (thanks to a rather clean and well organized code base), and posts are just plain Markdown files.</p>

<p>One issue though - I need to be near a computer to publish and preview the article. This becomes difficult if I&rsquo;m traveling with, say, a tablet.</p>

<p>I have a low end AWS Lightsail instance I use for writing and publishing, but it&rsquo;s not always fun to write when SSHing into a server, and I often write offline - making it even more difficult to move files between where I write and where I publish. And managing images is a nightmare. To resolve this, I set up a few directories I use in Dropbox, and wrote a few scripts to move things around when needed.</p>

<p>Here&rsquo;s a directory structure in Dropbox:</p>

<pre><code>- blog/
  - posts/
    - 2017-11-20-automatic-octopress-publishing.markdown
  - img/
    - input/
      - a-picture-of-a-flower.jpg
    - output/
</code></pre>

<p>I put Markdown files in <code>Dropbox/blog/posts/</code> (and numerous offline editors sync with Dropbox - I&rsquo;m writing this with <a href="https://stackedit.io/app">StackEdit</a>, and I use <a href="https://ia.net/writer/">iA Writer</a> on my tablet). I add my images to <code>Dropbox/img/input/</code>. I  tend to strip metadata from my images and resize them to fit the maximum page width (I don&rsquo;t really care for high resolution pictures, speed is preferred over ability to zoom into a picture). For this, two tools are needed:</p>

<pre><code>sudo apt-get install imagemagick exiftool
</code></pre>

<p>When I&rsquo;m done writing or want to preview an article, I SSH into my AWS Lightsail instance and run <code>sync.sh</code>, a small script which moves posts to a proper directory, processes images and places them in the desired location, as well as starts Octopress instance (this way I can preview my blog on the AWS Lightsail instance). Contents of <code>sync.sh</code> (don&rsquo;t forget to <code>chmod +x</code>):</p>

<pre><code>#!/bin/bash
cd $HOME/Dropbox/blog/img/input
mogrify -resize 832x620 -quality 100 -path $HOME/Dropbox/blog/img/output *.jpg
exiftool -all= $HOME/Dropbox/blog/img/output/*.jpg
cp $HOME/Dropbox/blog/posts/*.markdown $HOME/blog/source/_posts
cp $HOME/Dropbox/blog/img/output/*.jpg $HOME/blog/source/images/posts
cd $HOME/blog
rake generate
rake preview
</code></pre>

<p>I run the above script every time I want to preview the site. I&rsquo;m sure it&rsquo;s easy to set up a daemon to watch for changes in the Dropbox folders, but I don&rsquo;t see the need for that yet. Also, I just statically resize images to a particular resolution (832x620) since all of the pictures I upload have the same aspect ratio, I&rsquo;m sure there&rsquo;s a way to calculate that number on the fly for this script to work with different aspect ratios.</p>

<p>Lastly, when I deployed and committed my changes (still commit and deploy manually out of a habit), I run <code>archive.sh</code>:</p>

<pre><code>#!/bin/bash
mv $HOME/Dropbox/blog/posts/*.markdown $HOME/Dropbox/blog/published
rm $HOME/Dropbox/blog/img/input/*
rm $HOME/Dropbox/blog/img/output/*
</code></pre>

<p>It&rsquo;s not much, but enough to save some manual labor involved in publishing to Octopress.</p>

<!--stackedit_data:
eyJoaXN0b3J5IjpbMTY3OTE1ODIzNl19
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mob level distribution]]></title>
    <link href="http://www.rosipov.com/blog/mob-level-distribution/"/>
    <updated>2016-10-02T00:15:12+00:00</updated>
    <id>http://www.rosipov.com/blog/mob-level-distribution</id>
    <content type="html"><![CDATA[<p>Distributing mobs in a dungeon based on player&rsquo;s level (or some dungeon level
difficulty factor) was somewhat straightforward, but I would still like to
document the progress. I needed to place a mob that&rsquo;s somewhat within the
difficulty level I want, plus minus a few difficulty levels to spice it up.</p>

<p><img src="/images/posts/roguelike-leveled-mob-distribution.png" title="Random mob distribution in roguelike dungeon." ></p>

<p>Above you can see three rats, three cats, a dog (<code>r</code>, <code>c</code>, <code>d</code>, all level 1), a
farmer (<code>f</code>, level 2), and a lonely bandit (<code>b</code>, level 3) in a level 1 dungeon.</p>

<p>Without going straight into measure theory, I generated intervals for each mob
based on the diff of desired level and their level, and then randomly selected a
point within the boundaries. Here&rsquo;s the abstract code:</p>

<pre><code>import bisect
import random


def get_random_element(data, target, chance):
    """Get random element from data set skewing towards target.

    Args:
        data   -- A dictionary with keys as elements and values as weights.
                  Duplicates are allowed.
        target -- Target weight, results will be skewed towards target
                  weight.
        chance -- A float 0..1, a factor by which chance of picking adjacent
                  elements decreases (i.e, with chance 0 we will always
                  select target element, with chance 0.5 probability of
                  selecting elements adjacent to target are halved with each
                  step).

    Returns:
        A random key from data with distribution respective of the target
        weight.
    """
    intervals = []  # We insert in order, no overlaps.
    next_i = 0
    for element, v in data.iteritems():
        d = max(target, v) - min(target, v)
        size = 100
        while d &gt; 0:  # Decrease chunk size for each step of `d`.
            size *= chance
            d -= 1
        if size == 0:
            continue
        size = int(size)
        intervals.append((next_i, next_i + size, element))
        next_i += size + 1
    fst, _, _ = zip(*intervals)
    rnd = random.randint(0, next_i - 1)
    idx = bisect.bisect(fst, rnd)  # This part is O(log n).
    return intervals[idx - 1][2]
</code></pre>

<p>Now, if I test the above for, say, a 1000000 iterations, with a chance of 0.5
(halving probability of selecting adjacent elements with each step), and 2 as a
target, here&rsquo;s the distribution I end up with:</p>

<pre><code>target, chance, iterations = 2, 0.5, 1000000

data = collections.OrderedDict([  # Ordered to make histogram prettier.
    ('A', 0), ('B-0', 1), ('B-1', 1), ('C', 2), ('D', 3), ('E', 4),
    ('F', 5), ('G', 6), ('H', 7), ('I', 8), ('J', 9),
])

res = collections.OrderedDict([(k, 0) for k, _ in data.iteritems()])

# This is just a test, so there's no need to optimize this for now.
for _ in xrange(iterations):
    res[get_random_element(data, target, chance)] += 1

pyplot.bar(
    range(len(res)), res.values(), width=0.7, align='center', color='green')
pyplot.xticks(range(len(res)), res.keys())
pyplot.title(
    'iterations={}, target={}, chance={}'.format(
        iterations, target, chance))
pyplot.show()
</code></pre>

<p><img src="/images/posts/roguelike-mob-distribution-chance-05.png" title="Distribution histogram: 1000000 iterations, 0.5 chance, and 2 as a target." ></p>

<p>You can see elements B-0 and B-1 having roughly the same distribution, since
they have the same weight.</p>

<p>Now, if I decrease the <code>chance</code>, likelihood of target being selected increases,
while likelihood of surrounding elements being selected decreases:</p>

<p><img src="/images/posts/roguelike-mob-distribution-chance-033.png" title="Distribution histogram: 1000000 iterations, 0.33 chance, and 2 as a target." ></p>

<p>I works the opposite way as well, increasing the <code>chance</code> decreases likelihood
of the target being selected and increases the probability for surrounding
elements.</p>

<p><img src="/images/posts/roguelike-mob-distribution-chance-09.png" title="Distribution histogram: 1000000 iterations, 0.9 chance, and 2 as a target." ></p>

<p>For the sake of completeness, it works with 0 chance of surrounding elements being picked:</p>

<p><img src="/images/posts/roguelike-mob-distribution-chance-0.png" title="Distribution histogram: 1000000 iterations, 0 chance, and 2 as a target." ></p>

<p>And an equal chance of picking surrounding elements:</p>

<p><img src="/images/posts/roguelike-mob-distribution-chance-1.png" title="Distribution histogram: 1000000 iterations, 1 chance, and 2 as a target." ></p>

<p>After playing around with the configuration in Jupyter Notebook, I cleaned up
the algorithm above and included it into mob placement routine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spawning evenly distributed mobs]]></title>
    <link href="http://www.rosipov.com/blog/spawning-evenly-distributed-mobs/"/>
    <updated>2016-09-30T18:06:16+00:00</updated>
    <id>http://www.rosipov.com/blog/spawning-evenly-distributed-mobs</id>
    <content type="html"><![CDATA[<p>After generating a few <a href="http://www.rosipov.com/blog/randomly-generated-dungeons/">good looking random dungeons</a>, I was puzzled with
randomly placing mobs on resulting maps. To make it fair (and fun) for the
player mobs should be evenly distributed.</p>

<p><img src="/images/posts/dungeon-mob-placement.png" title="Dungeon with randomly placed mobs." ></p>

<p>The obvious idea was to pick coordinates randomly within the rectangular map
boundaries, and then place mobs if they have floor underneath them. But this way
I lose control of the number of mobs and risk having a chance of not placing any
mobs at all. Plus, dungeons with bigger surface area would get more mobs - which
sounds somewhat realistic, but not entirely what I was aiming for.</p>

<p>I could improve on the above by rerunning enemy placement multiple times and
select the most favorable outcome - but the solution would be rather naive.</p>

<p>To have control over the number of mobs I decided to place them as I generate
the rooms of the dungeon. There&rsquo;s a trick one can use to get a random element
with equal probability distribution from a sequence of an unknown size:</p>

<pre><code>import random


def get_random_element(sequence):
    """Select a random element from a sequence of an unknown size."""
    selected = None
    for k, element in enumerate(sequence):
        if random.randint(0, k) == 0:
            selected = element
    return selected
</code></pre>

<p>With each iteration the chance of the current element to become a selected item
is 1 divided by number of elements seen so far. Indeed, a probability of an
element being selected out of a 4-item sequence:</p>

<pre><code>1 * (1 - 1/2) * (1 - 1/3) * (1 - 1/4) = 1/2 * 2/3 * 3/4 = 6/30 = 1/4 
</code></pre>

<p>Now all I had to do is to modify this to account for multiple mob placement.
Here&rsquo;s a generalized function above which accounts for selecting <code>n</code> elements
from the sequence with even distribution.</p>

<pre><code>import random


def get_random_element(sequence, n):
    """Select n random elements from a sequence of an unknown size."""
    selected = [None for _ in range(n)]
    for k, element in enumerate(sequence):
        for i in range(n):
            if random.randint(0, k) == 0:
                selected[i] = element
    return selected
</code></pre>

<p>I incorporated logic above into the room generation code, accounted for
duplicates, and ended up with decent distribution results.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Randomly generated dungeons]]></title>
    <link href="http://www.rosipov.com/blog/randomly-generated-dungeons/"/>
    <updated>2016-09-29T23:26:32+00:00</updated>
    <id>http://www.rosipov.com/blog/randomly-generated-dungeons</id>
    <content type="html"><![CDATA[<p>After playing with random dungeon generation for a bit, I seem to be satisfied
with the results:</p>

<p><img src="/images/posts/random-dungeon-1.png" title="A randomly generated ASCII-dungeon." ></p>

<p>The above is displayed using ADOM notation - <code>#</code> represents a wall, <code>.</code> is a
floor tile, and <code>+</code> is meant to be a closed door. After fiddling about with a
few random dungeon generation ideas, I settled with the following.</p>

<h2>The algorithm</h2>

<ol>
<li>Start with a random point on a canvas.</li>
<li>Create a room with random width and height. Don&rsquo;t worry about walls yet.</li>
<li>Select a few points on the sides of the room, put those in a stack. Save the
direction in which the potential doors would point.</li>
<li>Go through the stack, and try to add a room or a corridor (corridor is just a
room with a width or a height of 1). Higher chance of corridors seems to look
better and results in those wiggly passageways.

<ol>
<li>Try to add a room a few dozen times with different random configurations.
If no luck - give up and grab a new item from the stack. If couldn&rsquo;t
generate a continuation to the corridor - mark it as a loose end, we&rsquo;ll
clean those up later.</li>
<li>If a room was added successfully - add a door where it connects to the
previous room/corridor. Add a floor section if it&rsquo;s a corridor connecting
to another corridor.</li>
<li>At this point one ends up with quite a few interconnected corridors,
merged rooms, and all kinds of fun surroundings (my desired goal).</li>
</ol>
</li>
<li>Do the above until the stack is empty or a desired number of rooms has been
generated.</li>
<li>Clean up the loose ends from step 4.1. Remove loose corridor segments one by
one until intersection with another room/corridor is detected.</li>
<li>Add walls around the rooms and corridors, while also cleaning up any extra
doors we may have left behind when creating merged corridors or rooms.

<ol>
<li>I simply used slightly modified depth first search starting inside any
room and drawing walls wherever I could find floor/door not connected to
anything.</li>
<li>When encountering a door - check if it&rsquo;s surrounded by walls or doors from
the opposite sides. If not - remove the door and replace it with a floor
tile. If any doors were adjucent to the removed door - requeue the door
check on them.</li>
</ol>
</li>
<li>Perform steps 1-7 a few hundred times, saving the resulting dungeons each
time. Pick the best candidate with the most desired features - like a number
of rooms, breadth, square footage, longest corridors, etc.</li>
</ol>


<p>A more detailed explanation of the steps is below. For now, here are a few more
dungeons generated using this method:</p>

<p><img src="/images/posts/random-dungeon-2.png" title="A randomly generated ASCII-dungeon." ></p>

<p><img src="/images/posts/random-dungeon-3.png" title="A randomly generated ASCII-dungeon." ></p>

<p><img src="/images/posts/random-dungeon-4.png" title="A randomly generated ASCII-dungeon." ></p>

<p>I think dungeon generation is far more art than science, and I had a lot of fun
tweaking all the different input parameters:</p>

<ul>
<li>Room size boundaries.</li>
<li>Corridor lengths.</li>
<li>Frequency of corridor occurrences.</li>
<li>Number of exits from the room.</li>
<li>Number of room generation attempts.</li>
<li>Number of dungeon generation attempts.</li>
<li>Final dungeon picking heuristics.</li>
</ul>


<p>Last item on the list is the most interesting one - with few hundred dungeons as
an input, picking the right one is rather important. I ended up settling on
using max priority queue with a rough surface area of the dungeon as a key
(it&rsquo;s more of a breadth, really - how wide and tall it is). Then I&rsquo;d sift
through some top results and pick the one with the most rooms available. This
results in the most fun-looking map which feels up most of the screen, while
still usually not being too cluttered.</p>

<p>Here&rsquo;s a breakdown of a simple scenario:</p>

<h3>Steps 1 and 2</h3>

<p>Pick a random spot on a canvas and generate a room of random size (4 x 3):</p>

<pre><code>....
....
....
</code></pre>

<h3>Step 3</h3>

<p>Select potential spots for doors, let&rsquo;s label them 1, 2, 3.</p>

<pre><code>....2
....
....1
  3
</code></pre>

<p>I went for a uniform distribution by unfolding the rectangle and folding it back
in to get a proper coordinate on the perimeter. Now, stack contains coordinates
of <code>[1, 2, 3]</code> (along with the directions in which they are pointing).</p>

<h3>Steps 4 and 5</h3>

<p>Add a room or a corridor to a connector number 3. We&rsquo;ll be adding the room to
the right of number 3. Let&rsquo;s assume random sends a corridor of length 5 our way.
We&rsquo;re happy with the corridor pointing either up, down, or right - so we let the
random decide again: up.</p>

<pre><code>     4
     .
     .
....2.
.... .
....3.
  1
</code></pre>

<p>We add the end of the corridor to the stack as number 4 (now <code>[1, 2, 4]</code>). We
also mark 4 as a loose end, in case we end up not adding a room to it. Dangling
corridors are never pretty.</p>

<p>Now, to replace number 3 with a door:</p>

<pre><code>     4
     .
     .
....2.
.... .
....+.
  1
</code></pre>

<p>Adding another random corridor of length 2 to the point 4, pointing right.
Replace number 4 with a floor segment, since point 4 was the end of another
corridor. Remove point 4 from loose ends, add point 5.</p>

<pre><code>     ...5
     .
     .
....2.
.... .
....+.
  1
</code></pre>

<p>Take point 5, generate a room of size 3 x 6. 5 becomes a door. Loose ends list
is empty.</p>

<pre><code>     ...+...
     .   ...
     .   ...
....2.   ...
.... .   ...
....+.   ...
  1
</code></pre>

<p>For simplicity&rsquo;s sake, let&rsquo;s assume we don&rsquo;t want any more exits from this room.
Back to the stack of <code>[1, 2]</code>. Point 2 seem to not have much room for growth.
After a few unsuccessful attempts to place a room or a corridor there, we give
up:</p>

<pre><code>     ...+...
     .   ...
     .   ...
.... .   ...
.... .   ...
....+.   ...
  1
</code></pre>

<p>Now for point 1: we get another corridor of length 3. Point 6 is now added to
the loose ends list.</p>

<pre><code>     ...+...
     .   ...
     .   ...
.... .   ...
.... .   ...
....+.   ...
  +
  .
  .
  .
  6
</code></pre>

<p>Let&rsquo;s assume we run out of space and can&rsquo;t add anything to the end of 6. We&rsquo;re
done generating the dungeon. Our stack is empty, and our loose ends contains
coordinates of <code>6</code>.</p>

<h3>Step 6</h3>

<p>Start with the loose end, and remove items one by one until a tile with multiple
neighbors is encountered:</p>

<pre><code>     ...+...
     .   ...
     .   ...
.... .   ...
.... .   ...
....+.   ...
  X
  X
  X
  X
  X
</code></pre>

<p>Viola:</p>

<pre><code>     ...+...
     .   ...
     .   ...
.... .   ...
.... .   ...
....+.   ...
</code></pre>

<h3>Steps 7 and 8</h3>

<p>There are no rogue doors in this scenario, so all we need to do is add  the
walls:</p>

<pre><code>     #########
     #...+...#
     #.###...#
######.# #...#
#....#.# #...#
#....#.# #...#
#....+.# #...#
######## #####
</code></pre>

<p>All of the steps above should be repeated a few hundred times with different
dungeons, and then the best dungeon should be picked as a final one.</p>

<p>Did I miss anything? Was cleaning up &ldquo;loose ends&rdquo; too much of a hack? What
should have I done differently?</p>
]]></content>
  </entry>
  
</feed>
