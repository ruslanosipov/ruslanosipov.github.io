<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Ruslan Osipov]]></title>
  <link href="http://ruslanosipov.github.io/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://ruslanosipov.github.io/"/>
  <updated>2014-07-22T20:33:46-07:00</updated>
  <id>http://ruslanosipov.github.io/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Export WordPress posts to plain text]]></title>
    <link href="http://ruslanosipov.github.io/blog/export-wordpress-posts-to-plain-text/"/>
    <updated>2014-06-01T20:44:12-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/export-wordpress-posts-to-plain-text</id>
    <content type="html"><![CDATA[<p>I prefer to create and edit my posts in plain text. It&rsquo;s a timeless format, and I find it nice to have an archive of posts lying around in plain text.</p>

<p>I wrote a little Python script which I used to extract an archive of my posts and pages into a bunch of files on my computer. In order to use it, you need to use &ldquo;<a href="http://wordpress.org/plugins/wordpress-importer/">WordPress Importer</a>&rdquo; plugin. Export your posts and pages into a WXR format, and feed the file to the script.</p>

<p>Source code of the script is below (link for downloading the script is at the bottom of this post):</p>

<pre><code>#!/usr/bin/env python

"""This script converts WXR file to a number of plain text files.

WXR stands for "WordPress eXtended RSS", which basically is just a
regular XML file. This script extracts entries from the WXR file into
plain text files. Output format: article name prefixed by date for
posts, article name for pages.

Usage: wxr2txt.py filename [-o output_dir]
"""

import os
import re
import sys
from xml.etree import ElementTree

NAMESPACES = {
        'content': 'http://purl.org/rss/1.0/modules/content/',
        'wp': 'http://wordpress.org/export/1.2/',
}
USAGE_STRING = "Usage: wxr2txt.py filename [-o output_dir]"

def main(argv):
    filename, output_dir = _parse_and_validate_output(argv)
    try:
        data = ElementTree.parse(filename).getroot()
    except ElementTree.ParseError:
        _error("Invalid input file format. Can not parse the input.")
    page_counter, post_counter = 0, 0
    for post in data.find('channel').findall('item'):
        post_type = post.find('wp:post_type', namespaces=NAMESPACES).text
        if post_type not in ('post', 'page'):
            continue
        content = post.find('content:encoded', namespaces=NAMESPACES).text
        date = post.find('wp:post_date', namespaces=NAMESPACES).text
        title = post.find('title').text
        date = date.split(' ')[0].replace('-', '')
        title = re.sub(r'[_]+', '_', re.sub(r'[^a-z0-9+]', '_', title.lower()))
        if post_type == 'post':
            post_filename = date + '_' + title + '.txt'
            post_counter += 1
        else:
            post_filename = title + '.txt'
            page_counter += 1
        with open(os.path.join(output_dir, post_filename), 'w') as post_file:
            post_file.write(content.encode('utf8'))
        post_counter += 1
    print "Saved {} posts and {} pages in directory '{}'.".format(
            post_counter, page_counter, output_dir)

def _parse_and_validate_output(argv):
    if len(argv) not in (2, 4):
        _error("Wrong number of arguments.")
    filename = argv[1]
    if not os.path.isfile(filename):
        _error("Input file does not exist (or not enough permissions).")
    output_dir = argv[3] if len(argv) == 4 and argv[2] == '-o' else os.getcwd()
    if not os.path.isdir(output_dir):
        _error("Output directory does not exist (or not enough permissions).")
    return filename, output_dir

def _error(text):
    print text
    print USAGE_STRING
    sys.exit(1)

if __name__ == "__main__":
    main(sys.argv)
</code></pre>

<p>You can download the script from here: <a href="https://gist.github.com/ruslanosipov/b748a138389db2cda1e8">wxr2txt.py</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python: "ignored" context manager]]></title>
    <link href="http://ruslanosipov.github.io/blog/python-ignored-context-manager/"/>
    <updated>2014-05-29T12:20:34-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/python-ignored-context-manager</id>
    <content type="html"><![CDATA[<p>There was a recent <a href="http://hg.python.org/cpython/rev/406b47c64480">fantastic addition to Python 3.4</a> by Raymond Hettinger: <code>contextlib.ignored</code>. It&rsquo;s a context manager which lets you shorten the following often-occurring pattern:</p>

<pre><code>try:
    os.remove('i_probably_do_not_exist.txt')
except OSError:
    pass
</code></pre>

<p>And turn it into this:</p>

<pre><code>with ignored(OSError):
    os.remove('i_probably_do_not_exist')
</code></pre>

<p>Much shorted and prettier. But, as probably most of engineers, you have to use older version of python in production. That&rsquo;s where this little chunk of code comes in. Create a little <code>compat</code> (as in &ldquo;compatibility&rdquo;) library and add following function:</p>

<pre><code>import contextlib

@contextlib.contextmanager
def ignored(*exceptions):
    try:
        yield
    except exceptions:
        pass
</code></pre>

<p>Beautiful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Django and Lettuce play nice together]]></title>
    <link href="http://ruslanosipov.github.io/blog/making-django-and-lettuce-play-nice-together/"/>
    <updated>2013-12-30T10:48:31-08:00</updated>
    <id>http://ruslanosipov.github.io/blog/making-django-and-lettuce-play-nice-together</id>
    <content type="html"><![CDATA[<p>Lettuce is a great BDD tool which allows you to parse expressions written via Gherkin syntax in python. However the documentation is not very comprehensive, and at the moment current version (0.2.19) has some issues integrating with the latest Django (1.6.1 at the moment of writing). Without further ado, I&rsquo;ll get to a comprehensive tutorial.</p>

<p>Let&rsquo;s assume you are using <code>pip</code> and <code>virtualenv</code> for the dependency control, and you already have a working project configured. Your project is called &ldquo;myproject&rdquo;, and the only app you have within your project is called &ldquo;polls&rdquo;.</p>

<h2>Setup</h2>

<p>First, you have to install <code>lettuce</code> library. At the moment of writing, current released version (0.2.19) has an error integrating with Django, so we&rsquo;ll install current development version. Releases 0.2.20 and up should include the fix, so <code>pip install lettuce</code> would be better if the version is out.</p>

<pre><code>pip install -e \
    git://github.com/gabrielfalcao/lettuce@cccc397#egg=lettuce-master
pip install django-nose splinter
pip freeze &gt; requirements.txt
</code></pre>

<p>First line downloads lettuce package from the github repository and installs missing dependencies. You can replace <code>cccc397</code> with the current commit. Technically commit can be omitted, but we don&rsquo;t want to have an unstable ever-changing branch in our <code>requirements.txt</code>. I also added <code>django-nose</code> since nose assertions come in handy while writing Lettuce steps, as well as <code>splinter</code>, which is a great tool for testing web application.</p>

<p>Add Lettuce to the <code>INSTALLED_APPS</code> in your <code>myproject/settings.py</code>:</p>

<pre><code>INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admin',
    'django.contrib.admindocs',
    # ... third party apps ...
    'lettuce.django',
    'myproject',
    'polls',
)
</code></pre>

<p>You also have to explicitly specify the apps you want to use with lettuce:</p>

<pre><code>LETTUCE_APPS = (
    'polls',
)
</code></pre>

<p>By default, lettuce will run its' tests against your default database. But we want to use test database for that, so we have to add few more settings:</p>

<pre><code>LETTUCE_TEST_SERVER = 'lettuce.django.server.DjangoServer'
LETTUCE_SERVER_PORT = 9000
</code></pre>

<p>Where <code>LETTUCE_TEST_SERVER</code> is a subclass of Django&rsquo;s <code>LiveTestServerCase</code> &ndash; a class which runs a test server for you and <code>LETTUCE_SERVER_PORT</code> is different from port 8000 so you won&rsquo;t have issues running the development server via <code>python manage.py runserver</code> at the same time as running Lettuce tests.</p>

<p>You also have to create a <code>features</code> directories inside the apps you want to test with Lettuce:</p>

<pre><code>/myproject
    /myproject
        __init__.py
        settings.py
        urls.py
        wsgi.py
    /polls
        /features
            /steps
                __init__.py
                polls_list.py
            polls_list.feature
        __init__.py
        models.py
        tests.py
        views.py
    manage.py
    requirements.txt
    terrain.py
</code></pre>

<p>Lettuce has its' own settings file called <code>terrain.py</code>. It has to be in the same directory as a <code>manage.py</code>:</p>

<pre><code>from django.core.management import call_command
from django.conf import settings
from lettuce import before, after, world
from splinter.browser import Browser

@before.each_scenario
def flush_database(scenario):
    call_command('flush', interactive=False, verbosity=0)

@before.each_scenario
def prepare_browser(scenario):
    world.browser = Browser()

@after.each_scenario
def destroy_browser(scenario):
    world.browser.quit()
</code></pre>

<p>This code flushes the database before each scenario, as well as prepares and destroys the <code>splinter</code> browser.</p>

<h2>Writing the features</h2>

<p>Feature files support standard Gherkin syntax, let&rsquo;s write one right now in <code>polls/features/polls_list.feature</code>:</p>

<pre><code>Feature: Polls list

    Scenario: Polls list without any polls
        When I access the "polls list" url
        Then I see a text "We didn't find any polls!"

    Scenario: Polls list with one poll
        Given a poll with the title "Hello world"
        When I access the "polls list" url
        Then I see a text "Hello world"
        And I do not see a text "We didn't find any polls!"
</code></pre>

<p>Now describe the steps in <code>polls/features/steps/polls_list.py</code>:</p>

<pre><code>from django.core.urlresolvers import reverse
from lettuce import step, world
from lettuce.django import django_url
from nose.tools import assert_in, assert_not_in
from polls.models import Poll

PAGES = {
    "polls list": "polls:list"
}

@step(r'access the "(.*)" url')
def access_the_url(step, name):
    world.browser.visit(django_url(reverse(PAGES[name])))

@step(r'see a text "(.*)"')
def see_a_text(step, text):
    assert_in(text, world.browser.html)

@step(r'a poll with the title "(.*)"')
def create_a_poll_with_the_title(step, title):
    poll = Poll.objects.create(title=title)
    polls.save()

@step(r'do not see a text "(.*)"')
def do_not_see_a_text(step, text):
    assert_not_in(text, world.browser.html)
</code></pre>

<h2>Running the tests</h2>

<p>Now, you can run <code>python manage.py harvest --test-server</code> to run the tests you just wrote:</p>

<pre><code>$ python manage.py harvest --test-server
Creating test database for alias 'default'...
Django's builtin server is running at 0.0.0.0:9000

Feature: Polls list

  Scenario: Polls list without any polls
    When I access the "polls list" url
    Then I see a text "We didn't find any polls!"

  Scenario: Polls list with one poll
    Given a poll with the title "Hello world"
    When I access the "polls list" url
    Then I see a text "Hello world"
    And I do not see a text "We didn't find any polls!"

1 feature (1 passed)
2 scenarios (2 passed)
6 steps (6 passed)
Destroying test database for alias 'default'...
</code></pre>

<p>Don&rsquo;t forget the <code>--test-server</code> switch &ndash; otherwise Lettuce will run tests against your default database.</p>

<h2>Sources</h2>

<p>You can find some more details on Lettuce and Django integration here: <a href="http://lettuce.it/recipes/django-lxml.html">Web development fun with Lettuce and Django</a>.</p>

<p>Rather than using <code>--test-server</code> switch, it&rsquo;s easier and safer to set a flag in your <code>settings.py</code> (suggested by Michel Sabchuk):</p>

<pre><code>LETTUCE_USE_TEST_DATABASE = True
</code></pre>

<p>This way you won&rsquo;t end up accidentally erasing your production database after forgetting to add <code>--test-server</code> flag.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python doctests and decorators bug]]></title>
    <link href="http://ruslanosipov.github.io/blog/python-doctests-and-decorators-bug/"/>
    <updated>2013-07-22T07:57:29-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/python-doctests-and-decorators-bug</id>
    <content type="html"><![CDATA[<p>Now, this as well might be a feature, but doctest strings are not being executed for decorated functions (at least in version 2.7). However, there is a workaround.</p>

<p>You need to decorate your functions with <code>functools.wraps</code> within a decorator to import docstrings into a decorator scope.</p>

<pre><code>#!/usr/bin/env python

from functools import wraps

def decorator(func):
    @wraps(func)
    def wrapper():
        return func()
    return wrapper

@decorator
def foo():
    """
    &gt;&gt;&gt; foo()
    False
    """
    return True

import doctest
doctest.testmod()
</code></pre>

<p>Now you can see this test failing, where otherwise it would have been ignored:</p>

<pre><code>**********************************************************************
File "decorator.py", line 12, in __main__.foo
Failed example:
    foo()
Expected:
    False
Got:
    True
**********************************************************************
1 items had failures:
   1 of   1 in __main__.foo
***Test Failed*** 1 failures.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python tests with doctest and unittest]]></title>
    <link href="http://ruslanosipov.github.io/blog/python-tests-with-doctest-and-unittest/"/>
    <updated>2013-07-22T07:47:47-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/python-tests-with-doctest-and-unittest</id>
    <content type="html"><![CDATA[<p>When it comes to tests, <code>doctest</code> is a great simple module to write tests for your application. However it is pretty basic and does not have any extended features like, for example, centralized unit tests. If you have multiple modules with doctests (and you probably do) you most likely want to be able to run all doctests recursively from one place. That&rsquo;s where <code>unittest</code> comes in.</p>

<p>Let&rsquo;s assume we store modules in the <code>lib/</code> directory:</p>

<pre><code>$ ls lib/
__init__.py bar.py foo.py
</code></pre>

<p>Here are the contents of <code>foo.py</code> and <code>bar.py</code> respectfully:</p>

<pre><code>def foo():
    """
    &gt;&gt;&gt; foo()
    False
    """
    return False

def bar():
    """
    &gt;&gt;&gt; bar()
    True
    """
    return True

def baz():
    """
    &gt;&gt;&gt; baz()
    False
    """
    return False
</code></pre>

<p>Now, to run all tests we need a wrapper script. Let&rsquo;s call it: <code>runtests.py</code>:</p>

<pre><code>#!/usr/bin/env python

import unittest
import doctest
import os

files = []
root_dir = 'lib/'

for root, _, filenames in os.walk(root_dir):
    for filename in filenames:
        if filename == '__init__.py' or filename[-3:] != '.py':
            continue
        f = os.path.join(root, filename)
        f = f.replace('/', '.')
        f = f[:-3]
        files.append(f)

suite = unittest.TestSuite()
for module in files:
    suite.addTest(doctest.DocTestSuite(module))
unittest.TextTestRunner(verbosity=1).run(suite)
</code></pre>

<p>This approach invokes the <code>doctest.DocTestSuite</code> method, which converts doctests strings into unittest suites. Time to run our tests:</p>

<pre><code>$ chmod +x runtests.py
$ ./runtests.py
...
----------------------------------------------------------------------
Ran 3 tests in 0.008s

OK
</code></pre>

<p>And just to be sure that approach actually works, let&rsquo;s make one of the tests fail:</p>

<pre><code>$ ./runtests.py
.F.
======================================================================
FAIL: baz (lib.bar)
Doctest: lib.bar.baz
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/usr/lib/python2.7/doctest.py", line 2201, in runTest
    raise self.failureException(self.format_failure(new.getvalue()))
AssertionError: Failed doctest test for lib.bar.baz
  File "/home/rosipov/unitdoc/lib/bar.py", line 8, in baz

----------------------------------------------------------------------
File "/home/rosipov/unitdoc/lib/bar.py", line 10, in lib.bar.baz
Failed example:
    baz()
Expected:
    True
Got:
    False

----------------------------------------------------------------------
Ran 3 tests in 0.009s

FAILED (failures=1)
</code></pre>
]]></content>
  </entry>
  
</feed>
