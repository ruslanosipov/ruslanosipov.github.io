<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Ruslan Osipov]]></title>
  <link href="http://www.rosipov.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://www.rosipov.com/"/>
  <updated>2018-02-21T18:36:29+00:00</updated>
  <id>http://www.rosipov.com/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Automating Octorpress Publishing]]></title>
    <link href="http://www.rosipov.com/blog/automating-octopress-publishing/"/>
    <updated>2017-11-14T15:00:00+00:00</updated>
    <id>http://www.rosipov.com/blog/automating-octopress-publishing</id>
    <content type="html"><![CDATA[<p>I really like Octopress. It builds on top of Jekyll to address certain rough edges, and provides ready to go lighting fast blogging platform. It&rsquo;s easily extendible if you know how to code (thanks to a rather clean and well organized code base), and posts are just plain Markdown files.</p>

<p>One issue though - I need to be near a computer to publish and preview the article. This becomes difficult if I&rsquo;m traveling with, say, a tablet.</p>

<p>I have a low end AWS Lightsail instance I use for writing and publishing, but it&rsquo;s not always fun to write when SSHing into a server, and I often write offline - making it even more difficult to move files between where I write and where I publish. And managing images is a nightmare. To resolve this, I set up a few directories I use in Dropbox, and wrote a few scripts to move things around when needed.</p>

<p>Here&rsquo;s a directory structure in Dropbox:</p>

<pre><code>- blog/
  - posts/
    - 2017-11-20-automatic-octopress-publishing.markdown
  - img/
    - input/
      - a-picture-of-a-flower.jpg
    - output/
</code></pre>

<p>I put Markdown files in <code>Dropbox/blog/posts/</code> (and numerous offline editors sync with Dropbox - I&rsquo;m writing this with <a href="https://stackedit.io/app">StackEdit</a>, and I use <a href="https://ia.net/writer/">iA Writer</a> on my tablet). I add my images to <code>Dropbox/img/input/</code>. I  tend to strip metadata from my images and resize them to fit the maximum page width (I don&rsquo;t really care for high resolution pictures, speed is preferred over ability to zoom into a picture). For this, two tools are needed:</p>

<pre><code>sudo apt-get install imagemagick exiftool
</code></pre>

<p>When I&rsquo;m done writing or want to preview an article, I SSH into my AWS Lightsail instance and run <code>sync.sh</code>, a small script which moves posts to a proper directory, processes images and places them in the desired location, as well as starts Octopress instance (this way I can preview my blog on the AWS Lightsail instance). Contents of <code>sync.sh</code> (don&rsquo;t forget to <code>chmod +x</code>):</p>

<pre><code>#!/bin/bash
cd $HOME/Dropbox/blog/img/input
mogrify -resize 832x620 -quality 100 -path $HOME/Dropbox/blog/img/output *.jpg
exiftool -all= $HOME/Dropbox/blog/img/output/*.jpg
cp $HOME/Dropbox/blog/posts/*.markdown $HOME/blog/source/_posts
cp $HOME/Dropbox/blog/img/output/*.jpg $HOME/blog/source/images/posts
cd $HOME/blog
rake generate
rake preview
</code></pre>

<p>I run the above script every time I want to preview the site. I&rsquo;m sure it&rsquo;s easy to set up a daemon to watch for changes in the Dropbox folders, but I don&rsquo;t see the need for that yet. Also, I just statically resize images to a particular resolution (832x620) since all of the pictures I upload have the same aspect ratio, I&rsquo;m sure there&rsquo;s a way to calculate that number on the fly for this script to work with different aspect ratios.</p>

<p>Lastly, when I deployed and committed my changes (still commit and deploy manually out of a habit), I run <code>archive.sh</code>:</p>

<pre><code>#!/bin/bash
mv $HOME/Dropbox/blog/posts/*.markdown $HOME/Dropbox/blog/published
rm $HOME/Dropbox/blog/img/input/*
rm $HOME/Dropbox/blog/img/output/*
</code></pre>

<p>It&rsquo;s not much, but enough to save some manual labor involved in publishing to Octopress.</p>

<!--stackedit_data:
eyJoaXN0b3J5IjpbMTY3OTE1ODIzNl19
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contributing to an existing Octopress blog]]></title>
    <link href="http://www.rosipov.com/blog/contributing-to-an-existing-octopress-blog/"/>
    <updated>2014-12-17T05:09:58+00:00</updated>
    <id>http://www.rosipov.com/blog/contributing-to-an-existing-octopress-blog</id>
    <content type="html"><![CDATA[<p>I had to download my Octopress blog to a new machine today and the process of
setting up didn&rsquo;t go as smoothly as I expected. At the end of the day the setup
turned out to be simple, and here are the steps:</p>

<pre><code>git clone -b source https://github.com/username/username.github.io myblog
cd myblog
git clone https://github.com/username/username.github.io _deploy
bundle install
</code></pre>

<p>In a nutshell, you have to manually add <code>_deploy</code> folder set to track <code>master</code>
branch of your Octopress repository. Otherwise <code>rake deploy</code> command fails.</p>

<p>Happy writing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One more argument for 80 character limit]]></title>
    <link href="http://www.rosipov.com/blog/one-more-argument-for-80-character-limit/"/>
    <updated>2014-07-30T06:00:04+00:00</updated>
    <id>http://www.rosipov.com/blog/one-more-argument-for-80-character-limit</id>
    <content type="html"><![CDATA[<p>Limiting code to 80 (or 100 or 120) characters per line. It&rsquo;s a well-known
topic, and there&rsquo;s an overall consensus on the subject, not counting occasional
questions by newbies and odd cases. Most established tech companies have their
own line length guidelines. These are often dependent on a language, such as in
the case of Google with their 80 character Python and 100 character Java limits.</p>

<p>In this article, I won&rsquo;t be advocating all the usual arguments, such as easier
diff with version control software, or the ability to stack windows side by side
on wide screens. No, I believe that battle to be won quite a long time ago, the
topic is now closed. But something I didn&rsquo;t find mentioned in any of the
discussions is an interesting point from the world of writers and designers.</p>

<p>Ever since I started being interested in improving my writing skills, I found
article after article mention the importance of line length in reading.
Interestingly enough, this issue was raised in a world of literature. It had
been resolved long before programmers were fascinated with the desire to use up
rapidly expanding screen real estate.</p>

<p>I am talking about something known as &ldquo;measure&rdquo; in typography. It seems to be
the reason newspapers use narrow columns, or books leave such vast margins
around the text on a page. Here&rsquo;s an exempt from the <a href="http://en.wikipedia.org/wiki/Measure_(typography)">Wikipedia article</a>:</p>

<blockquote><p>Measure (or sometimes &ldquo;The Measure&rdquo;) in typography is the length of a line of
text. For a single-column design measure should ideally lie between 40 &amp; 80
characters. Many typographers consider the perfect measure to be 65
characters. If the lines are too short then the text becomes disjointed, if
they are too long the content loses rhythm as the reader searches for the
start of each line. Punctuation should preferably hang outside the measure.</p></blockquote>

<p>Most programming languages use special operators and keywords, which can be
considered &ldquo;punctuation&rdquo;. Some languages are more verbose (use more
punctuation), and some aren&rsquo;t. If you remove punctuation, the 80/100/120
character limit perfectly fits the standard time-honed &ldquo;measure&rdquo;.</p>

<p>Maybe I can use this as an additional argument the next time I have to explain
to a junior new hire why the character limits are so strictly enforced.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Export WordPress posts to plain text]]></title>
    <link href="http://www.rosipov.com/blog/export-wordpress-posts-to-plain-text/"/>
    <updated>2014-06-02T03:44:12+00:00</updated>
    <id>http://www.rosipov.com/blog/export-wordpress-posts-to-plain-text</id>
    <content type="html"><![CDATA[<p>I prefer to create and edit my posts in plain text. It&rsquo;s a timeless format, and
I find it nice to have an archive of posts lying around in plain text.</p>

<p>I wrote a little Python script which I used to extract an archive of my posts
and pages into a bunch of files on my computer. In order to use it, you need to
use &ldquo;<a href="http://wordpress.org/plugins/wordpress-importer/">WordPress Importer</a>&rdquo; plugin. Export your posts and pages into a WXR
format, and feed the file to the script.</p>

<p>Source code of the script is below (link for downloading the script is at the
bottom of this post):</p>

<pre><code>#!/usr/bin/env python

"""This script converts WXR file to a number of plain text files.

WXR stands for "WordPress eXtended RSS", which basically is just a
regular XML file. This script extracts entries from the WXR file into
plain text files. Output format: article name prefixed by date for
posts, article name for pages.

Usage: wxr2txt.py filename [-o output_dir]
"""

import os
import re
import sys
from xml.etree import ElementTree

NAMESPACES = {
        'content': 'http://purl.org/rss/1.0/modules/content/',
        'wp': 'http://wordpress.org/export/1.2/',
}
USAGE_STRING = "Usage: wxr2txt.py filename [-o output_dir]"

def main(argv):
    filename, output_dir = _parse_and_validate_output(argv)
    try:
        data = ElementTree.parse(filename).getroot()
    except ElementTree.ParseError:
        _error("Invalid input file format. Can not parse the input.")
    page_counter, post_counter = 0, 0
    for post in data.find('channel').findall('item'):
        post_type = post.find('wp:post_type', namespaces=NAMESPACES).text
        if post_type not in ('post', 'page'):
            continue
        content = post.find('content:encoded', namespaces=NAMESPACES).text
        date = post.find('wp:post_date', namespaces=NAMESPACES).text
        title = post.find('title').text
        date = date.split(' ')[0].replace('-', '')
        title = re.sub(r'[_]+', '_', re.sub(r'[^a-z0-9+]', '_', title.lower()))
        if post_type == 'post':
            post_filename = date + '_' + title + '.txt'
            post_counter += 1
        else:
            post_filename = title + '.txt'
            page_counter += 1
        with open(os.path.join(output_dir, post_filename), 'w') as post_file:
            post_file.write(content.encode('utf8'))
        post_counter += 1
    print "Saved {} posts and {} pages in directory '{}'.".format(
            post_counter, page_counter, output_dir)

def _parse_and_validate_output(argv):
    if len(argv) not in (2, 4):
        _error("Wrong number of arguments.")
    filename = argv[1]
    if not os.path.isfile(filename):
        _error("Input file does not exist (or not enough permissions).")
    output_dir = argv[3] if len(argv) == 4 and argv[2] == '-o' else os.getcwd()
    if not os.path.isdir(output_dir):
        _error("Output directory does not exist (or not enough permissions).")
    return filename, output_dir

def _error(text):
    print text
    print USAGE_STRING
    sys.exit(1)

if __name__ == "__main__":
    main(sys.argv)
</code></pre>

<p>You can download the script from here: <a href="https://gist.github.com/ruslanosipov/b748a138389db2cda1e8">wxr2txt.py</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python: "ignored" context manager]]></title>
    <link href="http://www.rosipov.com/blog/python-ignored-context-manager/"/>
    <updated>2014-05-29T19:20:34+00:00</updated>
    <id>http://www.rosipov.com/blog/python-ignored-context-manager</id>
    <content type="html"><![CDATA[<p>There was a recent <a href="http://hg.python.org/cpython/rev/406b47c64480">fantastic addition to Python 3.4</a> by Raymond Hettinger:
<code>contextlib.ignored</code>. It&rsquo;s a context manager which lets you shorten the
following often-occurring pattern:</p>

<pre><code>try:
    os.remove('i_probably_do_not_exist.txt')
except OSError:
    pass
</code></pre>

<p>And turn it into this:</p>

<pre><code>with ignored(OSError):
    os.remove('i_probably_do_not_exist')
</code></pre>

<p>Much shorted and prettier. But, as probably most of engineers, you have to use
older version of python in production. That&rsquo;s where this little chunk of code
comes in. Create a little <code>compat</code> (as in &ldquo;compatibility&rdquo;) library and add
following function:</p>

<pre><code>import contextlib

@contextlib.contextmanager
def ignored(*exceptions):
    try:
        yield
    except exceptions:
        pass
</code></pre>

<p>Beautiful!</p>

<p>UPDATE: As Andy pointed out in comments, this context manager has been renamed
to <code>contextlib.supress</code> (<a href="https://bugs.python.org/issue19266">https://bugs.python.org/issue19266</a>).</p>
]]></content>
  </entry>
  
</feed>
