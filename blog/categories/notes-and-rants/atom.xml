<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: notes and rants | Ruslan Osipov]]></title>
  <link href="http://www.rosipov.com/blog/categories/notes-and-rants/atom.xml" rel="self"/>
  <link href="http://www.rosipov.com/"/>
  <updated>2015-02-07T01:23:16-08:00</updated>
  <id>http://www.rosipov.com/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Power of the command line]]></title>
    <link href="http://www.rosipov.com/blog/power-of-the-command-line/"/>
    <updated>2015-02-06T13:13:49-08:00</updated>
    <id>http://www.rosipov.com/blog/power-of-the-command-line</id>
    <content type="html"><![CDATA[<p><em>Disclaimer: I am not advocating any specific tools or methodologies, but
sharing a workflow I find to be efficient and pleasant.</em></p>

<p>I am a huge fan of working with CLI applications. I use Vim for editing code,
composing emails, and various kinds of writing. When I have to manipulate huge
amounts of email, I use Mutt: it&rsquo;s intuitive tagging and regular expression
engine are extremely useful for the task. I employ <code>ack</code>, <code>awk</code>, <code>grep</code>, and
<code>sed</code> - Linux utilities which allow for precise and fast text manipulation.</p>

<p>However, I would not use CLI browsers like <code>elinks</code> or <code>w3m</code>, and the idea of
reading every email in Mutt gives me the creeps. I love the visualization web
browser offers, something text-based prompt is not able to provide. And it
doesn&rsquo;t have to.</p>

<p>There are two components to most of the tasks performed on a computer: analyzing
output and entering input. Certain tasks employ one component more than the
other. In most modern applications it&rsquo;s rare to have both solid control from
the user perspective and a pleasant informative UI. With increased visual
component, it&rsquo;s more time consuming to make the application do what you need,
especially if your needs are esoteric. With more editing power, visual display
becomes less complex in order to make editing tasks easier.</p>

<h2>Where visual tools fall short</h2>

<p>What is the alternative? Using multiple programs with different levels of
control to accomplish one task: to edit text. Each of the programs excels in
it&rsquo;s own field: word processing software allows for beautiful fonts and document
presentation, IDE lets you access aggregated meta information about your
application. But most of the IDEs and word processors lack the powerful tools
needed to manipulate the foundation of what user is working with - plain text.</p>

<h2>Ode to plain text</h2>

<p>I spend a lot of time writing and editing plain text. Be it source code, emails,
documentation, or even blog posts. These tasks take up significant amount of my
day, and it is only logical to substitute some of the visual presentation
capabilities for effectiveness.</p>

<p>It is hard to mentally process data which is not explicitly and unambiguously
visible: different levels of headings, hidden meta information. Unlike more
obscuring formats, plain text is all there is - it has nothing to hide. If you
don&rsquo;t see it - it&rsquo;s not there. If you do see it - you know exactly what it is.</p>

<p>One of my favorite tips from &ldquo;<a href="http://amzn.to/1yRe6Th">Pragmatic Programmer</a>&rdquo; goes:</p>

<blockquote><p>Use a single editor well</p></blockquote>

<p>So I learned one editor well, and now I use it for all my writing and editing
needs. I don&rsquo;t have to jump between IDE, browser, and office software. Most of
the text I edit is manipulated with one editor. There is only one set of key
bindings to know, one skill to master and hone. Fast, without any additional
thought, using single text editor and all of it&rsquo;s powerful features is imprinted
in muscle memory. One less task to worry about.</p>

<p>I write my documents in Markdown format, and later convert them to the desired
output using <code>pandoc</code>: be it an HTML page, PDF, or a Microsoft Word document. I
use Vim, so I can rearrange paragraphs or manipulate lines within a couple of
keystrokes. Since I spend so much time editing text, I also touch type, which
makes me even more effective at the given task.</p>

<h2>Harness the power of the command line</h2>

<p>When it comes to bulk manipulating files or working with version control -
there is no better candidate then command line applications. There&rsquo;s no need to
go through a number of obscure menus, ticking and unticking checkboxes, and
hoping that your desired result can be achieved with a program&rsquo;s GUI.</p>

<p>Let&rsquo;s look at a few scenarios some users face in their daily workflow.</p>

<h3>Creating a backup</h3>

<p>With GUI, you&rsquo;d have to take multiple steps:</p>

<ol>
<li>Right click <code>file</code>.</li>
<li>Left click on &ldquo;Copy&rdquo;.</li>
<li>Right click on some empty space.</li>
<li>Left click on &ldquo;Paste&rdquo;.</li>
<li>Right click on a newly created copy.</li>
<li>Left click on &ldquo;Rename&rdquo;.</li>
<li>Switch to a keyboard.</li>
<li>Type <code>file.bak</code>.</li>
</ol>


<p>The above steps can be sped up using shortcuts like <code>C-c</code> or <code>C-v</code>, but not by
much. Here&rsquo;s an alternative in bash:</p>

<pre><code>cp file{,.bak}
</code></pre>

<p>While first variant would do great for a novice or a casual user - the second
method would be much more preferred by an experienced user whose concern is
speed.</p>

<h3>Recursively bulk replacing text in a directory</h3>

<p>Let&rsquo;s assume we want to do a bulk replace text in a directory and all it&rsquo;s
subdirectories. We have our trusted IDE, let&rsquo;s assume this IDE is already
configured to work with a desired directory.</p>

<ol>
<li>Open your IDE.</li>
<li>Select &ldquo;Edit&rdquo; menu.</li>
<li>Select &ldquo;Find and Replace&rdquo; submenu.</li>
<li>Click on a &ldquo;Find&rdquo; input field.</li>
<li>Switch to a keyboard.</li>
<li>Type <code>function_to_replace</code>.</li>
<li>Switch to a mouse.</li>
<li>Click on &ldquo;Replace&rdquo; input field.</li>
<li>Switch to a keyboard.</li>
<li>Type <code>new_function_name</code>.</li>
<li>Switch to a mouse.</li>
<li>Enable &ldquo;Search in subdirectories&rdquo; checkbox.</li>
<li>Click &ldquo;OK&rdquo;.</li>
</ol>


<p>Again, this can be shortened a bit with some keyboard shortcuts, but not by
much. You still have to switch between keyboard and a mouse a total of 4 times,
and you still have to click through all the menus. This does get time consuming
if you do this often. Now let&rsquo;s try to perform the same task in command line:</p>

<pre><code>find . -type f | xargs sed -i 's/function_to_replace/new_function_name/g'
</code></pre>

<p>Much faster, if you&rsquo;re able to memorize the structure. And remembering what the
commands do is much easier than it looks. Especially with the help of <code>man</code> or,
even better, <code>bro</code> (see <a href="http://bropages.org">http://bropages.org</a> for latter).</p>

<p>The above example demonstrates one of the biggest advantages of command line
interfaces: an ability to redirect an output of one program into another,
chaining the tools together. In this example, we first get a list of all files
use <code>find</code> tool, and then run <code>sed</code> tool on each of those files in order to
replace the text.</p>

<p>An output from any CLI tool can be fed into any other CLI tool. This allows for
countless possibilities and high adaptability to unscripted scenarios.</p>

<h2>Is it worth learning CLI tools over their GUI counterparts?</h2>

<p>This depends on what your intentions are. If you&rsquo;re a power user who writes and
edits a lot of text or manipulates bulk amounts of text on a daily basis - than
it&rsquo;s definitely worth it. Time spent learning these tools will pay off. But if
you&rsquo;re a casual user whose needs end with writing an occasional email or two -
then you probably don&rsquo;t need to worry about this.</p>

<p>Hell, if you&rsquo;ve read this far - this means you&rsquo;re the former case. I can
practically guarantee that you will benefit from employing command line tools
and modal editors over their GUI counterparts.</p>

<p>I&rsquo;ve put together a table for comparison between two. Indeed, there are
different times when either GUI or CLI tools excel:</p>

<table>
<thead>
<tr>
<th> Factor                            </th>
<th> CLI </th>
<th> GUI </th>
</tr>
</thead>
<tbody>
<tr>
<td> Ability to combine/chain tools    </td>
<td> Yes </td>
<td> No  </td>
</tr>
<tr>
<td> Easy to learn                     </td>
<td> No  </td>
<td> Yes </td>
</tr>
<tr>
<td> Efficient for a novice user       </td>
<td> No  </td>
<td> Yes </td>
</tr>
<tr>
<td> Efficient for an experienced user </td>
<td> Yes </td>
<td> No  </td>
</tr>
<tr>
<td> Good for occasional use           </td>
<td> No  </td>
<td> Yes </td>
</tr>
<tr>
<td> Good for repetitive tasks         </td>
<td> Yes </td>
<td> No  </td>
</tr>
<tr>
<td> Presents visual information well  </td>
<td> No  </td>
<td> Yes </td>
</tr>
</tbody>
</table>


<p>As you can see - both CLI and GUI programs have their pluses and minuses. CLI
tools seem to appeal to experienced users, while GUI tools are great for novice
users and do excel in representing visual information. No matter what kind of
interface you prefer, it&rsquo;s crucially important to use the right tool for the job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[750 words a day]]></title>
    <link href="http://www.rosipov.com/blog/750-words-a-day/"/>
    <updated>2014-10-29T10:51:35-07:00</updated>
    <id>http://www.rosipov.com/blog/750-words-a-day</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve had increased interest in writing throughout this year. In addition to
being a pleasant and fulfilling activity, it shown a number of benefits in my
everyday life and career:</p>

<ul>
<li>Composing emails became faster and easier. When you have to reply to a couple
of dozen emails a day, speed and attention to details matters. Writing more
taught me to write more concise emails which are easy to read.</li>
<li>Writing a lot isn&rsquo;t a problem anymore. If I have to write documentation,
comment code, or just put together a very long email - I&rsquo;m not put off by the
idea. I&rsquo;m excited about it.</li>
<li>Typing speed went up. <a href="http://www.rosipov.com/blog/why-should-you-learn-to-touch-type/">I already touch type</a>, and constant writing practice
increases the acquired speed. Fast typing makes life easier, speeding up
mundane tasks, freeing up brain power for more costly activities.</li>
<li>It&rsquo;s easy to keep a condensed work log to highlight the issues of the day.
Tough programming issues, &ldquo;Eureka!&rdquo; moments, meeting notes - this historical
data saved me hours or even days of repeating my mistakes.</li>
</ul>


<p>A while ago, I&rsquo;ve heard of a thing called <a href="http://750words.com/">&ldquo;750 words&rdquo;</a>, a site built around
a challenge to write 750 words a day in order to improve writing skills and
unleash creativity. This looked like a great idea, and I decided to give it a
shot. I prefer to keep my personal entries offline, and I decided not to use the
provided service, but to keep a set of plain text files on my local machine.
Which worked out just fine. It&rsquo;s all just text after all.</p>

<p>I lasted for 10 days in a row, which I am proud of (filling up approximately 3
pages a day was no easy task for me). I started of with silly entries about not
knowing what to write about, and finished with a piece of a fiction story.
That&rsquo;s a considerable improvement.</p>

<p>By the end of the challenge I was mentally exhausted. But it taught me a very
important lesson: the more you write, the better you become. And that&rsquo;s one of
the main reasons I keep crafting new entries for this blog.</p>

<p>This happened half a year ago, I just never got around to writing about it. I
will go ahead and start another 750 words spree today. Maybe this time I&rsquo;ll be
able to make it last for the whole month.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One more argument for 80 character limit]]></title>
    <link href="http://www.rosipov.com/blog/one-more-argument-for-80-character-limit/"/>
    <updated>2014-07-29T23:00:04-07:00</updated>
    <id>http://www.rosipov.com/blog/one-more-argument-for-80-character-limit</id>
    <content type="html"><![CDATA[<p>Limiting code to 80 (or 100 or 120) characters per line. It&rsquo;s a well-known
topic, and there&rsquo;s an overall consensus on the subject, not counting occasional
questions by newbies and odd cases. Most established tech companies have their
own line length guidelines. These are often dependent on a language, such as in
the case of Google with their 80 character Python and 100 character Java limits.</p>

<p>In this article, I won&rsquo;t be advocating all the usual arguments, such as easier
diff with version control software, or the ability to stack windows side by side
on wide screens. No, I believe that battle to be won quite a long time ago, the
topic is now closed. But something I didn&rsquo;t find mentioned in any of the
discussions is an interesting point from the world of writers and designers.</p>

<p>Ever since I started being interested in improving my writing skills, I found
article after article mention the importance of line length in reading.
Interestingly enough, this issue was raised in a world of literature. It had
been resolved long before programmers were fascinated with the desire to use up
rapidly expanding screen real estate.</p>

<p>I am talking about something known as &ldquo;measure&rdquo; in typography. It seems to be
the reason newspapers use narrow columns, or books leave such vast margins
around the text on a page. Here&rsquo;s an exempt from the <a href="http://en.wikipedia.org/wiki/Measure_(typography)">Wikipedia article</a>:</p>

<blockquote><p>Measure (or sometimes &ldquo;The Measure&rdquo;) in typography is the length of a line of
text. For a single-column design measure should ideally lie between 40 &amp; 80
characters. Many typographers consider the perfect measure to be 65
characters. If the lines are too short then the text becomes disjointed, if
they are too long the content loses rhythm as the reader searches for the
start of each line. Punctuation should preferably hang outside the measure.</p></blockquote>

<p>Most programming languages use special operators and keywords, which can be
considered &ldquo;punctuation&rdquo;. Some languages are more verbose (use more
punctuation), and some aren&rsquo;t. If you remove punctuation, the 80/100/120
character limit perfectly fits the standard time-honed &ldquo;measure&rdquo;.</p>

<p>Maybe I can use this as an additional argument the next time I have to explain
to a junior new hire why the character limits are so strictly enforced.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abandoning WordPress for Octopress]]></title>
    <link href="http://www.rosipov.com/blog/abandoning-wordpress-for-octopress/"/>
    <updated>2014-07-22T00:04:15-07:00</updated>
    <id>http://www.rosipov.com/blog/abandoning-wordpress-for-octopress</id>
    <content type="html"><![CDATA[<p>I finally did it! I&rsquo;ve left the dark corners of WordPress in favor of
<a href="http://octopress.org">Octopress</a>, which seem to be the best system for my blogging needs.</p>

<h2>Why the migration?</h2>

<p>WordPress was a great host for me at one point - the community is fun and no
work is required for setup (I would rather not waste time fiddling with my blog
too much). But a number of things are off-putting:</p>

<ul>
<li>I don&rsquo;t like WYSIWYG editors and I don&rsquo;t like web editors. I try to use my
favorite editor for everything, including mail, documentation, note taking.
Even though WordPress allowed me to write my posts using Markdown, I still
didn&rsquo;t like not being able to use my favorite editor or environment.</li>
<li>Storing all the entries in a MySQL database is not favorable. I am writing
text, why would I pick any other format to store what I wrote?</li>
<li>Over the years my blog became increasingly slow, and in order to have a
reasonably fast site I needed to pay quite a sum of money. I am not ready for
such a commitment, since I only occasionally update this blog.</li>
</ul>


<p>On the other hand, Octopress (which is based on Jekyll, a static site
generator) has all of these concerns covered:</p>

<ul>
<li>I can write by creating simple Markdown documents. It doesn&rsquo;t matter where I
write, or how I write. This enables me to use an editor of my choice.</li>
<li>Plain text is universal. It can be viewed by a human, edited in any piece of
software, printed out, emailed, piped to a Linux program - just about
anything really.</li>
<li>Static sites are ridiculously fast. There&rsquo;s no preprocessing and no
rendering.  The only real speed limit is network latency. In addition, GitHub
lets you host static sites for free. What else could you ask for?</li>
</ul>


<h2>The process is painless</h2>

<p>Switching from WordPress to Octopress was very easy, and it took me only a few
hours (spread out throughout one weekend). Some highlights:</p>

<ol>
<li>Comments in Octopress are handled by <a href="https://disqus.com">Disqus</a>, and I had to set that up
on my WordPress blog before transitioning in order to transfer all the
comments.</li>
<li>I used the <a href="https://github.com/benbalter/wordpress-to-jekyll-exporter">WordPress to Jekyll Exporter</a> tool to export all my posts
from WordPress to Markdown (with meta-data which Octopress understands). I only
had a bit over 50 posts to worry about, so the process was complete in an
instant.</li>
<li>I ran some custom Vim macros to remove and change some excess meta data, as
well as clean up Markdown formatting. I am a perfectionist, and the exporter
tool left me with a poorly formatted document. I couldn&rsquo;t let that happen.</li>
</ol>


<h2>Results are breathtaking</h2>

<p>After only a few hours of work, I had a lightning fast, simple, and pragmatic
blog. There is no excess configuration, comments are handled externally, and
the source code for the site and articles is available on GitHub. I am able to
write my posts using Markdown, in my favorite editor, and use git to publish
the resulting articles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dark side of technical interviews]]></title>
    <link href="http://www.rosipov.com/blog/dark-side-of-technical-interviews/"/>
    <updated>2014-06-24T18:16:13-07:00</updated>
    <id>http://www.rosipov.com/blog/dark-side-of-technical-interviews</id>
    <content type="html"><![CDATA[<p>It upsets me greatly, since there is no immediate or obvious solution to an
interviewing scheme which will fit every company. Some companies seem to find
processes which work for their size and culture, while others struggle to do
so. Human resources management is a complex subject, and it&rsquo;s hard to get
right.</p>

<p>I have experience with only a small subset of interviewing techniques, but none
of the following interview components I employ seem satisfactory.</p>

<h2>Screening</h2>

<p>Screenings are usually done by recruiters, employees whose skills are in
seeking and evaluating prospective assets to the company. The first problem
here is that <em>recruiters are not team members</em>. Recruiters might do a really
good job at, say, finding good recruiters - since this is their domain, and
something they are inherently good at. But they don&rsquo;t develop software.
Recruiters don&rsquo;t work with tech leads and team members, they don&rsquo;t have the
slightest real life idea what managers and leaders want from the potential
hire. Hell, the problem is - most team leads don&rsquo;t even know what kind of
person they need. And if they do, they don&rsquo;t have a slightest idea on how to
communicate this properly to the recruiters.</p>

<p>In an ideal world, software engineers and team leads would do recruiting
themselves. But this way they would not have time to do their own job, and
would thus become recruiters. Boom, the company lost a good software engineer.
So you end up hiring recruiters, who have not the slightest idea what a team
needs (&ldquo;person has to be proficient in Blah-blah-blah&rdquo; is like saying that a
writer has to be an expert at writing about red cubes).</p>

<p>Is there a solution? Probably, maybe, I don&rsquo;t know. Maybe recruiters and
software engineers have to communicate more. Set up meetings to discuss team
needs, go through training in regards to identifying key traits in prospective
engineers. Teams of engineers have to communicate their preferences better.
Engineers are hired to fit the culture, not to be a &ldquo;rock star&rdquo;. Geniuses don&rsquo;t
go through the HR process, future team members do.</p>

<h2>Interview with another engineer</h2>

<p>This, even though it has a good intent, is a big whopping failure. What this
originally is meant to do - is have a potential colleague evaluate the
candidate. Sounds like a fantastic idea in theory, and sometimes it even works
the way it is intended to.</p>

<p>Most of the time, however, you end up with a competition-driven technological
fanatic bombarding an interviewee with smart-ass obscure trick questions they
discovered that one time browsing their favorite language&rsquo;s mailing lists from
the year 1990. In the worst-case scenario, the candidate is not able to answer
any of those terrible questions, satisfying the interviewer&rsquo;s ego while she
cranks out a negative report to a recruiter.</p>

<p>In a slightly better version, an engineer will give a candidate a set of
hands-on tasks which rarely have anything to do with the real job
responsibilities. One version of this: pair programming segment, on the
engineer&rsquo;s machine, under stress and with shaking hands. Are we hiring
contestants for a hackathon?</p>

<p>When it comes to software engineering, everyone suddenly forgets that writing
code is the smallest portion of the day. This might not be the case for junior
programmers, but they are not the ones companies are wasting their hiring
resources on. It&rsquo;s the mid-level and senior workers who weren&rsquo;t even evaluated
on half of their job responsibilities. How are their human interaction skills?
Are they pleasant to work with? Will they have issues with company policies?
<em>Will they fit?</em> These questions are as important as one&rsquo;s ability to put
together a few lines of code.</p>

<p>Maybe interviewers have to spend less time checking how well candidates write
code under pressure, and more time evaluating if they will be a good match for
the company&rsquo;s culture. How do they react when you point out their mistake? Can
they communicate concepts clearly? Are they good at marketing themselves? You
hire people, not code generating machines. Unless that&rsquo;s what you need, of
course.</p>

<h2>Home assignments</h2>

<p>Home assignments are something I personally like and despise and the same time.
And I find it sad that there are a number of big fat minuses with this
approach. First, one might find it insulting. &ldquo;What, I have to write code for
you in my own time? Couldn&rsquo;t you evaluate me on an interview or something?&rdquo;
This method can turn a lot of people off, and unfortunately the ones that stay
are not typically the best quality.</p>

<p>As my co-worker wisely pointed out, if you have a choice between two overall
equal companies and one requires you to do more work before being considered -
you will naturally pick one that accepts you easier. Any job seeker would feel
more appreciated and trusted taking that route.</p>

<p>The honesty factor doesn&rsquo;t play much role here, since you usually can tell if
the person did not write everything herself during the one-on-one followup. But
the cost does play a role. The interviewer has to come up with a relatively
unique assignment, spend time reading and evaluating the written program, give
feedback on a follow-up interview. This adds up if you have many candidates.</p>

<p>This technique does make sense when the list of candidates needs to be narrowed
down, or when you&rsquo;re at the top of your domain. Who wouldn&rsquo;t complete a
day-long homework for Google? Many people will happily spend a sleepless night
for an employment opportunity. Even more wouldn&rsquo;t, especially if someone has a
number of options lined up in front of them.</p>

<h2>What about other methods?</h2>

<p>There is a large number of various interviewing techniques out there. Some
companies combine the above specified methods to have a bare-bone hiring
template. Some make candidates do paid work for a few weeks before being
accepted as a new hire. Some don&rsquo;t bother and just decide to wing it.</p>

<p>This is still a developing area; I am afraid the solution has to be obtained
through the method of trial and error. There seems to be no success recipe
which works for everyone. There are, however, a number of alternative
solutions. I don&rsquo;t think most companies put enough resources in finding a
successful technique, instead opting for whatever method is in season at the
moment.</p>
]]></content>
  </entry>
  
</feed>
