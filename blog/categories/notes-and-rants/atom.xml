<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: notes and rants | Ruslan Osipov]]></title>
  <link href="http://ruslanosipov.github.io/blog/categories/notes-and-rants/atom.xml" rel="self"/>
  <link href="http://ruslanosipov.github.io/"/>
  <updated>2014-12-14T01:02:18-08:00</updated>
  <id>http://ruslanosipov.github.io/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[750 words a day]]></title>
    <link href="http://ruslanosipov.github.io/blog/750-words-a-day/"/>
    <updated>2014-10-29T10:51:35-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/750-words-a-day</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve had increased interest in writing throughout this year. In addition to
being a pleasant and fulfilling activity, it shown a number of benefits in my
everyday life and career:</p>

<ul>
<li>Composing emails became faster and easier. When you have to reply to a couple
of dozen emails a day, speed and attention to details matters. Writing more
taught me to write more concise emails which are easy to read.</li>
<li>Writing a lot isn&rsquo;t a problem anymore. If I have to write documentation,
comment code, or just put together a very long email &ndash; I&rsquo;m not put off by the
idea. I&rsquo;m excited about it.</li>
<li>Typing speed went up. <a href="http://www.rosipov.com/blog/why-should-you-learn-to-touch-type/">I already touch type</a>, and constant writing practice
increases the acquired speed. Fast typing makes life easier, speeding up
mundane tasks, freeing up brain power for more costly activities.</li>
<li>It&rsquo;s easy to keep a condensed work log to highlight the issues of the day.
Tough programming issues, &ldquo;Eureka!&rdquo; moments, meeting notes &ndash; this historical
data saved me hours or even days of repeating my mistakes.</li>
</ul>


<p>A while ago, I&rsquo;ve heard of a thing called <a href="http://750words.com/">&ldquo;750 words&rdquo;</a>, a site built around
a challenge to write 750 words a day in order to improve writing skills and
unleash creativity. This looked like a great idea, and I decided to give it a
shot. I prefer to keep my personal entries offline, and I decided not to use the
provided service, but to keep a set of plain text files on my local machine.
Which worked out just fine. It&rsquo;s all just text after all.</p>

<p>I lasted for 10 days in a row, which I am proud of (filling up approximately 3
pages a day was no easy task for me). I started of with silly entries about not
knowing what to write about, and finished with a piece of a fiction story.
That&rsquo;s a considerable improvement.</p>

<p>By the end of the challenge I was mentally exhausted. But it taught me a very
important lesson: the more you write, the better you become. And that&rsquo;s one of
the main reasons I keep crafting new entries for this blog.</p>

<p>This happened half a year ago, I just never got around to writing about it. I
will go ahead and start another 750 words spree today. Maybe this time I&rsquo;ll be
able to make it last for the whole month.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[One more argument for 80 character limit]]></title>
    <link href="http://ruslanosipov.github.io/blog/one-more-argument-for-80-character-limit/"/>
    <updated>2014-07-29T23:00:04-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/one-more-argument-for-80-character-limit</id>
    <content type="html"><![CDATA[<p>Limiting code to 80 (or 100 or 120) characters per line. It&rsquo;s a well-known
topic, and there&rsquo;s an overall consensus on the subject, not counting occasional
questions by newbies and odd cases. Most established tech companies have their
own line length guidelines. These are often dependent on a language, such as in
the case of Google with their 80 character Python and 100 character Java limits.</p>

<p>In this article, I won&rsquo;t be advocating all the usual arguments, such as easier
diff with version control software, or the ability to stack windows side by side
on wide screens. No, I believe that battle to be won quite a long time ago, the
topic is now closed. But something I didn&rsquo;t find mentioned in any of the
discussions is an interesting point from the world of writers and designers.</p>

<p>Ever since I started being interested in improving my writing skills, I found
article after article mention the importance of line length in reading.
Interestingly enough, this issue was raised in a world of literature. It had
been resolved long before programmers were fascinated with the desire to use up
rapidly expanding screen real estate.</p>

<p>I am talking about something known as &ldquo;measure&rdquo; in typography. It seems to be
the reason newspapers use narrow columns, or books leave such vast margins
around the text on a page. Here&rsquo;s an exempt from the <a href="http://en.wikipedia.org/wiki/Measure_(typography)">Wikipedia article</a>:</p>

<blockquote><p>Measure (or sometimes &ldquo;The Measure&rdquo;) in typography is the length of a line of
text. For a single-column design measure should ideally lie between 40 &amp; 80
characters. Many typographers consider the perfect measure to be 65
characters. If the lines are too short then the text becomes disjointed, if
they are too long the content loses rhythm as the reader searches for the
start of each line. Punctuation should preferably hang outside the measure.</p></blockquote>

<p>Most programming languages use special operators and keywords, which can be
considered &ldquo;punctuation&rdquo;. Some languages are more verbose (use more
punctuation), and some aren&rsquo;t. If you remove punctuation, the 80/100/120
character limit perfectly fits the standard time-honed &ldquo;measure&rdquo;.</p>

<p>Maybe I can use this as an additional argument the next time I have to explain
to a junior new hire why the character limits are so strictly enforced.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Abandoning WordPress for Octopress]]></title>
    <link href="http://ruslanosipov.github.io/blog/abandoning-wordpress-for-octopress/"/>
    <updated>2014-07-22T00:04:15-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/abandoning-wordpress-for-octopress</id>
    <content type="html"><![CDATA[<p>I finally did it! I&rsquo;ve left the dark corners of WordPress in favor of
<a href="http://octopress.org">Octopress</a>, which seem to be the best system for my blogging needs.</p>

<h2>Why the migration?</h2>

<p>WordPress was a great host for me at one point &ndash; the community is fun and no
work is required for setup (I would rather not waste time fiddling with my blog
too much). But a number of things are off-putting:</p>

<ul>
<li>I don&rsquo;t like WYSIWYG editors and I don&rsquo;t like web editors. I try to use my
favorite editor for everything, including mail, documentation, note taking.
Even though WordPress allowed me to write my posts using Markdown, I still
didn&rsquo;t like not being able to use my favorite editor or environment.</li>
<li>Storing all the entries in a MySQL database is not favorable. I am writing
text, why would I pick any other format to store what I wrote?</li>
<li>Over the years my blog became increasingly slow, and in order to have a
reasonably fast site I needed to pay quite a sum of money. I am not ready for
such a commitment, since I only occasionally update this blog.</li>
</ul>


<p>On the other hand, Octopress (which is based on Jekyll, a static site
generator) has all of these concerns covered:</p>

<ul>
<li>I can write by creating simple Markdown documents. It doesn&rsquo;t matter where I
write, or how I write. This enables me to use an editor of my choice.</li>
<li>Plain text is universal. It can be viewed by a human, edited in any piece of
software, printed out, emailed, piped to a Linux program &ndash; just about
anything really.</li>
<li>Static sites are ridiculously fast. There&rsquo;s no preprocessing and no
rendering.  The only real speed limit is network latency. In addition, GitHub
lets you host static sites for free. What else could you ask for?</li>
</ul>


<h2>The process is painless</h2>

<p>Switching from WordPress to Octopress was very easy, and it took me only a few
hours (spread out throughout one weekend). Some highlights:</p>

<ol>
<li>Comments in Octopress are handled by <a href="https://disqus.com">Disqus</a>, and I had to set that up
on my WordPress blog before transitioning in order to transfer all the
comments.</li>
<li>I used the <a href="https://github.com/benbalter/wordpress-to-jekyll-exporter">WordPress to Jekyll Exporter</a> tool to export all my posts
from WordPress to Markdown (with meta-data which Octopress understands). I only
had a bit over 50 posts to worry about, so the process was complete in an
instant.</li>
<li>I ran some custom Vim macros to remove and change some excess meta data, as
well as clean up Markdown formatting. I am a perfectionist, and the exporter
tool left me with a poorly formatted document. I couldn&rsquo;t let that happen.</li>
</ol>


<h2>Results are breathtaking</h2>

<p>After only a few hours of work, I had a lightning fast, simple, and pragmatic
blog. There is no excess configuration, comments are handled externally, and
the source code for the site and articles is available on GitHub. I am able to
write my posts using Markdown, in my favorite editor, and use git to publish
the resulting articles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dark side of technical interviews]]></title>
    <link href="http://ruslanosipov.github.io/blog/dark-side-of-technical-interviews/"/>
    <updated>2014-06-24T18:16:13-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/dark-side-of-technical-interviews</id>
    <content type="html"><![CDATA[<p>It upsets me greatly, since there is no immediate or obvious solution to an
interviewing scheme which will fit every company. Some companies seem to find
processes which work for their size and culture, while others struggle to do
so. Human resources management is a complex subject, and it&rsquo;s hard to get
right.</p>

<p>I have experience with only a small subset of interviewing techniques, but none
of the following interview components I employ seem satisfactory.</p>

<h2>Screening</h2>

<p>Screenings are usually done by recruiters, employees whose skills are in
seeking and evaluating prospective assets to the company. The first problem
here is that <em>recruiters are not team members</em>. Recruiters might do a really
good job at, say, finding good recruiters &ndash; since this is their domain, and
something they are inherently good at. But they don&rsquo;t develop software.
Recruiters don&rsquo;t work with tech leads and team members, they don&rsquo;t have the
slightest real life idea what managers and leaders want from the potential
hire. Hell, the problem is &ndash; most team leads don&rsquo;t even know what kind of
person they need. And if they do, they don&rsquo;t have a slightest idea on how to
communicate this properly to the recruiters.</p>

<p>In an ideal world, software engineers and team leads would do recruiting
themselves. But this way they would not have time to do their own job, and
would thus become recruiters. Boom, the company lost a good software engineer.
So you end up hiring recruiters, who have not the slightest idea what a team
needs (&ldquo;person has to be proficient in Blah-blah-blah&rdquo; is like saying that a
writer has to be an expert at writing about red cubes).</p>

<p>Is there a solution? Probably, maybe, I don&rsquo;t know. Maybe recruiters and
software engineers have to communicate more. Set up meetings to discuss team
needs, go through training in regards to identifying key traits in prospective
engineers. Teams of engineers have to communicate their preferences better.
Engineers are hired to fit the culture, not to be a &ldquo;rock star&rdquo;. Geniuses don&rsquo;t
go through the HR process, future team members do.</p>

<h2>Interview with another engineer</h2>

<p>This, even though it has a good intent, is a big whopping failure. What this
originally is meant to do &ndash; is have a potential colleague evaluate the
candidate. Sounds like a fantastic idea in theory, and sometimes it even works
the way it is intended to.</p>

<p>Most of the time, however, you end up with a competition-driven technological
fanatic bombarding an interviewee with smart-ass obscure trick questions they
discovered that one time browsing their favorite language&rsquo;s mailing lists from
the year 1990. In the worst-case scenario, the candidate is not able to answer
any of those terrible questions, satisfying the interviewer&rsquo;s ego while she
cranks out a negative report to a recruiter.</p>

<p>In a slightly better version, an engineer will give a candidate a set of
hands-on tasks which rarely have anything to do with the real job
responsibilities. One version of this: pair programming segment, on the
engineer&rsquo;s machine, under stress and with shaking hands. Are we hiring
contestants for a hackathon?</p>

<p>When it comes to software engineering, everyone suddenly forgets that writing
code is the smallest portion of the day. This might not be the case for junior
programmers, but they are not the ones companies are wasting their hiring
resources on. It&rsquo;s the mid-level and senior workers who weren&rsquo;t even evaluated
on half of their job responsibilities. How are their human interaction skills?
Are they pleasant to work with? Will they have issues with company policies?
<em>Will they fit?</em> These questions are as important as one&rsquo;s ability to put
together a few lines of code.</p>

<p>Maybe interviewers have to spend less time checking how well candidates write
code under pressure, and more time evaluating if they will be a good match for
the company&rsquo;s culture. How do they react when you point out their mistake? Can
they communicate concepts clearly? Are they good at marketing themselves? You
hire people, not code generating machines. Unless that&rsquo;s what you need, of
course.</p>

<h2>Home assignments</h2>

<p>Home assignments are something I personally like and despise and the same time.
And I find it sad that there are a number of big fat minuses with this
approach. First, one might find it insulting. &ldquo;What, I have to write code for
you in my own time? Couldn&rsquo;t you evaluate me on an interview or something?&rdquo;
This method can turn a lot of people off, and unfortunately the ones that stay
are not typically the best quality.</p>

<p>As my co-worker wisely pointed out, if you have a choice between two overall
equal companies and one requires you to do more work before being considered &ndash;
you will naturally pick one that accepts you easier. Any job seeker would feel
more appreciated and trusted taking that route.</p>

<p>The honesty factor doesn&rsquo;t play much role here, since you usually can tell if
the person did not write everything herself during the one-on-one followup. But
the cost does play a role. The interviewer has to come up with a relatively
unique assignment, spend time reading and evaluating the written program, give
feedback on a follow-up interview. This adds up if you have many candidates.</p>

<p>This technique does make sense when the list of candidates needs to be narrowed
down, or when you&rsquo;re at the top of your domain. Who wouldn&rsquo;t complete a
day-long homework for Google? Many people will happily spend a sleepless night
for an employment opportunity. Even more wouldn&rsquo;t, especially if someone has a
number of options lined up in front of them.</p>

<h2>What about other methods?</h2>

<p>There is a large number of various interviewing techniques out there. Some
companies combine the above specified methods to have a bare-bone hiring
template. Some make candidates do paid work for a few weeks before being
accepted as a new hire. Some don&rsquo;t bother and just decide to wing it.</p>

<p>This is still a developing area; I am afraid the solution has to be obtained
through the method of trial and error. There seems to be no success recipe
which works for everyone. There are, however, a number of alternative
solutions. I don&rsquo;t think most companies put enough resources in finding a
successful technique, instead opting for whatever method is in season at the
moment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I threw away my "To Do" list]]></title>
    <link href="http://ruslanosipov.github.io/blog/why-i-threw-away-my-to-do-list/"/>
    <updated>2014-06-07T12:11:54-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/why-i-threw-away-my-to-do-list</id>
    <content type="html"><![CDATA[<p>I enjoy organizing things. I am accustomed to keeping neat &ldquo;To Do&rdquo; lists,
written notes, and just about anything that will let me arrange my tasks
instead of actually accomplishing them. I recently stopped writing things down,
and the results were pleasantly surprising&hellip;</p>

<p>I was keeping a list of things I would need to complete. I organized it by
priorities, and at some point I even used Gina&rsquo;s fancy
&ldquo;<a href="http://todotxt.com">Todo.txt</a>&rdquo; wrapper for managing it.</p>

<p>What I realized after using such a scheme, is that my list was growing longer
and longer with every week. After a while, the number of tasks became hard to
manage, and the number of tasks became permanent residents on my task list. Why
did this happen? Well for one, I turned my list into a &ldquo;check box machine&rdquo;.
Complete a task, check off a check box. There was no mindfulness about it: I
was just completing task after task. &ldquo;All right, this one is done, let&rsquo;s move
to a next one.&rdquo; &ndash; this is what was constantly running through my head.
Secondly, by writing down a task on my list in the first place, my brain would
register it as being completed, and then I&rsquo;d go on with my day. Needless to
say, certain tasks would sit on my list for an indefinite amount of time.</p>

<p>After a while, I deleted my &ldquo;To Do&rdquo; list. Instead, every day I ask myself a
simple question: &ldquo;What should I do today to succeed at what I am trying to
accomplish?&rdquo;. This way, work becomes achievement driven. I started choosing
tasks which provide the biggest impact, dedicating some days just to minor
&ldquo;clean up&rdquo; tasks which I didn&rsquo;t deem important enough for productive days.</p>

<p>I threw away my &ldquo;To Do&rdquo; list, and I am glad I did it. I love being mindful
about my day, I know exactly what I need to accomplish in order to succeed.
It&rsquo;s easy to get caught up in a daily route, and forget that your life isn&rsquo;t
just a list of things to do, but a number of goals you want to reach. By not
relying on a written manifesto cluttered with tasks, I am forced to concentrate
on the bigger picture, where what I set out to accomplish has the highest
possible impact on my life and career.</p>
]]></content>
  </entry>
  
</feed>
