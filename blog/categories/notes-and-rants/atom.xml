<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: notes and rants | Ruslan Osipov]]></title>
  <link href="http://ruslanosipov.github.io/blog/categories/notes-and-rants/atom.xml" rel="self"/>
  <link href="http://ruslanosipov.github.io/"/>
  <updated>2014-07-22T21:57:44-07:00</updated>
  <id>http://ruslanosipov.github.io/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Abandoning WordPress for Octopress]]></title>
    <link href="http://ruslanosipov.github.io/blog/abandoning-wordpress-for-octopress/"/>
    <updated>2014-07-22T00:04:15-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/abandoning-wordpress-for-octopress</id>
    <content type="html"><![CDATA[<p>I finally did it! I&rsquo;ve left the dark corners of WordPress in favor of
<a href="http://octopress.org">Octopress</a>, which seem to be the best system for my blogging needs.</p>

<h2>Why the migration?</h2>

<p>WordPress was a great host for me at one point &ndash; the community is fun and no
work is required for setup (I would rather not waste time fiddling with my blog
too much). But a number of things are off-putting:</p>

<ul>
<li>I don&rsquo;t like WYSIWYG editors and I don&rsquo;t like web editors. I try to use my
favorite editor for everything, including mail, documentation, note taking.
Even though WordPress allowed me to write my posts using Markdown, I still
didn&rsquo;t like not being able to use my favorite editor or environment.</li>
<li>Storing all the entries in a MySQL database is not favorable. I am writing
text, why would I pick any other format to store what I wrote?</li>
<li>Over the years my blog became increasingly slow, and in order to have a
reasonably fast site I needed to pay quite a sum of money. I am not ready for
such a commitment, since I only occasionally update this blog.</li>
</ul>


<p>On the other hand, Octopress (which is based on Jekyll, a static site
generator) has all of these concerns covered:</p>

<ul>
<li>I can write by creating simple Markdown documents. It doesn&rsquo;t matter where I
write, or how I write. This enables me to use an editor of my choice.</li>
<li>Plain text is universal. It can be viewed by a human, edited in any piece of
software, printed out, emailed, piped to a Linux program &ndash; just about
anything really.</li>
<li>Static sites are ridiculously fast. There&rsquo;s no preprocessing and no
rendering.  The only real speed limit is network latency. In addition, GitHub
lets you host static sites for free. What else could you ask for?</li>
</ul>


<h2>The process is painless</h2>

<p>Switching from WordPress to Octopress was very easy, and it took me only a few
hours (spread out throughout one weekend). Some highlights:</p>

<ol>
<li>Comments in Octopress are handled by <a href="https://disqus.com">Disqus</a>, and I had to set that up
on my WordPress blog before transitioning in order to transfer all the
comments.</li>
<li>I used the <a href="https://github.com/benbalter/wordpress-to-jekyll-exporter">WordPress to Jekyll Exporter</a> tool to export all my posts
from WordPress to Markdown (with meta-data which Octopress understands). I only
had a bit over 50 posts to worry about, so the process was complete in an
instant.</li>
<li>I ran some custom Vim macros to remove and change some excess meta data, as
well as clean up Markdown formatting. I am a perfectionist, and the exporter
tool left me with a poorly formatted document. I couldn&rsquo;t let that happen.</li>
</ol>


<h2>Results are breathtaking</h2>

<p>After only a few hours of work, I had a lightning fast, simple, and pragmatic
blog. There is no excess configuration, comments are handled externally, and
the source code for the site and articles is available on GitHub. I am able to
write my posts using Markdown, in my favorite editor, and use git to publish
the resulting articles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dark side of technical interviews]]></title>
    <link href="http://ruslanosipov.github.io/blog/dark-side-of-technical-interviews/"/>
    <updated>2014-06-24T18:16:13-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/dark-side-of-technical-interviews</id>
    <content type="html"><![CDATA[<p>It upsets me greatly, since there is no immediate or obvious solution to an
interviewing scheme which will fit every company. Some companies seem to find
processes which work for their size and culture, while others struggle to do
so. Human resources management is a complex subject, and it&rsquo;s hard to get
right.</p>

<p>I have experience with only a small subset of interviewing techniques, but none
of the following interview components I employ seem satisfactory.</p>

<h2>Screening</h2>

<p>Screenings are usually done by recruiters, employees whose skills are in
seeking and evaluating prospective assets to the company. The first problem
here is that <em>recruiters are not team members</em>. Recruiters might do a really
good job at, say, finding good recruiters &ndash; since this is their domain, and
something they are inherently good at. But they don&rsquo;t develop software.
Recruiters don&rsquo;t work with tech leads and team members, they don&rsquo;t have the
slightest real life idea what managers and leaders want from the potential
hire. Hell, the problem is &ndash; most team leads don&rsquo;t even know what kind of
person they need. And if they do, they don&rsquo;t have a slightest idea on how to
communicate this properly to the recruiters.</p>

<p>In an ideal world, software engineers and team leads would do recruiting
themselves. But this way they would not have time to do their own job, and
would thus become recruiters. Boom, the company lost a good software engineer.
So you end up hiring recruiters, who have not the slightest idea what a team
needs (&ldquo;person has to be proficient in Blah-blah-blah&rdquo; is like saying that a
writer has to be an expert at writing about red cubes).</p>

<p>Is there a solution? Probably, maybe, I don&rsquo;t know. Maybe recruiters and
software engineers have to communicate more. Set up meetings to discuss team
needs, go through training in regards to identifying key traits in prospective
engineers. Teams of engineers have to communicate their preferences better.
Engineers are hired to fit the culture, not to be a &ldquo;rock star&rdquo;. Geniuses don&rsquo;t
go through the HR process, future team members do.</p>

<h2>Interview with another engineer</h2>

<p>This, even though it has a good intent, is a big whopping failure. What this
originally is meant to do &ndash; is have a potential colleague evaluate the
candidate. Sounds like a fantastic idea in theory, and sometimes it even works
the way it is intended to.</p>

<p>Most of the time, however, you end up with a competition-driven technological
fanatic bombarding an interviewee with smart-ass obscure trick questions they
discovered that one time browsing their favorite language&rsquo;s mailing lists from
the year 1990. In the worst-case scenario, the candidate is not able to answer
any of those terrible questions, satisfying the interviewer&rsquo;s ego while she
cranks out a negative report to a recruiter.</p>

<p>In a slightly better version, an engineer will give a candidate a set of
hands-on tasks which rarely have anything to do with the real job
responsibilities. One version of this: pair programming segment, on the
engineer&rsquo;s machine, under stress and with shaking hands. Are we hiring
contestants for a hackathon?</p>

<p>When it comes to software engineering, everyone suddenly forgets that writing
code is the smallest portion of the day. This might not be the case for junior
programmers, but they are not the ones companies are wasting their hiring
resources on. It&rsquo;s the mid-level and senior workers who weren&rsquo;t even evaluated
on half of their job responsibilities. How are their human interaction skills?
Are they pleasant to work with? Will they have issues with company policies?
<em>Will they fit?</em> These questions are as important as one&rsquo;s ability to put
together a few lines of code.</p>

<p>Maybe interviewers have to spend less time checking how well candidates write
code under pressure, and more time evaluating if they will be a good match for
the company&rsquo;s culture. How do they react when you point out their mistake? Can
they communicate concepts clearly? Are they good at marketing themselves? You
hire people, not code generating machines. Unless that&rsquo;s what you need, of
course.</p>

<h2>Home assignments</h2>

<p>Home assignments are something I personally like and despise and the same time.
And I find it sad that there are a number of big fat minuses with this
approach. First, one might find it insulting. &ldquo;What, I have to write code for
you in my own time? Couldn&rsquo;t you evaluate me on an interview or something?&rdquo;
This method can turn a lot of people off, and unfortunately the ones that stay
are not typically the best quality.</p>

<p>As my co-worker wisely pointed out, if you have a choice between two overall
equal companies and one requires you to do more work before being considered &ndash;
you will naturally pick one that accepts you easier. Any job seeker would feel
more appreciated and trusted taking that route.</p>

<p>The honesty factor doesn&rsquo;t play much role here, since you usually can tell if
the person did not write everything herself during the one-on-one followup. But
the cost does play a role. The interviewer has to come up with a relatively
unique assignment, spend time reading and evaluating the written program, give
feedback on a follow-up interview. This adds up if you have many candidates.</p>

<p>This technique does make sense when the list of candidates needs to be narrowed
down, or when you&rsquo;re at the top of your domain. Who wouldn&rsquo;t complete a
day-long homework for Google? Many people will happily spend a sleepless night
for an employment opportunity. Even more wouldn&rsquo;t, especially if someone has a
number of options lined up in front of them.</p>

<h2>What about other methods?</h2>

<p>There is a large number of various interviewing techniques out there. Some
companies combine the above specified methods to have a bare-bone hiring
template. Some make candidates do paid work for a few weeks before being
accepted as a new hire. Some don&rsquo;t bother and just decide to wing it.</p>

<p>This is still a developing area; I am afraid the solution has to be obtained
through the method of trial and error. There seems to be no success recipe
which works for everyone. There are, however, a number of alternative
solutions. I don&rsquo;t think most companies put enough resources in finding a
successful technique, instead opting for whatever method is in season at the
moment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why I threw away my "To Do" list]]></title>
    <link href="http://ruslanosipov.github.io/blog/why-i-threw-away-my-to-do-list/"/>
    <updated>2014-06-07T12:11:54-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/why-i-threw-away-my-to-do-list</id>
    <content type="html"><![CDATA[<p>I enjoy organizing things. I am accustomed to keeping neat &ldquo;To Do&rdquo; lists,
written notes, and just about anything that will let me arrange my tasks
instead of actually accomplishing them. I recently stopped writing things down,
and the results were pleasantly surprising&hellip;</p>

<p>I was keeping a list of things I would need to complete. I organized it by
priorities, and at some point I even used Gina&rsquo;s fancy
&ldquo;<a href="http://todotxt.com">Todo.txt</a>&rdquo; wrapper for managing it.</p>

<p>What I realized after using such a scheme, is that my list was growing longer
and longer with every week. After a while, the number of tasks became hard to
manage, and the number of tasks became permanent residents on my task list. Why
did this happen? Well for one, I turned my list into a &ldquo;check box machine&rdquo;.
Complete a task, check off a check box. There was no mindfulness about it: I
was just completing task after task. &ldquo;All right, this one is done, let&rsquo;s move
to a next one.&rdquo; &ndash; this is what was constantly running through my head.
Secondly, by writing down a task on my list in the first place, my brain would
register it as being completed, and then I&rsquo;d go on with my day. Needless to
say, certain tasks would sit on my list for an indefinite amount of time.</p>

<p>After a while, I deleted my &ldquo;To Do&rdquo; list. Instead, every day I ask myself a
simple question: &ldquo;What should I do today to succeed at what I am trying to
accomplish?&rdquo;. This way, work becomes achievement driven. I started choosing
tasks which provide the biggest impact, dedicating some days just to minor
&ldquo;clean up&rdquo; tasks which I didn&rsquo;t deem important enough for productive days.</p>

<p>I threw away my &ldquo;To Do&rdquo; list, and I am glad I did it. I love being mindful
about my day, I know exactly what I need to accomplish in order to succeed.
It&rsquo;s easy to get caught up in a daily route, and forget that your life isn&rsquo;t
just a list of things to do, but a number of goals you want to reach. By not
relying on a written manifesto cluttered with tasks, I am forced to concentrate
on the bigger picture, where what I set out to accomplish has the highest
possible impact on my life and career.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why should you learn to touch type?]]></title>
    <link href="http://ruslanosipov.github.io/blog/why-should-you-learn-to-touch-type/"/>
    <updated>2014-05-31T12:33:15-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/why-should-you-learn-to-touch-type</id>
    <content type="html"><![CDATA[<p>I have a confession to make. Up until recently I did not know how to touch
type. I would do what most people around me did: push the keys however which
way I felt; make a typo; look down at the keyboard to find the letter I
mistyped; repeat the whole process. I would put out up to 50 words per minute
with this method, with an embarrassing error rate (which usually went up if I
was showing something to someone). I am now terrified to think about those
times.</p>

<p>It wasn&rsquo;t until I stumbled upon Steve Yegge&rsquo;s article
&ldquo;<a href="http://steve-yegge.blogspot.com/2008/09/programmings-dirtiest-little-secret.html">Programming&rsquo;s Dirtiest Little Secret</a>&rdquo;, that I fully understood the
implications of not developing proper typing technique.</p>

<p>Picture the following: programmer Clara is working in a small software company.
Clara doesn&rsquo;t use any fancy IDEs nor extendible editors like emacs or vim.
Clara uses Windows' default &ldquo;Notepad&rdquo; program to write and edit her source
code. She is defending herself by saying that she doesn&rsquo;t need any advanced
features, and that she knows every keyword she needs to use by heart. She
spends hours tediously searching for the files on her computer, opening them in
Notepad, holding down arrow keys to get to whichever chunk of code she needs to
edit (or even worse &ndash; lifts her hands off a keyboard and uses a mouse to
navigate the file). Her editor only goes back one step with the &ldquo;undo&rdquo;
operation&hellip; But Clara has good memory and she can re-type the code she erased.</p>

<p>What do you think of Clara? You might say that she is wasting her time and she
should learn herself a robust editor. And of course, you will be right.</p>

<p>One day, Clara&rsquo;s company hired a new tech lead &ndash; Jane. Jane noticed that Clara
is very slow at accomplishing tasks assigned to her. So Jane showed Clara how
to save a lot of time by using an advanced editor she uses. Suddenly Clara
discovered a whole new world in front of her: it became much easier to read the
code with parts of it highlighted, and the new text editor showed her when she
would make a typo or a big error &ndash; even before Clara compiled the code. And
Clara didn&rsquo;t even have to re-invent the code she deleted, she could just travel
down the undo tree back to the time when she erased the code: all of a sudden
it felt like she had access to a time machine! Jane even told her that there
are plugins which can write some code for Clara! How amazing is that? It took a
while for Clara to learn how to use the new editor, but after a few months,
Clara became almost as fast at doing her job as Jane. Maybe Clara even received
a promotion from doing so many things in a short period of time.</p>

<p>If you don&rsquo;t know how to touch type &ndash; you are Clara. You are wasting your time.
You look ridiculous to your colleagues when you stare down at your keyboard
while typing. Interviewers secretly laugh at you when you make five errors in a
four-letter word. You are frustrated by even the remote possibility of having
to write more than you absolutely have to.</p>

<p>Writing is a big part of the job as a software engineer. You write code,
documentation, ask questions. Most importantly, you have to communicate with
your colleagues and users. Most of this interaction is written: it&rsquo;s a great
form of communication for the job &ndash; written notes can be saved and searched
through later. As a software engineer, you bring value to your company and its
users. And due to the arcane nature of the craft, communication becomes
crucial. You can be the smartest programmer in the world and you can write the
best piece of software out there, but no one will know about it unless you
communicate why is it so great, what it does, and how to use it.</p>

<p>By learning how to type properly, you turn a keyboard into an extension of your
hand. All you have to do in order to type &ndash; is just think of words and
sentences. Your muscle memory does the rest.</p>

<p>I now type somewhere between 60 and 80 words per minute with what I find to be
a low error rate &ndash; and I have been touch typing now for little over a month. If
you care for your craft, you have no excuse for not mastering a proper typing
technique.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing for the sake of writing]]></title>
    <link href="http://ruslanosipov.github.io/blog/writing-for-the-sake-of-writing/"/>
    <updated>2014-05-29T21:01:29-07:00</updated>
    <id>http://ruslanosipov.github.io/blog/writing-for-the-sake-of-writing</id>
    <content type="html"><![CDATA[<p>This is my first article out of what I hope will be many. I started this blog
in 2012 and I&rsquo;ve never written a single biased entry: just dry technical
manuals, tutorials, and guides. This has lead to a number of page views from
programmers in distress, but getting a certain amount of views was never the
goal of this blog. To be honest, I am not even sure if I had a goal in mind.
Everyone had a blog, and I thought so should I. I was hoping it will assist me
in getting a job I will enjoy by increasing my online presence (and it may
have). Maybe I was out for some online reputation and (knowing myself) fame. Of
course, none of this happened.</p>

<p>What did happen, is that I created a collection of technical notes which no one
cares about until they have a problem with something they are working on. And
after the issue is resolved they close the page and never open it again, as one
would do with a countless number of other programming blogs and tutorial
collections.</p>

<p>Where am I leading with this?</p>

<p>Lately I have been (multiple times) hit with realization that software
engineering is less about writing perfect (or any, for that matter) code, and
is more about management and people skills. The very people skills most
software engineers lack due to choice of profession (or maybe the other way). I
spent some years reading books and articles on how to optimize, refactor, and
design code for which any programmer would be praised and renowned for. I have
even made some progress in reaching this &ldquo;magic goal&rdquo;.</p>

<p>Don&rsquo;t get me wrong, writing readable and reusable programs is an essential part
of the job, but it is only one scale on which a professional programmer&rsquo;s
performance is measured. And it&rsquo;s a relatively small scale, in comparison to
others.</p>

<p>As a professional, you have your skill of assessing priorities, productivity,
time management, patience, an active learning process, and of course, the above
mentioned communication skills. This post is about just that: transmitting
ideas and concepts to readers.</p>

<p>I am not very good at human interaction. I am an introvert. Even worse, and as
many of my colleagues do, I mumble something or smile awkwardly when passing
someone in a hallway. What is the social protocol for such an event anyway?
Whatever it is, I don&rsquo;t think I am doing it right.</p>

<p>It&rsquo;s hard to evaluate my verbal communication skills. Maybe people have hard
time understanding the points I am trying to bring across in conversation.
Being a foreigner, some people probably find it challenging to understand every
word I say. In addition, with my tendency to slur words when I am tired or
excited &ndash; it&rsquo;s probably annoying to talk to me sometimes.</p>

<p>I can say with confidence that my writing skills suck. I spend by far more time
than I should composing emails. I write a paragraph and then I delete it.
Writing is a big challenge for me. I am quite sure this article is very hard to
read. And I have a very strong feeling no one will read this article. Except
for maybe, my wife &ndash; who is a fantastic writer and will point out every mistake
I&rsquo;ve made. This text will have to be revised many times before it becomes even
slightly readable.</p>

<p>I started looking around for ways to improve the way I communicate my thoughts.
I found a large number of articles, rules, and techniques which supposedly
should instantly make you a better writer. This of course might be true if you
are a professional writer or a student majoring in literature. I am neither. I
stumbled upon a great article by Jeff Atwood:
&ldquo;<a href="http://blog.codinghorror.com/how-to-write-without-writing/">How to write without writing</a>&rdquo;. Reading it gave me the push I needed to
get over the embarrassment of the inevitable failure from writing poorly. And I
know I am writing poorly, I&rsquo;ve read the stuff I wrote.</p>

<p>You don&rsquo;t expect yourself to wake up one day and write awesome code, do you?
No, you wake up, go to work, fail, and maybe after months and years of practice
you become better at putting together pieces of code. The same rule applies to
writing. Write a lot and often, and read what smart people write. Try to be
even better than them. Fail. Repeat.</p>

<p>This is why I am starting to write less technical entries. Abstract topics will
let me hone my writing skills. All I have to do is just stick to some sort of a
writing schedule. I&rsquo;ll come up with things to write about, I am a pretty loud
person.</p>

<p>P.S: My recently acquired touch typing skills have come in handy in composing
this. I would have previously never had the patience to finish the wall of text
I am looking at right now. Go learn to type faster.</p>
]]></content>
  </entry>
  
</feed>
