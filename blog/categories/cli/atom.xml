<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cli | Ruslan Osipov]]></title>
  <link href="http://www.rosipov.com/blog/categories/cli/atom.xml" rel="self"/>
  <link href="http://www.rosipov.com/"/>
  <updated>2019-05-13T02:17:36+00:00</updated>
  <id>http://www.rosipov.com/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Desktop notifications from Chrome Secure Shell]]></title>
    <link href="http://www.rosipov.com/blog/desktop-notifications-from-chrome-secure-shell/"/>
    <updated>2017-08-04T17:33:16+00:00</updated>
    <id>http://www.rosipov.com/blog/desktop-notifications-from-chrome-secure-shell</id>
    <content type="html"><![CDATA[<p>For the past year or two I&rsquo;ve been working in the cloud. I use Chrome <a href="https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?hl=en">Secure Shell</a> to connect to my machines, and it works rather well. In fact, I moved away from my work Linux/Mac laptops towards an <a href="http://amzn.to/2hv68Ck">HP Chromebook</a>, which fullfilled both requirements I had: a browser and a terminal. One thing I missed about a Linux machine though is lack of <code>notify-send</code>-like functionality, especially when working with long-running builds.</p>

<p>Yesterday I pinged hterm team for assistance with this matter, and turns out recent release of Secure Shell supports Chrome desktop notifications! Furthermore, two amazing engineers (thanks Andrew and Mike!) crafted an <a href="https://chromium-review.googlesource.com/c/601549/3/hterm/etc/hterm-notify.sh">hterm-notify</a> script, which propagates notifications to Chrome, and by extent to desktop!</p>

<p>I made a few tiny changes, mainly since I don&rsquo;t use <code>screen</code>, and tmux sets my <code>$TERM</code> to <code>screen-256color</code> for some reason:</p>

<pre><code>#!/bin/sh
# Copyright 2017 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Write an error message and exit.
# Usage: &lt;message&gt;
die() {
  echo "ERROR: $*"
  exit 1
}

# Send a notification.
# Usage: [title] [body]
notify() {
  local title="${1-}" body="${2-}"

  case ${TERM-} in
  screen*)  # This one's really tmux
    printf '\ePtmux;\e\e]777;notify;%s;%s\a\e\\' "${title}" "${body}"
    ;;
  *)        # This one's plain hterm
    printf '\e]777;notify;%s;%s\a' "${title}" "${body}"
    ;;
  esac
}

# Write tool usage and exit.
# Usage: [error message]
usage() {
  if [ $# -gt 0 ]; then
    exec 1&gt;&amp;2
  fi
  cat &lt;&lt;EOF
Usage: hterm-notify [options] &lt;title&gt; [body]

Send a notification to hterm.

Notes:
- The title should not have a semi-colon in it.
- Neither field should have escape sequences in them.
  Best to stick to plain text.
EOF

  if [ $# -gt 0 ]; then
    echo
    die "$@"
  else
    exit 0
  fi
}

main() {
  set -e

  while [ $# -gt 0 ]; do
    case $1 in
    -h|--help)
      usage
      ;;
    -*)
      usage "Unknown option: $1"
      ;;
    *)
      break
      ;;
    esac
  done

  if [ $# -eq 0 ]; then
    die "Missing message to send"
  fi
  if [ $# -gt 2 ]; then
    usage "Too many arguments"
  fi

  notify "$@"
}
main "$@"
</code></pre>

<p>Throwing this in as <code>~/bin/notify</code> (not forgetting to <code>chmod +x</code> and having <code>~/bin</code> in the <code>$PATH</code>) I can get a notification when a particular long running command is complete:</p>

<pre><code>sleep 30 &amp;&amp; notify Hooray "The sleep's done!"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Browsing MSSQL and Vertica from CLI]]></title>
    <link href="http://www.rosipov.com/blog/browsing-mssql-and-vertica-from-cli/"/>
    <updated>2016-09-28T18:51:31+00:00</updated>
    <id>http://www.rosipov.com/blog/browsing-mssql-and-vertica-from-cli</id>
    <content type="html"><![CDATA[<p>Notes to make sure I don&rsquo;t forget how to do this in the future. First, install
<code>mssql</code> and <code>vcli</code> tools:</p>

<pre><code>npm install -g sql-cli
pip install vcli
</code></pre>

<p>Encrypt desired database account passwords:</p>

<pre><code>mkdir -p ~/.passwd
echo '$PASSWORD' | gpg --use-agent -e &gt; ~/.passwd/$DB_ACCOUNT.gpg
</code></pre>

<p>Set up a set of aliases with the desired level of flexibility in <code>~/.bashrc</code> to
avoid typing too much:</p>

<pre><code>function _sql-helper-command {
  host=$1
  user=$2
  password=$3
  db=$4
  opt_query_file=$5

  if [ -z $opt_query_file ]; then
    mssql -s $host -u $user -p $password -d $db
  else
    mssql -s $host -u $user -p $password -d $db -q "`cat $opt_query_file`"
  fi
}

function _vsql-helper-command {
  host=$1
  user=$2
  password=$3

  vcli -h $host -U $user -w $password
}

# Usage: `sql` for interactive mode, `sql filename.sql` to execute a file.
function sql {
  opt_query_file=$1

  host='$SOME_HOST'
  user='$SOME_USER'
  password=`gpg --use-agent --quiet --batch -d ~/.passwd/$SOME_FILENAME.gpg`
  db='$SOME_DB'

  _sql-helper-command $host $user $password $db $opt_query_file
}

# Usage: `vsql $VERTICA_HOST`
function vsql {
  host=$1
  user=`whoami`
  password=`gpg --use-agent --quiet --batch -d ~/.passwd/$SOME_FILENAME.gpg`

  _vsql-helper-command $host $user $password
}
</code></pre>

<p>Replace <code>$SOME_USER</code>, <code>$SOME_HOST</code>, <code>$SOME_DB</code>, <code>$SOME_FILENAME</code> above with
specific user, host, DB, and filenames respectively. I usually make a bunch of
aliases for different environments/machines I use: <code>sql-prod</code>, <code>sql-dev</code>,
<code>sql-local</code> or <code>vsql-host1</code>, <code>vsql-host2</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Profiling slow bashrc]]></title>
    <link href="http://www.rosipov.com/blog/profiling-slow-bashrc/"/>
    <updated>2015-07-15T17:07:53+00:00</updated>
    <id>http://www.rosipov.com/blog/profiling-slow-bashrc</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently noticed that it takes a long time for my bash to load. I&rsquo;ve found
<a href="http://stackoverflow.com/a/5015179/2578489">following StackOverflow answer</a> to be useful, and I based my solution to find a
startup time hog in my <code>~/.bashrc</code> upon it.</p>

<p>First off, add following few lines to your <code>/etc/bash.bashrc</code>,
<code>~/.bash_profile</code>, or wherever you&rsquo;d like to begin tracing the script:</p>

<pre><code>PS4='+ $(date "+%s.%N")\011 '
exec 3&gt;&amp;2 2&gt;/tmp/bashstart.$$.log
set -x
</code></pre>

<p>And add following few lines where you want to stop the trace:</p>

<pre><code>set +x
exec 2&gt;&amp;3 3&gt;&amp;-
</code></pre>

<p>Now start your bash session (you can simply open a new terminal Window for
that). The above will create <code>/tmp/bashstart.&lt;PID&gt;.log</code>. To analyze it, I wrote
a little Python script:</p>

<pre><code>import argparse
import heapq

parser = argparse.ArgumentParser(description='Analyze bashstart log for speed.')
parser.add_argument('filename', help='often /tmp/bashstart.&lt;PID&gt;.log')
parser.add_argument('-n', default=20, help='number of results to show')
args = parser.parse_args()
filename, n = args.filename, int(args.n)

with open(filename, 'r') as f:
    q = []
    prev_time = None
    for line in f.readlines():
        line = line.split()
        if '+' not in line[0] or len(line) &lt; 3:
            continue
        text = ' '.join(line[2:])
        seconds, nanoseconds = line[1].split('.')
        time = int(nanoseconds)
        diff = time - prev_time if prev_time is not None else 0
        prev_time = time
        heapq.heappush(q, (diff, text))

for diff, text in heapq.nlargest(n, q):
    print float(diff) / 1000000000, 's:', text
</code></pre>

<p>Save it as <code>bashprofile.py</code>, and run it as follows (replace file name with an
appropriate):</p>

<pre><code>python bashprofile.py /tmp/bashstart.2831.log -n 20
0.050056909 s: _powerline_init_tmux_support
0.045323022 s: _powerline_setup_prompt
0.044722024 s: _powerline_setup_prompt
0.044423727 s: '[' -f /usr/local/google/home/ruslano/.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh ']'
0.044364097 s: '[' -f /usr/local/google/home/ruslano/.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh ']'
0.044137159 s: _powerline_init_tmux_support
0.015839574 s: __shell_name=bash
0.010850276 s: command which which
0.010105462 s: PS2='\[\]  \[\] \[\]'
0.010000598 s: PS3=' Select variant  '
0.009837956 s: complete -F _svn -o default -X '@(*/.svn|*/.svn/|.svn|.svn/)' svn
0.009767517 s: PS2='\[\]  \[\] \[\]'
0.0095753 s: PS3=' Select variant  '
0.007915565 s: other_utils=(ant automake autoreconf libtoolize make mount patch readlink)
0.00771205 s: for script in version functions/selector cd functions/cli cli override_gem
0.007008299 s: for gnu_util in '"${gnu_utils[@]}"'
0.00693653 s: complete -F _crow crow
0.006803049 s: complete -F _svn -o default -X '@(*/.svn|*/.svn/|.svn|.svn/)' svn
0.006672906 s: for script in version functions/selector cd functions/cli cli override_gem
0.005912399 s: for entry in '${scripts[@]}'
</code></pre>

<p>In my example, <a href="https://github.com/powerline/powerline">Powerline</a> turned out to be a massive hog. Looks like I&rsquo;ll
have to troubleshoot the speed or plain disable it.</p>

<p>Don&rsquo;t forget to remove the lines you added to your bash configuration files
after you&rsquo;re done profiling.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing cd bookmarks with apparix]]></title>
    <link href="http://www.rosipov.com/blog/managing-cd-bookmarks-with-apparix/"/>
    <updated>2015-02-21T00:25:45+00:00</updated>
    <id>http://www.rosipov.com/blog/managing-cd-bookmarks-with-apparix</id>
    <content type="html"><![CDATA[<p>A couple of months ago I discovered apparix: a set of commands which augment
<code>cd</code> with bookmarks. It really is an amazing feeling when you zap between
multiple directories far away just with a couple of keystrokes! Apparix
provides three commands I use daily: <code>to</code>, <code>bm</code>, and <code>apparix</code> (program
suggests aliasing last one to <code>als</code>). Here&rsquo;s how I use it:</p>

<pre><code>$ pwd
/Users/ruslan
$ apparix
--- portals
--- expansions
--- bookmarks
j dotfiles     /Users/ruslan/.dotfiles
j blog         /Users/ruslan/Projects/ruslanosipov.github.io
$ to blog
$ pwd
/Users/ruslan/Projects/ruslanosipov.github.io
$ cd source/_posts
$ bm posts
added: posts -&gt; /Users/ruslan/Projects/ruslanosipov.github.io/source/_posts
$ to dotfiles
$ pwd
/Users/ruslan/.dotfiles
$ to posts
$ pwd
/Users/ruslan/Projects/ruslanosipov.github.io/source/_posts
</code></pre>

<p>The example above is self explanatory: you can see how over the span of a year
apparix saves hours of navigating directories you frequent.</p>

<h2>Installation</h2>

<p>If you don&rsquo;t like reading manuals, installation might be a confusing. But in
reality it&rsquo;s straightforward, you just need to add some functions or aliases to
your shell&rsquo;s configuration file.</p>

<p>Install <code>apparix</code> using your favorite package manager, and then pipe examples
apparix offers into your shell&rsquo;s <code>rc</code> file.</p>

<pre><code>apparix --shell-examples &gt;&gt; ~/.bashrc
</code></pre>

<p>Open your <code>.bashrc</code> (or another corresponding configuration file), and pick the
preferred way of using apparix: you&rsquo;ll see functions for bash and aliases for
csh given as examples. Pick whatever works for your shell, source your <code>rc</code>
file, and you&rsquo;re all set!</p>

<p>Happy jumping!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ranger - the CLI file manager]]></title>
    <link href="http://www.rosipov.com/blog/ranger-the-cli-file-manager/"/>
    <updated>2015-02-09T03:33:16+00:00</updated>
    <id>http://www.rosipov.com/blog/ranger-the-cli-file-manager</id>
    <content type="html"><![CDATA[<p>Ranger is a lightweight but powerful file manager with Vi-like key bindings.
It shines at exploring file trees, looking for specific files, and performing
bulk operations on folders and files. Three column layout will be very similar
to Mac OS X users: center column shows contents of the current directory, left
column lists contents of a parent directory, and the right column contains
preview for the selected file or folder.</p>

<p><img src="/images/posts/ranger-file-preview.png" title="File preview screen in Ranger: parent directory in the left column, current directory in the center column, and selected file preview in the left column." ></p>

<p>Ranger supports movement with familiar to Vi users <code>h</code>, <code>j</code>, <code>k</code>, and <code>l</code> keys,
has internal command line which is invoked with <code>:</code>, as well as many other
features and key bindings similar to Vi. Another great selling point - Ranger
can be extended with custom commands and key bindings. Utility is written in
Python, therefore all the commands are nothing more than Python scripts.</p>

<p><img class="/images/posts/ranger-marking-files.png Marking files for deletion in Ranger.  Files highlighted in yellow will be deleted by executing" src="<code>:delete</code>&#8221; title=&#8221;command.&#8221; ></p>

<h2>Installation</h2>

<p>Ranger is easy to install and can be found in most public repositories, just
install <code>ranger</code> package using your favorite package manager. While you&rsquo;re at
it, you may want to install some external utilities to help Ranger properly
display file previews (list is taken from <a href="https://wiki.archlinux.org/index.php/ranger">ArchWiki page on Ranger</a>):</p>

<ul>
<li><code>atool</code> for archives.</li>
<li><code>highlight</code> for syntax highlighting.</li>
<li><code>libcaca</code> (<code>img2txt</code>) for image previews in ASCII.</li>
<li><code>lynx</code>, <code>w3m</code> or <code>elinks</code> for HTML.</li>
<li><code>mediainfo</code> or <code>perl-image-exiftool</code> for media file information.</li>
<li><code>poppler</code> (<code>pdftotext</code>) for PDF.</li>
<li><code>transmission-cli</code> for BitTorrent information.</li>
<li><code>w3m</code> for image previews.</li>
</ul>


<p>After all the dependencies are installed, quickly start up <code>ranger</code>, exit it
with <code>q</code>, and run <code>ranger --copy-config=all</code> to generate configuration files in
<code>~/.config/ranger</code>.</p>

<h2>Usage</h2>

<p>Here are a few of the key bindings and commands I found useful:</p>

<ul>
<li>Use spacebar to select files one by one. By selecting multiple files, you can
perform bulk operations on them. Use <code>V</code> to perform visual selection.
Lowercase <code>v</code> reverses current selection. For instance, you can run <code>:delete</code>
after selecting multiple files and folders.</li>
<li>As mentioned above, execute <code>:delete</code> to remove currently selected file (or
files).</li>
<li>To fullscreen a preview window, hit <code>i</code>. Hit <code>i</code> again to return the preview
window to it&rsquo;s normal size.</li>
<li>Vi&rsquo;s <code>gg</code> and <code>G</code> allow you to jump to the top and bottom of the file list
respectively.</li>
<li>Hit <code>zh</code> to toggle hidden files display.</li>
<li>As in Vim, <code>/</code> searches for a file in a current buffer, while <code>n</code> and <code>N</code> let
you navigate to the next and previous matches respectively.</li>
<li>Similarly, <code>:filter</code> allows you to only limit your view to the files matching
a pattern. It&rsquo;s also interactive - changes are applied as you type.</li>
</ul>


<p>If you&rsquo;re an avid Vim user, you&rsquo;ll find using Ranger surprisingly intuitive.
Otherwise you might get confused and scared away, probably for a good reason.
Ranger is designed to provide Vi-like feel for file browsing, and it does that
job well.</p>
]]></content>
  </entry>
  
</feed>
