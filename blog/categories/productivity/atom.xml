<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: productivity | Ruslan Osipov]]></title>
  <link href="http://www.rosipov.com/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://www.rosipov.com/"/>
  <updated>2014-12-16T21:19:47-08:00</updated>
  <id>http://www.rosipov.com/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beyond grep]]></title>
    <link href="http://www.rosipov.com/blog/beyond-grep/"/>
    <updated>2014-09-21T12:18:31-07:00</updated>
    <id>http://www.rosipov.com/blog/beyond-grep</id>
    <content type="html"><![CDATA[<p>I search for things a lot, especially in my code. Or even worse - someone else&rsquo;s
code. For years <code>grep</code> served as an amazing tool for this: fast, simple, and
yet powerful. That was until I discovered <code>ack</code> for myself. An incredibly easy
to use <code>grep</code> implementation built to work with large (or not really) code
trees.</p>

<p>A lot can be said to enforce superiority of <code>ack</code> over <code>grep</code> when it comes to
working with code, and it&rsquo;s all said here: <a href="http://beyondgrep.com/why-ack/">ack&rsquo;s features</a>.</p>

<p>Amazing thing is - <code>ack</code> doesn&rsquo;t even need a tutorial. Learning progression is
natural and &ldquo;just happens&rdquo; by researching necessary use cases as the need
arises (<code>ack</code> has a great manual entry).</p>

<p>Here&rsquo;s a typical use example for <code>ack</code>:</p>

<pre><code>ack --shell 'gr[ae]y'
</code></pre>

<p>Searches all shell script files in the current code tree for any occurrences of
&ldquo;gray&rdquo; or &ldquo;grey&rdquo;. It will search <code>.sh</code>, <code>.zsh</code>, and just about dot-anything;
<code>ack</code> will even check shebang lines for you.</p>

<p>Ease of use, the fact that it&rsquo;s ready to use out of the box, extensive file
types, native support for Perl&rsquo;s regular expressions: <code>ack</code> does really good
job at searching through code.</p>

<p>Download it from <a href="http://beyondgrep.com">Beyond grep</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective search with Mutt]]></title>
    <link href="http://www.rosipov.com/blog/effective-search-with-mutt/"/>
    <updated>2014-08-02T13:32:51-07:00</updated>
    <id>http://www.rosipov.com/blog/effective-search-with-mutt</id>
    <content type="html"><![CDATA[<p>I generally don&rsquo;t use Mutt for everyday emails - I find smooth non-monospace
fonts to be more pleasant to the eye, and the visualization my browser offers
is hard to beat. The main use-case for me is composing long emails: Mutt lets
me use my favorite text editor, which speeds up the editing of long and
carefully composed responses.</p>

<p>Recently I added a new use-case to my work flow: searching through emails.
Mutt has a powerful built-in regular-expressions engine, which is something the
web Gmail client is missing.</p>

<p>Mutt has two ways of finding things: search and limit. &ldquo;Search&rdquo; just jumps from
one matching letter to another, something along the lines what <code>/</code> command does
in <code>less</code>, <code>more</code>, or <code>vim</code>. &ldquo;Limit&rdquo; is something I am more used to with the
web client, and it&rsquo;s what I use the most.</p>

<h2>Using limits</h2>

<p>Limit works the way regular search works in Gmail: it limits the view to
conversations matching the query. Hit <code>l</code>, and enter a search query.</p>

<p>By default, Mutt will only search through the subject lines, but this behaviour
can be changed by prefixing the command with a special identifier. For
instance, searching for <code>~b oranges</code> will limit the view to all the messages
which mention &ldquo;oranges&rdquo; in the message body. Here are a couple I use the most:</p>

<ul>
<li><code>~b</code> &ndash; Search in the message body.</li>
<li><code>~B</code> &ndash; Search in the whole message.</li>
<li><code>~f</code> &ndash; Message originated from the user.</li>
<li><code>~Q</code> &ndash; Messages which have been replied to.</li>
</ul>


<p>You can find full list in the <a href="http://www.mutt.org/doc/manual/manual-4.html#ss4.2">Mutt Advanced Usage Manual</a>.</p>

<p>Patterns can be chained to produce narrower results: <code>~f joe ~B apples</code>. This
will search for a message mentioning &ldquo;apples&rdquo; coming from an author whose name
contains &ldquo;joe&rdquo;.</p>

<h3>Caching mail for faster search</h3>

<p>You may find that searching whole messages is slow, especially if you have more
than a couple hundred messages to search through. That&rsquo;s because by default
Mutt does not store messages for local use. This can be changed by specifying
<code>header_cache</code> and <code>message_cachedir</code> variables in your <code>.muttrc</code> file:</p>

<pre><code>set header_cache     = "$HOME/Mail"
set message_cachedir = "$HOME/Mail"
</code></pre>

<p>Now, after you perform your first search, it will cache every message you open,
making all the consecutive searches lightning fast.</p>

<p>Oh, and keep in mind, Mutt stores messages and headers in plain text, so make
sure the cache directory is not shared with anyone but yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Three favorite bash tricks]]></title>
    <link href="http://www.rosipov.com/blog/three-favorite-bash-tricks/"/>
    <updated>2014-07-24T18:41:10-07:00</updated>
    <id>http://www.rosipov.com/blog/three-favorite-bash-tricks</id>
    <content type="html"><![CDATA[<p>I spend most of my development time in the shell - be it editing text with Vim
or executing various console commands. I have quite a number of tricks in my
daily repertoire, and I would like to share three tips today.</p>

<h2>Edit current command with a text editor</h2>

<p>I often end up having to change a long command I just typed, and using arrow
keys to get to the correct spot is not favorable. Bash has the feature which
lets you edit current command in a text editor of your choice. Hit <code>Ctrl + x</code>,
<code>Ctrl + e</code> (or <code>Ctrl + x + e</code>), and you will be dropped into your text editor.
Now you are able to edit the command, and it will be executed as soon as your
write the file and exit the editor.</p>

<p>You can use an editor of your choice by adding following line to your <code>.bashrc</code>
file:</p>

<pre><code>export EDITOR=vim
</code></pre>

<p>Replace <code>vim</code> with the name of your favorite editor.</p>

<p>Update: It looks like for some machines setting <code>EDITOR</code> variable is not
enough. In this case, you also need to set <code>VISUAL</code> environment variable.</p>

<h2>Edit recent command</h2>

<p>You can edit your recent commands in a text editor of your choice by executing
<code>fc beginning_of_the_command</code>. For instance, if you run <code>fc l</code>, you will open
most recent command starting with the letter &ldquo;l&rdquo;.</p>

<p>You can execute <code>fc</code> without any arguments to edit last executed command.</p>

<h2>Bash history autocomplete</h2>

<p>Another great feature - &ldquo;reverse intelligent search&rdquo;. If you hit <code>Ctrl + r</code> in
your shell, you&rsquo;ll be greeted by the following prompt:</p>

<pre><code>(reverse-i-search)`':
</code></pre>

<p>Start typing a part of the command from your history, and you&rsquo;ll see suggestions
popping up. Hit <code>Enter</code> to pick the command (you&rsquo;ll be able to edit it before
executing), or push <code>Ctrl + g</code> to return back.</p>

<p>Like any of these tips? Have some of your own? Don&rsquo;t hesitate to share those in
the comments section down below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distraction-free writing with VimRoom]]></title>
    <link href="http://www.rosipov.com/blog/distraction-free-writing-with-vimroom/"/>
    <updated>2014-07-23T14:46:20-07:00</updated>
    <id>http://www.rosipov.com/blog/distraction-free-writing-with-vimroom</id>
    <content type="html"><![CDATA[<p>Recently I&rsquo;ve been writing much more than I used to: long emails, software
documentation, personal Wiki, keeping work journal, blogging, writing
challenges&hellip; Luckily enough, I do all of this writing in Vim. But sometimes
writing prose in Vim might feel a bit unnatural, especially if you have a wide
screen: text will be on the very left side of the screen, or (if <code>textwrap</code> is
not enabled) you&rsquo;ll end up with lines hundreds of characters long. And overall,
editing text in Vim sometimes might feel a bit clunky - with all the extra
information and high-tech (or low-tech, depending on your perspective) look.</p>

<p>I found a simple, yet sufficient solution for this issue: <a href="http://projects.mikewest.org/vimroom/">VimRoom</a>. It&rsquo;s a
Vim plugin which enters distraction-free writing mode, by centering the
80-character block of text on your screen. It&rsquo;s highly configurable, and I
found it to look especially pleasing on vertical monitors (which I prefer to
use for writing). It looks presentable even on smaller screens though, here&rsquo;s a
screenshot:</p>

<p><img src="/images/vimroom-screenshot.png" title="VimRoom plugin in use." ></p>

<p>Install the plugin (use a package manager like Vundle or <a href="http://www.rosipov.com/blog/vim-pathogen-and-git-submodules/">Pathogen</a> to
simplify the task) and add a following line to your <code>.vimrc</code>:</p>

<pre><code>nnoremap &lt;Leader&gt;vr :VimroomToggle&lt;CR&gt;
</code></pre>

<p>Now, hit <code>&lt;Leader&gt;vr</code> to drop in/out of the VimRoom mode (<code>&lt;Leader</code> is a
backslash <code>\</code> character by default).</p>

<p>GitHub link: <a href="https://github.com/mikewest/vimroom">https://github.com/mikewest/vimroom</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Personal wiki with vimwiki]]></title>
    <link href="http://www.rosipov.com/blog/personal-wiki-with-vimwiki/"/>
    <updated>2014-07-07T21:14:21-07:00</updated>
    <id>http://www.rosipov.com/blog/personal-wiki-with-vimwiki</id>
    <content type="html"><![CDATA[<p>I recently found an interesting way to organize random bits of information: a
personal Wiki. It&rsquo;s a great idea to have data repository shared between your
machines: important notes about people, conversations, events, tasks you&rsquo;ve
accomplished, thoughts, and a hundred of little pieces of knowledge which don&rsquo;t
belong anywhere else. There is plenty of software out there which lets you set
up a personal Wiki, and some of it is very lightweight and well polished.
However, I prefer to do most of my editing and writing in Vim. As tip #22 from
&ldquo;The Pragmatic Programmer&rdquo; states:</p>

<blockquote><p>Use a single editor well</p>

<p>We think it is better to know one editor very well, and use it for all
editing tasks: code, documentation, memos, system administration, and so
on. Without a single editor, you face a potential modern day Babel of
confusion.</p></blockquote>

<p>I fully agree with the above statement and I try to use one editor for the
majority of tasks which require typing, without having to remember which editor
contains certain features, and which doesn&rsquo;t. That&rsquo;s one of the main reasons I
went with <code>vimwiki</code> - a lightweight and clean personal Wiki with it&rsquo;s own
Wiki-style markdown. Oh, <code>vimwiki</code> also subscribes to another tip from &ldquo;The
Pragmatic Programmer&rdquo;:</p>

<blockquote><p>Keep knowledge in plain text</p></blockquote>

<p>The <code>vimwiki</code> plugin has a number of interesting and useful features:</p>

<ul>
<li>Memorable mappings for moving in and out of Wikis. Hit <code>&lt;leader&gt;ww</code> and you
are on the home page of your Wiki. The <code>&lt;leader&gt;wt</code> will open the Wiki in a
new tab: the rest of the mappings are as intuitive.</li>
<li>Multiple Wikis support: really handy if you have a number of separate
projects for which you want to keep separate entries.</li>
<li>Diary-like quick notes. You can create an instant page for today by hitting
<code>&lt;leader&gt;w&lt;leader&gt;w</code>. Combination <code>&lt;leader&gt;wi</code> brings you to a diary home
page, and <code>&lt;leader&gt;w&lt;leader&gt;i</code> re-indexes the diary entries.</li>
<li>Easy link creation: hit enter on a word and it will turn into a link to
another page. Hitting enter on a link will transport you to the destination
page. Simply surrounding text with double square brackets (<code>[[]]</code>) works as
well.</li>
<li>Navigation: enter to follow a link, backspace to go back.</li>
<li>You can convert all your records into html by executing <code>:VimwikiAll2HTML</code>.</li>
<li>Extensive and well written help file. Just run <code>:help vimwiki</code> and start
reading.</li>
</ul>


<p>The list can go on forever, but these are the features I found to be the most
useful.</p>

<p>In order to enjoy synchronization between all my machines, I hosted my Wiki in
a Dropbox folder - <code>vimwiki</code> lets you specify locations from each one of your
Wikis.</p>

<pre><code>let g:vimwiki_list = [{'path': '$HOME/Dropbox/wiki'}]
</code></pre>

<p>Download it from the GitHub: <a href="https://github.com/vimwiki/vimwiki">https://github.com/vimwiki/vimwiki</a>.</p>
]]></content>
  </entry>
  
</feed>
