<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: productivity | Ruslan Osipov]]></title>
  <link href="http://www.rosipov.com/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://www.rosipov.com/"/>
  <updated>2015-06-01T06:30:45-07:00</updated>
  <id>http://www.rosipov.com/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My experience switching to buffers]]></title>
    <link href="http://www.rosipov.com/blog/my-experience-switching-to-buffers/"/>
    <updated>2015-06-01T06:28:42-07:00</updated>
    <id>http://www.rosipov.com/blog/my-experience-switching-to-buffers</id>
    <content type="html"><![CDATA[<p>About a year ago I stumbled upon an article explaining the difference between
Vim tabs and buffers. The author emphasized that tabs are merely window
layouts, and therefore one-file-per-tab idea I was used to at the moment just
wasn&rsquo;t proper. Instead, author suggested the use of buffers to switch between
multiple files. I decided to give it a shot, and here are some ideas I would
like to share after switching to the use of buffers.</p>

<p>Buffers are open files, but they&rsquo;re not necessarily visible at any given
moment. In Vim, windows are not linked to any particular buffer, so you can
easily cycle through buffers from within any window.</p>

<p>At it&rsquo;s basics, you only need few commands for operating buffers:</p>

<ul>
<li>Use <code>:ls</code> to list all buffers for this session.</li>
<li>To move between next and previous buffers use <code>:bn</code> and <code>:bp</code> respectively.</li>
<li>Use <code>:bN</code>, where <code>N</code> is a buffer number to jump to a specific buffer.</li>
<li>Get in a habit of closing buffers you will not use with <code>:bd</code>.</li>
</ul>


<p><img src="/images/vim-list-buffers.png" title="A list of open buffers in Vim." ></p>

<p>The hardest thing about stopping to use tabs and switching to buffers instead
is not having the visual aid: I was used to having a list of files always
available at a glance, at the top of my screen. To check what files I&rsquo;m working
on now - I have to hit four keys: <code>:ls</code> (fourth being &ldquo;Enter&rdquo;).</p>

<p>Not surprisingly, this taught me to be more mindful about my editing
experience. I usually have a clear structure of the files I&rsquo;m working on in my
head. And if the list is getting to long to easily remember, then I&rsquo;m probably
doing something wrong: time to take a break and reset my Vim session.</p>

<p>The experience overall reminded me of my recent switch to blank keyboard key
caps: with no inscriptions to aid you, I first felt a bit at loss, especially
with they keys I couldn&rsquo;t find without looking: like function keys or special
symbols. But after some time with the blank key caps, I improved my typing
skill, and know where even the most obscure characters hide. The switch helped
me to improve my typing experience overall.</p>

<p>With Vim, it&rsquo;s a similar story. After getting past the initial confusion, I
achieved high level of awareness about my editing sessions. It didn&rsquo;t make the
editing process any faster, but instead much more satisfying.</p>

<p>But you already new that, since Vim isn&rsquo;t really about speed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing cd bookmarks with apparix]]></title>
    <link href="http://www.rosipov.com/blog/managing-cd-bookmarks-with-apparix/"/>
    <updated>2015-02-20T16:25:45-08:00</updated>
    <id>http://www.rosipov.com/blog/managing-cd-bookmarks-with-apparix</id>
    <content type="html"><![CDATA[<p>A couple of months ago I discovered apparix: a set of commands which augment
<code>cd</code> with bookmarks. It really is an amazing feeling when you zap between
multiple directories far away just with a couple of keystrokes! Apparix
provides three commands I use daily: <code>to</code>, <code>bm</code>, and <code>apparix</code> (program
suggests aliasing last one to <code>als</code>). Here&rsquo;s how I use it:</p>

<pre><code>$ pwd
/Users/ruslan
$ apparix
--- portals
--- expansions
--- bookmarks
j dotfiles     /Users/ruslan/.dotfiles
j blog         /Users/ruslan/Projects/ruslanosipov.github.io
$ to blog
$ pwd
/Users/ruslan/Projects/ruslanosipov.github.io
$ cd source/_posts
$ bm posts
added: posts -&gt; /Users/ruslan/Projects/ruslanosipov.github.io/source/_posts
$ to dotfiles
$ pwd
/Users/ruslan/.dotfiles
$ to posts
$ pwd
/Users/ruslan/Projects/ruslanosipov.github.io/source/_posts
</code></pre>

<p>The example above is self explanatory: you can see how over the span of a year
apparix saves hours of navigating directories you frequent.</p>

<h2>Installation</h2>

<p>If you don&rsquo;t like reading manuals, installation might be a confusing. But in
reality it&rsquo;s straightforward, you just need to add some functions or aliases to
your shell&rsquo;s configuration file.</p>

<p>Install <code>apparix</code> using your favorite package manager, and then pipe examples
apparix offers into your shell&rsquo;s <code>rc</code> file.</p>

<pre><code>apparix --shell-examples &gt;&gt; ~/.bashrc
</code></pre>

<p>Open your <code>.bashrc</code> (or another corresponding configuration file), and pick the
preferred way of using apparix: you&rsquo;ll see functions for bash and aliases for
csh given as examples. Pick whatever works for your shell, source your <code>rc</code>
file, and you&rsquo;re all set!</p>

<p>Happy jumping!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ranger - the CLI file manager]]></title>
    <link href="http://www.rosipov.com/blog/ranger-the-cli-file-manager/"/>
    <updated>2015-02-08T19:33:16-08:00</updated>
    <id>http://www.rosipov.com/blog/ranger-the-cli-file-manager</id>
    <content type="html"><![CDATA[<p>Ranger is a lightweight but powerful file manager with Vi-like key bindings.
It shines at exploring file trees, looking for specific files, and performing
bulk operations on folders and files. Three column layout will be very similar
to Mac OS X users: center column shows contents of the current directory, left
column lists contents of a parent directory, and the right column contains
preview for the selected file or folder.</p>

<p><img src="/images/ranger-file-preview.png" title="File preview screen in Ranger: parent directory in the left column, current directory in the center column, and selected file preview in the left column." ></p>

<p>Ranger supports movement with familiar to Vi users <code>h</code>, <code>j</code>, <code>k</code>, and <code>l</code> keys,
has internal command line which is invoked with <code>:</code>, as well as many other
features and key bindings similar to Vi. Another great selling point - Ranger
can be extended with custom commands and key bindings. Utility is written in
Python, therefore all the commands are nothing more than Python scripts.</p>

<p><img class="/images/ranger-marking-files.png Marking files for deletion in Ranger.  Files highlighted in yellow will be deleted by executing" src="<code>:delete</code>&#8221; title=&#8221;command.&#8221; ></p>

<h2>Installation</h2>

<p>Ranger is easy to install and can be found in most public repositories, just
install <code>ranger</code> package using your favorite package manager. While you&rsquo;re at
it, you may want to install some external utilities to help Ranger properly
display file previews (list is taken from <a href="https://wiki.archlinux.org/index.php/ranger">ArchWiki page on Ranger</a>):</p>

<ul>
<li><code>atool</code> for archives.</li>
<li><code>highlight</code> for syntax highlighting.</li>
<li><code>libcaca</code> (<code>img2txt</code>) for image previews in ASCII.</li>
<li><code>lynx</code>, <code>w3m</code> or <code>elinks</code> for HTML.</li>
<li><code>mediainfo</code> or <code>perl-image-exiftool</code> for media file information.</li>
<li><code>poppler</code> (<code>pdftotext</code>) for PDF.</li>
<li><code>transmission-cli</code> for BitTorrent information.</li>
<li><code>w3m</code> for image previews.</li>
</ul>


<p>After all the dependencies are installed, quickly start up <code>ranger</code>, exit it
with <code>q</code>, and run <code>ranger --copy-config=all</code> to generate configuration files in
<code>~/.config/ranger</code>.</p>

<h2>Usage</h2>

<p>Here are a few of the key bindings and commands I found useful:</p>

<ul>
<li>Use spacebar to select files one by one. By selecting multiple files, you can
perform bulk operations on them. Use <code>V</code> to perform visual selection.
Lowercase <code>v</code> reverses current selection. For instance, you can run <code>:delete</code>
after selecting multiple files and folders.</li>
<li>As mentioned above, execute <code>:delete</code> to remove currently selected file (or
files).</li>
<li>To fullscreen a preview window, hit <code>i</code>. Hit <code>i</code> again to return the preview
window to it&rsquo;s normal size.</li>
<li>Vi&rsquo;s <code>gg</code> and <code>G</code> allow you to jump to the top and bottom of the file list
respectively.</li>
<li>Hit <code>zh</code> to toggle hidden files display.</li>
<li>As in Vim, <code>/</code> searches for a file in a current buffer, while <code>n</code> and <code>N</code> let
you navigate to the next and previous matches respectively.</li>
<li>Similarly, <code>:filter</code> allows you to only limit your view to the files matching
a pattern. It&rsquo;s also interactive - changes are applied as you type.</li>
</ul>


<p>If you&rsquo;re an avid Vim user, you&rsquo;ll find using Ranger surprisingly intuitive.
Otherwise you might get confused and scared away, probably for a good reason.
Ranger is designed to provide Vi-like feel for file browsing, and it does that
job well.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Power of the command line]]></title>
    <link href="http://www.rosipov.com/blog/power-of-the-command-line/"/>
    <updated>2015-02-06T13:13:49-08:00</updated>
    <id>http://www.rosipov.com/blog/power-of-the-command-line</id>
    <content type="html"><![CDATA[<p><em>Disclaimer: I am not advocating any specific tools or methodologies, but
sharing a workflow I find to be efficient and pleasant.</em></p>

<p>I am a huge fan of working with CLI applications. I use Vim for editing code,
composing emails, and various kinds of writing. When I have to manipulate huge
amounts of email, I use Mutt: it&rsquo;s intuitive tagging and regular expression
engine are extremely useful for the task. I employ <code>ack</code>, <code>awk</code>, <code>grep</code>, and
<code>sed</code> - Linux utilities which allow for precise and fast text manipulation.</p>

<p>However, I would not use CLI browsers like <code>elinks</code> or <code>w3m</code>, and the idea of
reading every email in Mutt gives me the creeps. I love the visualization web
browser offers, something text-based prompt is not able to provide. And it
doesn&rsquo;t have to.</p>

<p>There are two components to most of the tasks performed on a computer: analyzing
output and entering input. Certain tasks employ one component more than the
other. In most modern applications it&rsquo;s rare to have both solid control from
the user perspective and a pleasant informative UI. With increased visual
component, it&rsquo;s more time consuming to make the application do what you need,
especially if your needs are esoteric. With more editing power, visual display
becomes less complex in order to make editing tasks easier.</p>

<h2>Where visual tools fall short</h2>

<p>What is the alternative? Using multiple programs with different levels of
control to accomplish one task: to edit text. Each of the programs excels in
it&rsquo;s own field: word processing software allows for beautiful fonts and document
presentation, IDE lets you access aggregated meta information about your
application. But most of the IDEs and word processors lack the powerful tools
needed to manipulate the foundation of what user is working with - plain text.</p>

<h2>Ode to plain text</h2>

<p>I spend a lot of time writing and editing plain text. Be it source code, emails,
documentation, or even blog posts. These tasks take up significant amount of my
day, and it is only logical to substitute some of the visual presentation
capabilities for effectiveness.</p>

<p>It is hard to mentally process data which is not explicitly and unambiguously
visible: different levels of headings, hidden meta information. Unlike more
obscuring formats, plain text is all there is - it has nothing to hide. If you
don&rsquo;t see it - it&rsquo;s not there. If you do see it - you know exactly what it is.</p>

<p>One of my favorite tips from &ldquo;<a href="http://amzn.to/1yRe6Th">Pragmatic Programmer</a>&rdquo; goes:</p>

<blockquote><p>Use a single editor well</p></blockquote>

<p>So I learned one editor well, and now I use it for all my writing and editing
needs. I don&rsquo;t have to jump between IDE, browser, and office software. Most of
the text I edit is manipulated with one editor. There is only one set of key
bindings to know, one skill to master and hone. Fast, without any additional
thought, using single text editor and all of it&rsquo;s powerful features is imprinted
in muscle memory. One less task to worry about.</p>

<p>I write my documents in Markdown format, and later convert them to the desired
output using <code>pandoc</code>: be it an HTML page, PDF, or a Microsoft Word document. I
use Vim, so I can rearrange paragraphs or manipulate lines within a couple of
keystrokes. Since I spend so much time editing text, I also touch type, which
makes me even more effective at the given task.</p>

<h2>Harness the power of the command line</h2>

<p>When it comes to bulk manipulating files or working with version control -
there is no better candidate then command line applications. There&rsquo;s no need to
go through a number of obscure menus, ticking and unticking checkboxes, and
hoping that your desired result can be achieved with a program&rsquo;s GUI.</p>

<p>Let&rsquo;s look at a few scenarios some users face in their daily workflow.</p>

<h3>Creating a backup</h3>

<p>With GUI, you&rsquo;d have to take multiple steps:</p>

<ol>
<li>Right click <code>file</code>.</li>
<li>Left click on &ldquo;Copy&rdquo;.</li>
<li>Right click on some empty space.</li>
<li>Left click on &ldquo;Paste&rdquo;.</li>
<li>Right click on a newly created copy.</li>
<li>Left click on &ldquo;Rename&rdquo;.</li>
<li>Switch to a keyboard.</li>
<li>Type <code>file.bak</code>.</li>
</ol>


<p>The above steps can be sped up using shortcuts like <code>C-c</code> or <code>C-v</code>, but not by
much. Here&rsquo;s an alternative in bash:</p>

<pre><code>cp file{,.bak}
</code></pre>

<p>While first variant would do great for a novice or a casual user - the second
method would be much more preferred by an experienced user whose concern is
speed.</p>

<h3>Recursively bulk replacing text in a directory</h3>

<p>Let&rsquo;s assume we want to do a bulk replace text in a directory and all it&rsquo;s
subdirectories. We have our trusted IDE, let&rsquo;s assume this IDE is already
configured to work with a desired directory.</p>

<ol>
<li>Open your IDE.</li>
<li>Select &ldquo;Edit&rdquo; menu.</li>
<li>Select &ldquo;Find and Replace&rdquo; submenu.</li>
<li>Click on a &ldquo;Find&rdquo; input field.</li>
<li>Switch to a keyboard.</li>
<li>Type <code>function_to_replace</code>.</li>
<li>Switch to a mouse.</li>
<li>Click on &ldquo;Replace&rdquo; input field.</li>
<li>Switch to a keyboard.</li>
<li>Type <code>new_function_name</code>.</li>
<li>Switch to a mouse.</li>
<li>Enable &ldquo;Search in subdirectories&rdquo; checkbox.</li>
<li>Click &ldquo;OK&rdquo;.</li>
</ol>


<p>Again, this can be shortened a bit with some keyboard shortcuts, but not by
much. You still have to switch between keyboard and a mouse a total of 4 times,
and you still have to click through all the menus. This does get time consuming
if you do this often. Now let&rsquo;s try to perform the same task in command line:</p>

<pre><code>find . -type f | xargs sed -i 's/function_to_replace/new_function_name/g'
</code></pre>

<p>Much faster, if you&rsquo;re able to memorize the structure. And remembering what the
commands do is much easier than it looks. Especially with the help of <code>man</code> or,
even better, <code>bro</code> (see <a href="http://bropages.org">http://bropages.org</a> for latter).</p>

<p>The above example demonstrates one of the biggest advantages of command line
interfaces: an ability to redirect an output of one program into another,
chaining the tools together. In this example, we first get a list of all files
use <code>find</code> tool, and then run <code>sed</code> tool on each of those files in order to
replace the text.</p>

<p>An output from any CLI tool can be fed into any other CLI tool. This allows for
countless possibilities and high adaptability to unscripted scenarios.</p>

<h2>Is it worth learning CLI tools over their GUI counterparts?</h2>

<p>This depends on what your intentions are. If you&rsquo;re a power user who writes and
edits a lot of text or manipulates bulk amounts of text on a daily basis - than
it&rsquo;s definitely worth it. Time spent learning these tools will pay off. But if
you&rsquo;re a casual user whose needs end with writing an occasional email or two -
then you probably don&rsquo;t need to worry about this.</p>

<p>Hell, if you&rsquo;ve read this far - this means you&rsquo;re the former case. I can
practically guarantee that you will benefit from employing command line tools
and modal editors over their GUI counterparts.</p>

<p>I&rsquo;ve put together a table for comparison between two. Indeed, there are
different times when either GUI or CLI tools excel:</p>

<table>
<thead>
<tr>
<th> Factor                            </th>
<th> CLI </th>
<th> GUI </th>
</tr>
</thead>
<tbody>
<tr>
<td> Ability to combine/chain tools    </td>
<td> Yes </td>
<td> No  </td>
</tr>
<tr>
<td> Easy to learn                     </td>
<td> No  </td>
<td> Yes </td>
</tr>
<tr>
<td> Efficient for a novice user       </td>
<td> No  </td>
<td> Yes </td>
</tr>
<tr>
<td> Efficient for an experienced user </td>
<td> Yes </td>
<td> No  </td>
</tr>
<tr>
<td> Good for occasional use           </td>
<td> No  </td>
<td> Yes </td>
</tr>
<tr>
<td> Good for repetitive tasks         </td>
<td> Yes </td>
<td> No  </td>
</tr>
<tr>
<td> Presents visual information well  </td>
<td> No  </td>
<td> Yes </td>
</tr>
</tbody>
</table>


<p>As you can see - both CLI and GUI programs have their pluses and minuses. CLI
tools seem to appeal to experienced users, while GUI tools are great for novice
users and do excel in representing visual information. No matter what kind of
interface you prefer, it&rsquo;s crucially important to use the right tool for the job.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom templates in vimwiki]]></title>
    <link href="http://www.rosipov.com/blog/custom-templates-in-vimwiki/"/>
    <updated>2015-02-05T10:40:33-08:00</updated>
    <id>http://www.rosipov.com/blog/custom-templates-in-vimwiki</id>
    <content type="html"><![CDATA[<p>I got myself into a habit of using vimwiki for the past year: it helps me to
keep track of random bits of information, work and project notes, as well as
daily goals and achievements. You can read more about vimwiki in an article I
wrote a while back: &ldquo;<a href="http://www.rosipov.com/blog/personal-wiki-with-vimwiki/">Personal wiki with vimwiki</a>&rdquo;.</p>

<p><img src="/images/vimwiki-workflow-habits.png" title="HTML page generated by vimwiki with a custom navigation bar." ></p>

<p>One of vimwiki&rsquo;s features I really like is an ability to convert whole wiki to
HTML with a single command: <code>:VimwikiAll2HTML</code>. There is one annoyance though:
HTML vimwiki pages don&rsquo;t have any navigation elements: the only way to navigate
between pages is by clicking through links within a page or using browser&rsquo;s
&ldquo;back&rdquo; button.</p>

<p>Luckily, vimwiki has a setting which allows using custom templates for
generating HTML. Assuming your wiki is in <code>$HOME/Dropbox/wiki</code> (can be anywhere
else though), make following changes to your <code>.vimrc</code>:</p>

<pre><code>let g:vimwiki_list = [{
  \ 'path': '$HOME/Dropbox/wiki',
  \ 'template_path': '$HOME/Dropbox/wiki/templates',
  \ 'template_default': 'default',
  \ 'template_ext': '.html'}]
</code></pre>

<p>After that, create a <code>$HOME/Dropbox/wiki/templates/default.html</code> using
<code>vimwiki/autoload/vimwiki/default.tpl</code> as a base. I added simple navigation bar
to my default template:</p>

<pre><code>&lt;html&gt;
&lt;head&gt;
    &lt;link rel="Stylesheet" type="text/css" href="%root_path%style.css" /&gt;
    &lt;title&gt;%title%&lt;/title&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;a href="%root_path%index.html"&gt;Index&lt;/a&gt; |
    &lt;a href="%root_path%diary/diary.html"&gt;Diary&lt;/a&gt;
    &lt;hr&gt;
    &lt;div class="content"&gt;
    %content%
    &lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Now it&rsquo;s much easier to jump between wiki entries. Of course, customization
doesn&rsquo;t end there: you can change styles, add JavaScript and make your wiki all
fancy and advanced.</p>
]]></content>
  </entry>
  
</feed>
