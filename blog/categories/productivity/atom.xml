<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: productivity | Ruslan Osipov]]></title>
  <link href="http://www.rosipov.com/blog/categories/productivity/atom.xml" rel="self"/>
  <link href="http://www.rosipov.com/"/>
  <updated>2020-05-04T15:47:09+00:00</updated>
  <id>http://www.rosipov.com/</id>
  <author>
    <name><![CDATA[Ruslan Osipov]]></name>
    <email><![CDATA[ruslan@rosipov.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Adjusting to working from home]]></title>
    <link href="http://www.rosipov.com/blog/adjusting-to-wfh/"/>
    <updated>2020-05-04T17:00:00+00:00</updated>
    <id>http://www.rosipov.com/blog/adjusting-to-wfh</id>
    <content type="html"><![CDATA[<p>Like many, I moved to working from home during the COVID-19 pandemic. Parts of California enacted shelter-in-place order back in March, and it&rsquo;s been over a month and a half since then. I briefly worked from home back in 2013 as a freelancer - and I really got the whole work/life balance thing wrong. So this time around I&rsquo;ve decided to approach remote work with a plan.</p>

<p>My day begins around 7 or 8 am, without too much deviation from schedule. I used to bike to work before the pandemic, and I try to head out for a 30 minute ride in a morning a few days a week. There aren&rsquo;t a lot of people out early, and I love starting my day with some light cardio.</p>

<p>I share breakfast and coffee with my partner, often while catching up on our favorite morning TV show. At the moment I&rsquo;m being educated on Avatar: The Last Airbender. Ugh, Azula!</p>

<p>Breakfast is followed by a calendar sync. We check if either of us have overlapping or sensitive meetings. That way we know which calls either of us needs to take in another room - and which are okay to have in our workspace. Both of our desks are in the living room, and we use <a href="https://amzn.to/3ferNbP">noise cancelling headphones</a> throughout the day to help with focus. During the day we convert our bedroom to an ad hoc conference room.</p>

<p><img src="/images/posts/wfh-setup.jpg" title="A picture of my work-from-home setup." ></p>

<p>By 9 am, I have my desk set up: I replace my personal laptop with its corporate-issued counterpart. An <a href="https://amzn.to/2SwMCpc">external webcam</a> helps with the image quality, and a dedicated <a href="https://amzn.to/2W0vREV">display</a>, keyboard (<a href="http://www.vortexgear.tw/vortex2_2.asp?kind=47&amp;kind2=220&amp;kind3=&amp;kind4=999">Vortex Pok3r</a> with <a href="https://drop.com/buy/91600">Matt3o Nerd DSA</a> key cap set), and a mouse (<a href="https://amzn.to/2SwNWbE">Glorious Model O-</a>) alleviate the cramped feeling I get when using a laptop.</p>

<p>Most importantly, I&rsquo;m showered, groomed, and dressed by this time. While working in whatever I slept in has worked well for occasional remote Fridays, it proved to be unsustainable for prolonged remote work. Whenever I wasn&rsquo;t dressed for work, I found myself slowly drifting towards the couch, and trading a laptop for my phone. In fact, some days I dress up even more than I used to when going to the office!</p>

<p>This is where the clear separation between home and work is established. I&rsquo;m fully dressed and have my workstation set up: it&rsquo;s work time!</p>

<p>I spend the next few hours busy with heads down work, usually working on a design, writing some code, or doing anything which requires concentration. Playing something like a <a href="https://rainycafe.com/">Rainy Cafe</a> in the background helps me stay in the zone.</p>

<p>Back in the office, 11 am used to be my workout time: a gym buddy of mine would consistency exercise at 11 am, and I adopted the habit of joining him over the past few years. I decided not to move the time slot: at 11 am I change into my workout clothes and exercise: 30 to 45 minutes of bodyweight exercises or online classes use up the remainder of my morning willpower. I&rsquo;m so glad there are thousands of YouTube videos to keep me company!</p>

<p>My partner and I alternate cooking, and the next hour or so is reserved for cooking, lunch together, and cleanup. Remember the noise cancelling headphones? We haven&rsquo;t heard (and often seen) each other since morning! Getting to share lunch daily has definitely been the highlight of staying at home for me.</p>

<p>After that - back to work: design reviews, meetings, busywork.</p>

<p>I wrap up around 5 pm, and make a point not to work past that. I swap out my work laptop for my own (even if I&rsquo;m not planning to use it), and stow it away for the night. Disassembling my setup paired with showering and changing into house clothes creates a solid dividing line between work and home.</p>

<p>Cooking dinner together and evening activities follow, but that&rsquo;s a story for another time. Stay healthy and productive!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Drive on Linux with rclone]]></title>
    <link href="http://www.rosipov.com/blog/google-drive-on-linux-with-rclone/"/>
    <updated>2019-06-23T07:00:00+00:00</updated>
    <id>http://www.rosipov.com/blog/google-drive-on-linux-with-rclone</id>
    <content type="html"><![CDATA[<p>Recently Dropbox hit me with the <a href="https://help.dropbox.com/accounts-billing/settings-sign-in/computer-limit">following announcement</a>:</p>

<blockquote><p>Basic users have a three device limit as of March 2019.</p></blockquote>

<p>Being the &ldquo;basic&rdquo; user, and relying on Dropbox across multiple machines, I got unreasonably upset (&ldquo;How dare you deny me free access to your service?!&rdquo;) and started looking for a replacement.</p>

<p>I already store quite a lot of things in Google Drive, so it seemed like a no brainer: I migrated all my machines to Google Drive overnight. There was but only one problem: Google Drive has official clients for Windows and Mac, but there&rsquo;s nothing when it comes to Linux.</p>

<p>I found the Internets to be surprisingly sparse on the subject, and I had to try multiple solutions and spent more time than I&rsquo;d like researching options.</p>

<p>The best solution for me turned out to be <code>rclone</code>, which mounts Google Drive as a directory. It requires <code>rclone</code> service to be constantly running in order to access the data, which is a plus for me - I&rsquo;ve accidentally killed Dropbox daemon in the past and had to deal with conflicts in my files.</p>

<p>Install <code>rclone</code> (<a href="https://rclone.org/install/">instructions</a>):</p>

<pre><code>curl https://rclone.org/install.sh | sudo bash
</code></pre>

<p>From then on, <a href="https://rclone.org/drive/">rclone website some documentation</a> when it comes to the setup. I found it somewhat difficult to parse, so here it is paraphrased:</p>

<p>Launch <code>rclone config</code> and follow the prompts:</p>

<ul>
<li><code>n) New remote</code></li>
<li><code>name&gt; remote</code></li>
<li>Type of storage to configure: <code>Google Drive</code></li>
<li>Leave <code>client_id&gt;</code> and <code>client_secret&gt;</code> blank</li>
<li>Scope: <code>1 \ Full access to all files</code></li>
<li>Leave <code>root_folder_id&gt;</code> and <code>service_account_file&gt;</code> blank</li>
<li>Use auto config? <code>y</code></li>
<li>Configure this as a team drive? <code>n</code></li>
<li>Is this OK? <code>y</code></li>
</ul>


<p>From here on, you can interact with your Google Drive by running <code>rclone</code> commands (e.g. <code>rclone ls remote:</code> to list top level files). But I am more interested in a continuous running service and <code>mount</code> is what I need:</p>

<pre><code>rclone mount remote: $HOME/Drive
</code></pre>

<p>Now my Google Drive is accessible at <code>~/Drive</code>. All that&rsquo;s left is to make sure the directory is mounted on startup.</p>

<p>For Ubuntu/Debian, I added the following line to <code>/etc/rc.local</code> (before <code>exit 0</code>, and you need <code>sudo</code> access to edit the file):</p>

<pre><code>rclone mount remote: $HOME/Drive
</code></pre>

<p>For my i3 setup, all I needed was to add the following to <code>~/.config/i3/config</code>:</p>

<pre><code>exec rclone mount remote: $HOME/Drive
</code></pre>

<p>It&rsquo;s been working without an issue for a couple of weeks now - and my migration from Dropbox turned out to be somewhat painless and quick.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Desktop notifications from Chrome Secure Shell]]></title>
    <link href="http://www.rosipov.com/blog/desktop-notifications-from-chrome-secure-shell/"/>
    <updated>2017-08-04T17:33:16+00:00</updated>
    <id>http://www.rosipov.com/blog/desktop-notifications-from-chrome-secure-shell</id>
    <content type="html"><![CDATA[<p>For the past year or two I&rsquo;ve been working in the cloud. I use Chrome <a href="https://chrome.google.com/webstore/detail/secure-shell/pnhechapfaindjhompbnflcldabbghjo?hl=en">Secure Shell</a> to connect to my machines, and it works rather well. In fact, I moved away from my work Linux/Mac laptops towards an <a href="http://amzn.to/2hv68Ck">HP Chromebook</a>, which fullfilled both requirements I had: a browser and a terminal. One thing I missed about a Linux machine though is lack of <code>notify-send</code>-like functionality, especially when working with long-running builds.</p>

<p>Yesterday I pinged hterm team for assistance with this matter, and turns out recent release of Secure Shell supports Chrome desktop notifications! Furthermore, two amazing engineers (thanks Andrew and Mike!) crafted an <a href="https://chromium-review.googlesource.com/c/601549/3/hterm/etc/hterm-notify.sh">hterm-notify</a> script, which propagates notifications to Chrome, and by extent to desktop!</p>

<p>I made a few tiny changes, mainly since I don&rsquo;t use <code>screen</code>, and tmux sets my <code>$TERM</code> to <code>screen-256color</code> for some reason:</p>

<pre><code>#!/bin/sh
# Copyright 2017 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# Write an error message and exit.
# Usage: &lt;message&gt;
die() {
  echo "ERROR: $*"
  exit 1
}

# Send a notification.
# Usage: [title] [body]
notify() {
  local title="${1-}" body="${2-}"

  case ${TERM-} in
  screen*)  # This one's really tmux
    printf '\ePtmux;\e\e]777;notify;%s;%s\a\e\\' "${title}" "${body}"
    ;;
  *)        # This one's plain hterm
    printf '\e]777;notify;%s;%s\a' "${title}" "${body}"
    ;;
  esac
}

# Write tool usage and exit.
# Usage: [error message]
usage() {
  if [ $# -gt 0 ]; then
    exec 1&gt;&amp;2
  fi
  cat &lt;&lt;EOF
Usage: hterm-notify [options] &lt;title&gt; [body]

Send a notification to hterm.

Notes:
- The title should not have a semi-colon in it.
- Neither field should have escape sequences in them.
  Best to stick to plain text.
EOF

  if [ $# -gt 0 ]; then
    echo
    die "$@"
  else
    exit 0
  fi
}

main() {
  set -e

  while [ $# -gt 0 ]; do
    case $1 in
    -h|--help)
      usage
      ;;
    -*)
      usage "Unknown option: $1"
      ;;
    *)
      break
      ;;
    esac
  done

  if [ $# -eq 0 ]; then
    die "Missing message to send"
  fi
  if [ $# -gt 2 ]; then
    usage "Too many arguments"
  fi

  notify "$@"
}
main "$@"
</code></pre>

<p>Throwing this in as <code>~/bin/notify</code> (not forgetting to <code>chmod +x</code> and having <code>~/bin</code> in the <code>$PATH</code>) I can get a notification when a particular long running command is complete:</p>

<pre><code>sleep 30 &amp;&amp; notify Hooray "The sleep's done!"
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Profiling slow bashrc]]></title>
    <link href="http://www.rosipov.com/blog/profiling-slow-bashrc/"/>
    <updated>2015-07-15T17:07:53+00:00</updated>
    <id>http://www.rosipov.com/blog/profiling-slow-bashrc</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve recently noticed that it takes a long time for my bash to load. I&rsquo;ve found
<a href="http://stackoverflow.com/a/5015179/2578489">following StackOverflow answer</a> to be useful, and I based my solution to find a
startup time hog in my <code>~/.bashrc</code> upon it.</p>

<p>First off, add following few lines to your <code>/etc/bash.bashrc</code>,
<code>~/.bash_profile</code>, or wherever you&rsquo;d like to begin tracing the script:</p>

<pre><code>PS4='+ $(date "+%s.%N")\011 '
exec 3&gt;&amp;2 2&gt;/tmp/bashstart.$$.log
set -x
</code></pre>

<p>And add following few lines where you want to stop the trace:</p>

<pre><code>set +x
exec 2&gt;&amp;3 3&gt;&amp;-
</code></pre>

<p>Now start your bash session (you can simply open a new terminal Window for
that). The above will create <code>/tmp/bashstart.&lt;PID&gt;.log</code>. To analyze it, I wrote
a little Python script:</p>

<pre><code>import argparse
import heapq

parser = argparse.ArgumentParser(description='Analyze bashstart log for speed.')
parser.add_argument('filename', help='often /tmp/bashstart.&lt;PID&gt;.log')
parser.add_argument('-n', default=20, help='number of results to show')
args = parser.parse_args()
filename, n = args.filename, int(args.n)

with open(filename, 'r') as f:
    q = []
    prev_time = None
    for line in f.readlines():
        line = line.split()
        if '+' not in line[0] or len(line) &lt; 3:
            continue
        text = ' '.join(line[2:])
        seconds, nanoseconds = line[1].split('.')
        time = int(nanoseconds)
        diff = time - prev_time if prev_time is not None else 0
        prev_time = time
        heapq.heappush(q, (diff, text))

for diff, text in heapq.nlargest(n, q):
    print float(diff) / 1000000000, 's:', text
</code></pre>

<p>Save it as <code>bashprofile.py</code>, and run it as follows (replace file name with an
appropriate):</p>

<pre><code>python bashprofile.py /tmp/bashstart.2831.log -n 20
0.050056909 s: _powerline_init_tmux_support
0.045323022 s: _powerline_setup_prompt
0.044722024 s: _powerline_setup_prompt
0.044423727 s: '[' -f /usr/local/google/home/ruslano/.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh ']'
0.044364097 s: '[' -f /usr/local/google/home/ruslano/.local/lib/python2.7/site-packages/powerline/bindings/bash/powerline.sh ']'
0.044137159 s: _powerline_init_tmux_support
0.015839574 s: __shell_name=bash
0.010850276 s: command which which
0.010105462 s: PS2='\[\]  \[\] \[\]'
0.010000598 s: PS3=' Select variant  '
0.009837956 s: complete -F _svn -o default -X '@(*/.svn|*/.svn/|.svn|.svn/)' svn
0.009767517 s: PS2='\[\]  \[\] \[\]'
0.0095753 s: PS3=' Select variant  '
0.007915565 s: other_utils=(ant automake autoreconf libtoolize make mount patch readlink)
0.00771205 s: for script in version functions/selector cd functions/cli cli override_gem
0.007008299 s: for gnu_util in '"${gnu_utils[@]}"'
0.00693653 s: complete -F _crow crow
0.006803049 s: complete -F _svn -o default -X '@(*/.svn|*/.svn/|.svn|.svn/)' svn
0.006672906 s: for script in version functions/selector cd functions/cli cli override_gem
0.005912399 s: for entry in '${scripts[@]}'
</code></pre>

<p>In my example, <a href="https://github.com/powerline/powerline">Powerline</a> turned out to be a massive hog. Looks like I&rsquo;ll
have to troubleshoot the speed or plain disable it.</p>

<p>Don&rsquo;t forget to remove the lines you added to your bash configuration files
after you&rsquo;re done profiling.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Managing cd bookmarks with apparix]]></title>
    <link href="http://www.rosipov.com/blog/managing-cd-bookmarks-with-apparix/"/>
    <updated>2015-02-21T00:25:45+00:00</updated>
    <id>http://www.rosipov.com/blog/managing-cd-bookmarks-with-apparix</id>
    <content type="html"><![CDATA[<p>A couple of months ago I discovered apparix: a set of commands which augment
<code>cd</code> with bookmarks. It really is an amazing feeling when you zap between
multiple directories far away just with a couple of keystrokes! Apparix
provides three commands I use daily: <code>to</code>, <code>bm</code>, and <code>apparix</code> (program
suggests aliasing last one to <code>als</code>). Here&rsquo;s how I use it:</p>

<pre><code>$ pwd
/Users/ruslan
$ apparix
--- portals
--- expansions
--- bookmarks
j dotfiles     /Users/ruslan/.dotfiles
j blog         /Users/ruslan/Projects/ruslanosipov.github.io
$ to blog
$ pwd
/Users/ruslan/Projects/ruslanosipov.github.io
$ cd source/_posts
$ bm posts
added: posts -&gt; /Users/ruslan/Projects/ruslanosipov.github.io/source/_posts
$ to dotfiles
$ pwd
/Users/ruslan/.dotfiles
$ to posts
$ pwd
/Users/ruslan/Projects/ruslanosipov.github.io/source/_posts
</code></pre>

<p>The example above is self explanatory: you can see how over the span of a year
apparix saves hours of navigating directories you frequent.</p>

<h2>Installation</h2>

<p>If you don&rsquo;t like reading manuals, installation might be a confusing. But in
reality it&rsquo;s straightforward, you just need to add some functions or aliases to
your shell&rsquo;s configuration file.</p>

<p>Install <code>apparix</code> using your favorite package manager, and then pipe examples
apparix offers into your shell&rsquo;s <code>rc</code> file.</p>

<pre><code>apparix --shell-examples &gt;&gt; ~/.bashrc
</code></pre>

<p>Open your <code>.bashrc</code> (or another corresponding configuration file), and pick the
preferred way of using apparix: you&rsquo;ll see functions for bash and aliases for
csh given as examples. Pick whatever works for your shell, source your <code>rc</code>
file, and you&rsquo;re all set!</p>

<p>Happy jumping!</p>
]]></content>
  </entry>
  
</feed>
